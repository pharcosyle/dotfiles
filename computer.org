#+TITLE: Computer
#+PROPERTY: header-args :mkdirp yes

- TODO maybe make instances of my name/email be shared. Noweb or would some other mechanism be better?
* Channels
#+begin_src scheme :tangle gen/.config/guix/channels.scm
(cons* (channel
        (name 'penitent-tangent)
        (url "file:///home/pharcosyle/Projects/penitent-tangent"))
       (channel
        (name 'flat)
        (url "https://github.com/flatwhatson/guix-channel.git")
        (introduction
         (make-channel-introduction
          "33f86a4b48205c0dc19d7c036c85393f0766f806"
          (openpgp-fingerprint
           "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
       (channel
        (name 'rde)
        (url "https://git.sr.ht/~abcdw/rde")
        (introduction
         (make-channel-introduction
          "257cebd587b66e4d865b3537a9a88cccd7107c95"
          (openpgp-fingerprint
           "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
       (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
       %default-channels)

;; (append (channel
;;          (name 'penitent-tangent)
;;          (url "file:///home/pharcosyle/Projects/penitent-tangent"))
;;         (channel
;;          (name 'flat)
;;          (url "https://github.com/flatwhatson/guix-channel.git")
;;          (introduction
;;           (make-channel-introduction
;;            "33f86a4b48205c0dc19d7c036c85393f0766f806"
;;            (openpgp-fingerprint
;;             "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490")))
;;          (commit "7b8353ebbcf486e3344924d1cac0fa7ba47c371d"))
;;         (channel
;;          (name 'rde)
;;          (url "https://git.sr.ht/~abcdw/rde")
;;          (introduction
;;           (make-channel-introduction
;;            "257cebd587b66e4d865b3537a9a88cccd7107c95"
;;            (openpgp-fingerprint
;;             "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0")))
;;          (commit "930b9aa377cd4b2fbf43e39b2583df27b70f8ad0"))
;;         (channel
;;          (name 'nonguix)
;;          (url "https://gitlab.com/nonguix/nonguix")
;;          (introduction
;;           (make-channel-introduction
;;            "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
;;            (openpgp-fingerprint
;;             "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))
;;          (commit "706d8af5b111d85902280f1154dc4fad683b5281"))
;;         (channel
;;          (name 'guix)
;;          (url "https://git.savannah.gnu.org/git/guix.git")
;;          (introduction
;;           (make-channel-introduction
;;            "9edb3f66fd807b096b48283debdcddccfea34bad"
;;            (openpgp-fingerprint
;;             "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))
;;          (commit "20dfda3d9ebb14b72ed33fed940ee3a1f030c99a")))
#+end_src
* System
** Frostfire
#+begin_src scheme :tangle gen/computer/system/frostfire.scm
(load "spartan.scm")
(define-module (computer system frostfire)
  #:use-module ((gnu system) #:select (operating-system %default-kernel-arguments %base-firmware %base-packages))
  #:use-module ((gnu system accounts) #:select (user-account))
  #:use-module ((gnu system file-systems) #:select (file-system uuid %base-file-systems))
  #:use-module ((gnu system keyboard) #:select (keyboard-layout))
  #:use-module ((gnu system shadow) #:select (%base-user-accounts))
  #:use-module ((gnu bootloader) #:select (bootloader-configuration))
  #:use-module ((gnu bootloader grub) #:select (grub-efi-bootloader))
  #:use-module ((gnu services) #:select (service simple-service modify-services))
  #:use-module ((gnu services base) #:select (guix-service-type guix-configuration udev-service-type %default-authorized-guix-keys))
  #:use-module ((gnu services desktop) #:select (gnome-desktop-service-type bluetooth-service %desktop-services))
  #:use-module ((gnu services xorg) #:select (xorg-configuration set-xorg-configuration %default-xorg-modules))
  #:use-module ((gnu packages) #:select (specification->package))
  #:use-module ((gnu packages linux) #:select (brightnessctl))
  #:use-module ((guix gexp) #:select (local-file))
  #:use-module ((guix store) #:select (%default-substitute-urls))
  #:use-module ((nongnu system linux-initrd) #:select (microcode-initrd))
  #:use-module ((nongnu packages linux) #:select (linux-firmware broadcom-bt-firmware broadcom-sta))
  #:use-module ((penitent-tangent packages xf86-input-mtrack) :select (xf86-input-mtrack))
  #:use-module ((computer system spartan) #:select (spartan))

  #:use-module ((nongnu packages linux) #:select (linux))
  ;; #:use-module ((srfi srfi-1) #:select (first))
  ;; #:use-module ((guix channels) #:select (channel))
  ;; #:use-module ((guix inferior) #:select (inferior-for-channels lookup-inferior-packages))
  )

(define %my-xorg-config
  "
Section \"InputClass\"
  Identifier      \"Keyboards\"
  Driver          \"libinput\"
  MatchIsKeyboard \"on\"
EndSection
Section \"InputClass\"
  Identifier      \"Touchpads\"
  Driver          \"mtrack\"
  MatchIsTouchpad \"on\"
EndSection
")

(operating-system
  (kernel linux)
  ;; (kernel
  ;;   (let*
  ;;     ((channels
  ;;       (list (channel
  ;;              (name 'nonguix)
  ;;              (url "https://gitlab.com/nonguix/nonguix")
  ;;              (commit "c5fed11e7df221cad1045fc193b4136b34e23451"))
  ;;             (channel
  ;;              (name 'guix)
  ;;              (url "https://git.savannah.gnu.org/git/guix.git")
  ;;              (commit "4343476a3bffeb3714ad50ff7559c4b7f7c81551"))))
  ;;      (inferior
  ;;       (inferior-for-channels channels)))
  ;;     (first (lookup-inferior-packages inferior "linux" "5.12.9"))))
  (kernel-arguments (let ((kargs %default-kernel-arguments)
                          (blacklist "b43,b43legacy,ssb,bcm43xx,brcm80211,brcmfmac,brcmsmac,bcma"))
                      (cons* (string-append (car kargs) "," blacklist) (cdr kargs))))
  (kernel-loadable-modules (list broadcom-sta))
  (initrd microcode-initrd)
  (firmware (cons* broadcom-bt-firmware
                   linux-firmware
                   %base-firmware))
  (locale "en_US.utf8")
  (timezone "America/Los_Angeles")
  (keyboard-layout (keyboard-layout "us" #:model "macbook78"))
  (host-name "frostfire")
  (users (cons* (user-account
                  (name "pharcosyle")
                  (comment "Krzysztof Baranowski")
                  (group "users")
                  (home-directory "/home/pharcosyle")
                  (supplementary-groups
                    '("wheel" "netdev" "audio" "video" "input"))) ; `input' group necessary for mtrack ; TODO (at present, maybe there's a way around this. Libinput doesn't need it, for example, but maybe it's "built in" or something. Also I'd ideally like the touchpad to work on the gdm login screen.)
                %base-user-accounts))
  (packages
    (append
      (list (specification->package "nss-certs")
            (specification->package "xf86-input-libinput")
            (specification->package "xf86-input-mtrack")
            spartan)
      %base-packages))
  (services
   (cons* (service gnome-desktop-service-type)
          (set-xorg-configuration
           (xorg-configuration
            (modules (cons* xf86-input-mtrack
                            %default-xorg-modules))
            (keyboard-layout keyboard-layout)
            (extra-config (list %my-xorg-config))))
          (simple-service 'my-brightnessctl-udev-rules udev-service-type (list brightnessctl))
          (bluetooth-service #:auto-enable? #t)
          (modify-services %desktop-services
                           (guix-service-type config =>
                                              (guix-configuration
                                               (inherit config)
                                               (substitute-urls
                                                (append %default-substitute-urls
                                                        (list "https://mirror.brielmaier.net")))
                                               (authorized-keys
                                                (append %default-authorized-guix-keys
                                                        (list (local-file "./mirror.brielmaier.net.pub")))))))
          ;; %desktop-services
          ))
  (bootloader
    (bootloader-configuration
      (bootloader grub-efi-bootloader)
      (target "/boot/efi")
      (keyboard-layout keyboard-layout)))
  (file-systems
    (cons* (file-system
             (mount-point "/")
             (device
               (uuid "8359c1c2-f3f8-4693-9cab-838862daae9b"
                     'ext4))
             (type "ext4"))
           (file-system
             (mount-point "/boot/efi")
             (device (uuid "67E3-17ED" 'fat32))
             (type "vfat"))
           %base-file-systems)))
#+end_src
** mirror.brielmaier.net.pub
#+begin_src scheme :tangle gen/computer/system/mirror.brielmaier.net.pub
(public-key
  (ecc
    (curve Ed25519)
    (q #7514F8D729DB1935470A581CE3851ED9FD6F1F9BAFE1D8BEC77A931ADB7A4337#)))
#+end_src
** Spartan
#+begin_src scheme :tangle gen/computer/system/spartan.scm
(define-module (computer system spartan)
  #:use-module ((guix packages) #:select (package))
  #:use-module ((guix build-system trivial) #:select (trivial-build-system)))

(define-public spartan
  (package
   (name "spartan")
   (version "0")
   (synopsis "Spartan Window Manager")
   (source #f)
   (build-system trivial-build-system)
   (arguments
    `(#:modules ((guix build utils))
      #:builder
      (begin
        (use-modules ((guix build utils) #:select (mkdir-p make-desktop-entry-file)))
        (let* ((out (assoc-ref %outputs "out"))
               (xsessions (string-append out "/share/xsessions")))
          (mkdir-p xsessions)
          (make-desktop-entry-file
           (string-append xsessions (string-append "/" ,name ".desktop"))
           #:name (string-capitalize ,name)
           #:comment ,synopsis
           #:exec "spartan"))
        #t)))
   (description synopsis)
   (home-page #f)
   (license #f)))
#+end_src
* Home Environment
** Solitude
#+begin_src scheme :tangle gen/computer/home/solitude.scm
(load "spartan-binary.scm")
(define-module (computer home solitude)
  #:use-module ((gnu home) #:select (home-environment))
  ;; #:use-module (gnu home-services)
  ;; #:use-module (gnu home-services gnupg)
  ;; #:use-module (gnu home-services ssh)
  #:use-module ((gnu home-services version-control) #:select (home-git-service-type home-git-configuration))
  #:use-module ((gnu home-services files) #:select (home-files-service-type))
  #:use-module ((gnu home-services) #:select (home-environment-variables-service-type))
  #:use-module ((gnu home-services shells) #:select (home-bash-service-type))
  #:use-module ((gnu home-services shellutils) #:select (home-bash-direnv-service-type))
  ;; #:use-module (gnu home-services mcron)
  #:use-module ((gnu services) #:select (service simple-service))
  #:use-module ((gnu packages) #:select (specification->package))
  ;; #:use-module (gnu packages linux)
  ;; #:use-module (gnu packages admin)
  ;; #:use-module (gnu packages gnupg)
  ;; #:use-module (gnu system keyboard)
  #:use-module ((guix packages) #:select (package-input-rewriting))
  #:use-module ((guix gexp) #:select (local-file))

  #:use-module ((gnu packages emacs) #:select (emacs))
  #:use-module ((flat packages emacs) #:select (emacs-native-comp))

  #:use-module ((computer home spartan-binary) #:select (spartan-binary)))

;; (define %my-fontconfig-config-file
;;   "
;; <?xml version=\"1.0\"?>
;; <!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">
;; <fontconfig>
;;   <dir>~/org/spring_cleaning/.guix-extra-profiles/multiverse/multiverse/share/fonts</dir>
;;   <match target=\"font\">
;;     <test name=\"family\" compare=\"eq\">
;;         <string>Source Code Pro</string>
;;     </test>
;;     <edit mode=\"assign\" name=\"hintstyle\">
;;       <const>hintfull</const>
;;     </edit>
;;     <edit name=\"antialias\" mode=\"assign\">
;;       <bool>true</bool>
;;     </edit>
;;   </match>
;; </fontconfig>
;; ")

(home-environment
 ;; (packages (list htop))
 (packages (list spartan-binary
                 ;; ((package-input-rewriting `((,emacs . ,emacs-native-comp)))
                 ;;  spartan-binary)
                 ;; TODO temporary font packages to make guix-home fontconfig work
                 (specification->package "font-google-noto")
                 (specification->package "font-adobe-source-code-pro")))
 (services
  (list
   (simple-service 'my-channels
                   home-files-service-type
                   (list `("config/guix/channels.scm"
                           ,(local-file "../../.config/guix/channels.scm"))))
   ;; TODO Documentation gives this example for setting LESSHISTFILE but maybe doing it in a shell profile would be better?
   (simple-service 'my-env-vars
                   home-environment-variables-service-type
                   `(("LESSHISTFILE" . "$XDG_CACHE_HOME/.lesshst")
                     ;; ("SHELL" . ,(file-append zsh "/bin/zsh"))
                     ))
   (service home-bash-service-type
;;             (home-bash-configuration
;;              (bash-profile '("\
;; export HISTFILE=\"$XDG_CACHE_HOME\"/.bash_history")))
            )
   (service home-git-service-type
            (home-git-configuration
             (config
              `((user
                 ((name . "Krzysztof Baranowski")
                  (email . "pharcosyle@gmail.com")))
                ;; (http "https://weak.example.com"
                ;;   ((ssl-verify . #f)))
                ;; (gpg
                ;;  ((program . ,(file-append gnupg "/bin/gpg"))))
                ;; (sendmail
                ;;  ((annotate . #t)))
                ))))
   (simple-service 'my-doomdir
                   home-files-service-type
                   (list `("config/doom"
                           ,(local-file "../../.config/doom" #:recursive? #t))))
   (service home-bash-direnv-service-type)
   ;; (service home-keyboard-service-type
   ;;          (keyboard-layout "us,ru" "dvorak,"
   ;;                           #:options '("grp:win_space_toggle" "ctrl:nocaps")))
   ;; (service home-fontconfig-service-type)
   ;; (simple-service 'my-fontconfig-config-file
   ;;                 home-files-service-type
   ;;                 (list `("config/fontconfig/fonts.conf"
   ;;                         ,(plain-file "fonts.conf" %my-fontconfig-config-file))))
   ;; (service home-ssh-service-type
   ;;          (home-ssh-configuration
   ;;           (extra-config
   ;;            (list
   ;;             (ssh-host "savannah"
   ;;                       '((compression . #f)))))))
   ;; (service home-gnupg-service-type
   ;;          (home-gnupg-configuration
   ;;           (gpg-agent-config
   ;;            (home-gpg-agent-configuration
   ;;             (ssh-agent? #t)))))
   )))

;; (service home-state-service-type
;;          (append
;;           (list
;;            (state-rsync "/home/bob/tmp/example-rsync-state/"
;;                         "abcdw@olorin.lan:/var/services/homes/abcdw/tmp-state/")
;;            (state-git "/home/bob/tmp/talkes/"
;;                       "git@git.sr.ht:~abcdw/rde"))))
#+end_src
** Spartan Binary
#+begin_src scheme :tangle gen/computer/home/spartan-binary.scm
(define-module (computer home spartan-binary)
  #:use-module ((guix packages) #:select (package))
  #:use-module ((guix build-system trivial) #:select (trivial-build-system))
  #:use-module ((gnu packages bash) #:select (bash))
  #:use-module ((gnu packages emacs) #:select (emacs))
  #:use-module ((gnu packages glib) #:select (dbus))
  #:use-module ((gnu packages xorg) #:select (xhost xset))
  #:use-module ((gnu packages xdisorg) #:select (xss-lock xsettingsd)))

(define startup-script
  "#!/bin/sh
. ~/Projects/dotfiles/gen/dotprofile
xhost +SI:localuser:$USER
export _JAVA_AWT_WM_NONREPARENTING=1
xsettingsd --config=$HOME/Projects/dotfiles/gen/desktop/xsettingsd.conf &
xset r rate 300 30 # TODO tweak?
xss-lock -- slock &
~/.config/emacs/bin/doom env
exec dbus-launch --exit-with-session /gnu/store/i77clb2i8lxdxfbr2zl232d0wk471dvh-emacs-native-comp-28.0.50-175.8b49e99/bin/emacs -mm -l ~/Projects/dotfiles/gen/desktop.el # --debug-init")

(define-public spartan-binary
  (package
   (name "spartan-binary-test")
   (version "0")
   (source #f)
   (build-system trivial-build-system)
   (inputs
    `(("bash" ,bash) ; `bash-minimal' might be okay/preferable here
      ("xhost" ,xhost)
      ("xset" ,xset)
      ("xss-lock" ,xss-lock)
      ("xsettingsd" ,xsettingsd)
      ("dbus" ,dbus)
      ("emacs" ,emacs)))
   (arguments
    `(#:modules ((guix build utils))
      #:builder
      (begin
        (use-modules ((guix build utils) #:select (mkdir-p make-desktop-entry-file substitute*)))
        (let* ((out (assoc-ref %outputs "out"))
               (bin (string-append out "/bin"))
               (executable (string-append bin "/spartan")))
          (mkdir-p bin)
          (with-output-to-file executable
            (lambda _
              (display ,startup-script)))
          (let ((cmd (lambda* (input #:optional (binary input))
                       (string-append (assoc-ref %build-inputs input) "/bin/" binary))))
            (substitute* executable
              (("/bin/sh") (cmd "bash" "sh"))
              (("^xhost") (cmd "xhost"))
              (("^xsettingsd") (cmd "xsettingsd"))
              (("^xset") (cmd "xset"))
              (("^xss-lock") (cmd "xss-lock"))
              (("dbus-launch") (cmd "dbus" "dbus-launch"))
              ((" emacs ") (string-append " " (cmd "emacs") " ")))) ; hacky
          (chmod executable #o555))
        #t)))
   (synopsis "Spartan Binary")
   (description synopsis)
   (home-page #f)
   (license #f)))
#+end_src
* Manifests
** omni
#+begin_src scheme :tangle gen/omni.scm
(use-modules ((guix packages) #:select (package-input-rewriting))
             ((gnu packages emacs) #:select (emacs emacs-minimal emacs-no-x))
             ((flat packages emacs) #:select (emacs-native-comp))

             ;; ((srfi srfi-1) #:select (first))
             ;; ((guix channels) #:select (channel))
             ;; ((guix inferior) #:select (inferior-for-channels lookup-inferior-packages))
             )

(concatenate-manifests
 (list
  ;; (packages->manifest
  ;;  (list
  ;;   (let ((inferior
  ;;          (inferior-for-channels
  ;;           (list (channel
  ;;                  (name 'flat)
  ;;                  (url "https://github.com/flatwhatson/guix-channel.git")
  ;;                  (commit "7b8353ebbcf486e3344924d1cac0fa7ba47c371d"))
  ;;                 ;; TODO not sure if specifying the guix channel is necessary
  ;;                 (channel
  ;;                  (name 'guix)
  ;;                  (url "https://git.savannah.gnu.org/git/guix.git")
  ;;                  (commit "4343476a3bffeb3714ad50ff7559c4b7f7c81551"))))))
  ;;     (first (lookup-inferior-packages inferior "emacs-native-comp")))))
  (specifications->manifest
   '("ungoogled-chromium"

     "emacs-native-comp"

     "xkbcomp"
     "setxkbmap"

     "xcape"

     "xrandr"

     "xinput"


     ;; Desktop
     "brightnessctl"
     "playerctl"
     "scrot"
     "pavucontrol"
     "pasystray"
     "dunst"
     "udiskie"
     "redshift:gtk"

     "dracula-theme"


     "papirus-icon-theme" ; TODO trying out

     "font-google-noto"
     ;; Coding I guess?
     "font-adobe-source-code-pro"

     ;; Doom dependencies ; TODO these should be inputs / propogated inputs to a Doom guix package I find/create
     "git"
     "ripgrep"
     "coreutils"
     "fd"
     "clang" ; TODO I still don't know what this is for. Notably hlissner doesn't install clang, nor gcc, in his emacs "module" in his dotfiles.

     "gtk+:bin" ; For `gtk-launch' for counsel-linux-app ; TODO can this be made an input to a/the counsel package?

     ;; General
     ;; "git"
     "zip"
     "unzip"
     ;; "openssh" ; Might want this at some point for command line ssh'ing and the like.

     ;; Apps
     "gimp"))
  (packages->manifest
   (map (package-input-rewriting `((,emacs . ,emacs-native-comp)
                                   (,emacs-minimal . ,emacs-native-comp)
                                   (,emacs-no-x . ,emacs-native-comp)))
        (list (specification->package "emacs-exwm")
              (specification->package "emacs-desktop-environment"))))))
#+end_src
* dotprofile
#+begin_src sh :tangle gen/dotprofile
# TODO these should be in a .profile or something

GUIX_EXTRA_PROFILES=$HOME/org/spring_cleaning/.guix-extra-profiles
# GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

# TODO do I need to source ~/.guix-profile here like daviwil does? I don't think so.

for i in $GUIX_EXTRA_PROFILES/*; do
  profile=$i/$(basename "$i")
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset profile
done


export VISUAL=emacsclient
export EDITOR="$VISUAL"





# TODO where should these be? I could put them in desktop.el but they should be run in both EXWM and Gnome, if I care

xrandr --fb 2728x1800 --output eDP-1 --transform 1,0,-152,0,1,0,0,0,1

xkbcomp -I$HOME/Projects/dotfiles/gen/xkb $HOME/Projects/dotfiles/gen/xkb/current_setxkbmap_print $DISPLAY

trackpad_set ()
{
  xinput set-prop "bcm5974" "$@"
}
trackpad_set "Device Accel Profile" 2
trackpad_set "Trackpad Sensitivity" 0.08
trackpad_set "Trackpad Edge Sizes" 15, 15, 15, 15 # TODO make the sides smaller (like macOS). Maybe turn the top and bottom down a bit too.
trackpad_set "Trackpad Scroll Settings" 150, 10, 0 # TODO trying this out, doesn't seem to do anything in chromium, maybe a full restart?
trackpad_set "Trackpad Scroll Coasting" 0.05 200
trackpad_set "Trackpad Scroll Buttons" 5, 4, 7, 6 # Invert vertical and horizontal scrolling.
trackpad_set "Trackpad Drag Settings" 0, 350, 40, 200, 500 # First value disables, others are defaults.
# Three-finger dragging
trackpad_set "Trackpad Swipe Settings" 1, 0, 1000
trackpad_set "Trackpad Swipe Buttons" 1, 1, 1, 1
# Trying out
trackpad_set "Trackpad Swipe Settings" 1, 0, 1500
trackpad_set "Trackpad Palm Detection" 1, 0
trackpad_set "Trackpad Palm Size" 30
# trackpad_set "Trackpad Scroll Settings" 250, 10, 0
trackpad_set "Trackpad Hold1Move1 Stationary Settings" 20, 0 # First value is the default, second value disables. # TODO I think?
trackpad_set "Trackpad Edge Scroll Settings" 105, 20, 0, 0, 0, 0, 0 # First three values are defaults, last four disable. # TODO I think? Otherwise disable by just setting the distance really high?
#+end_src
* Desktop
** xsettingsd
#+begin_src conf :tangle gen/desktop/xsettingsd.conf
# TODO these
Net/EnableEventSounds 1
Net/EnableInputFeedbackSounds 1

Xft/Antialias 1
Xft/Hinting 1
Xft/HintStyle "hintfull"
Xft/DPI 196608
# Xft/DPI 184320 # TODO I do like the chromium interface size better at this dpi
# Xft/DPI 225280

# Xft/RGBA "rgb"

# Xft/Autohint 0 # TODO donno if the casing is right or if it matters



# Gtk/ToolbarIconSize "large"
# Net/ApplicationPreferDarkTheme 1
# Gtk/FontName "Cantarell 11"
# Gtk/MonospaceFontName "Fira Mono 10"
Gtk/CursorThemeName "Adwaita"
Gtk/CursorThemeSize 48

# TODO theme
# - before doing any more wait until I've picked a browser and have installed more apps like e.g. VLC
# - make sure my browser reads the device theme preference as dark
# - if I don't like dracula try another theme or maybe patch it with my emacs colors (perhaps some other theme would be a better base?)
# - look at dracula / other theme I choose in Gnome to see if it looks "right"
Net/ThemeName "Dracula"
# TODO icon theme
# Donno about these new papirus icons, daviwil and hlissner seem to like them but I'm not sure I do (the Files icons and particularly the systray ones, can I change just those?). Maybe they'll look better once Dracula is enabled? Maybe a wrong / lower-resolution version of the icons is being used and I need to set up where they're looked for?
Net/IconThemeName "Papirus-Dark"
# seems like this is the default, at least for dracula
# Gtk/DecorationLayout "menu:minimize,maximize,close"
#+end_src
** dunstrc
#+begin_src conf :tangle gen/desktop/dunstrc
[global]
    geometry = "500x10-200+50"
    transparency = 10
    separator_color = frame
    padding = 15
    horizontal_padding = 15
    text_icon_padding = 15
    frame_width = 2
    frame_color = "#89AAEB"
    idle_threshold = 120
    font = Cantarell 20 # TODO Depending on how I end up doing fonts, set this to a default variable-width font that picks up my system setting or change this to my preferred font
    line_height = 2
    markup = full
    format = "<b>%s</b>\n%b"
    show_age_threshold = 60
    word_wrap = yes
    icon_position = left
    min_icon_size = 40
    max_icon_size = 40
    # icon_path = /usr/share/icons/Adwaita/96x96/status:/usr/share/icons/Adwaita/96x96/emblems # TODO should I add more paths or something?
    # TODO browser = qutebrowser
    corner_radius = 16
    mouse_right_click = do_action

[urgency_low]
    background = "#1c1f26"
    foreground = "#9ca0a4"
    timeout = 10

[urgency_normal]
    background = "#1c1f26"
    foreground = "#ffffff"
    timeout = 10

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
#+end_src
** xkb
- TODO I'm using "C" for the xkb syntax currently, what should it be / is there a value for "no language"? Don't do this until the end.
*** current_setxkbmap_print
#+begin_src c :tangle gen/xkb/current_setxkbmap_print
xkb_keymap {
	xkb_keycodes  { include "evdev+aliases(qwerty)"	};
	xkb_types     { include "complete+numpad(mac)"	};
	xkb_compat    { include "complete"	};
	xkb_symbols   { include "pc+macintosh_vndr/us+inet(evdev)+ctrl(nocaps)+shift(both_capslock)+mysymbols(semicolon_to_control)"	};
	xkb_geometry  { include "macintosh(macbook78)"	};
};
#+end_src
*** xkb config
#+begin_src c :tangle gen/xkb/symbols/mysymbols
partial modifier_keys
xkb_symbols "semicolon_to_control" {
    key <AC10> { [ Control_R, colon ] };
    modifier_map Control { <AC10> };
};
#+end_src
* Emacs
# :PROPERTIES:
# :header-args+: :noweb yes :lexical t
# :END:
- TODO donno if the lexical property is really necessary, I guess maybe it makes evaluation /from the org file/ work lexically?
# ** Org Private
# #+name: lexical-binding-header
# #+begin_src elisp
# ;;; -*- lexical-binding: t; -*-
# #+end_src
** Doomdir
*** init.el
:PROPERTIES:
:header-args+: :tangle gen/.config/doom/init.el :lexical t
:END:
**** Header
#+begin_src elisp
;;; -*- lexical-binding: t; -*-
#+end_src
**** ~doom!~ block
#+begin_src elisp
(doom! :completion
       company
       (ivy +icons)

       :ui
       doom
       doom-dashboard
       (emoji +unicode)
       hl-todo
       hydra
       indent-guides
       (ligatures +extra)
       modeline
       nav-flash
       ophints
       (popup +defaults +all)
       treemacs
       vc-gutter
       vi-tilde-fringe
       window-select
       workspaces

       :editor
       (evil +everywhere)
       file-templates
       fold
       format
       lispy
       multiple-cursors
       rotate-text
       snippets
       word-wrap

       :emacs
       (dired +icons)
       electric
       (ibuffer +icons)
       undo
       vc

       :term
       eshell
       vterm

       :checkers
       syntax

       :tools
       direnv
       (eval +overlay)
       lookup
       (magit +forge)
       (pass +auth)
       ;; pdf ; TODO Re-enable this once I'm compiling its `epdfinfo' dependency so `org-store-link' doesn't throw an error.
       prodigy
       rgb
       taskrunner

       :lang
       clojure
       data
       emacs-lisp
       json
       javascript
       markdown
       nix
       (org +journal)
       rest
       (scheme +guile)
       sh
       web
       yaml

       :app
       calendar

       :config
       (default +bindings +smartparens))
#+end_src
**** init-phase configuration
***** Clojure :lang:clojure:bindings:
#+begin_src elisp
(use-package-hook! clojure-mode
  :post-init
  (setq clojure-refactor-map-prefix (kbd "s-M r"))) ; Has to be set before clojure-mode loads so don't put this in a hook. ; TODO temporary binding
#+end_src
***** Lispyville :lisp:bindings:
#+begin_src elisp
(use-package-hook! lispyville
  :post-init
  (setq lispyville-key-theme nil))
#+end_src
*** config.el
:PROPERTIES:
:header-args+: :tangle gen/.config/doom/config.el :lexical t
:END:
**** Header
#+begin_src elisp
;;; -*- lexical-binding: t; -*-
#+end_src
**** Requires
#+begin_src elisp
(use-package! dash)
#+end_src
**** Personal Info :user:
#+begin_src elisp
(setq user-full-name "Krzysztof Baranowski"
      user-mail-address "pharcosyle@gmail.com")
#+end_src
**** Private :path:
#+begin_src elisp
(defconst biome--org-dir (concat org-directory "~/org"))
(defconst biome--org-gcal-dir (concat biome--org-dir "/gcal"))

(defconst biome--very-big 1000000)
#+end_src
**** General :UI:
#+begin_src elisp
;; hlissner says this must be set before org loads. I'm not sure if this is a requirement of org-mode but the Doom org config certainly does a lot of gymnastics with this variable so I'll just set this exactly like the example config does.
(setq org-directory biome--org-dir)

(setq scroll-margin 10
      save-interprogram-paste-before-kill t)

;; I like having line numbers on but hlissner says they're slow so I might want to disable them at some point. Keep in mind I use them to determine what lines are continuation lines so I might have to make the right fringe bigger if I do this and set visual-line-fringe-indicators.
;; (setq display-line-numbers-type nil)
#+end_src
***** Doom resets
#+begin_src elisp
(setq-default indent-tabs-mode t)

;; I'd like to have this on but in the Doom code it says it's more efficient not to.
;; (setq-default cursor-in-non-selected-windows t)
#+end_src
**** Doom
***** UI :UI:theming:
#+begin_src elisp
(setq doom-theme 'doom-nuclear
      doom-font (font-spec :family "Source Code Pro" :size 24))
#+end_src
***** Leader/Localleader :bindings:
#+begin_src elisp
(setq doom-leader-alt-key "s-SPC"
      doom-localleader-key "s-m"
      doom-localleader-alt-key "s-m")
#+end_src
**** Keybindings :bindings:
#+begin_src elisp
(setq help-char (string-to-char "\C-_"))
#+end_src
***** Translations
#+begin_src elisp
(defun biome--trans (&rest rest)
  (-each (-partition 2 rest)
    (-lambda ((to from))
      (define-key key-translation-map (kbd to) (kbd from)))))

(biome--trans "C-h" "DEL"
              "C-?" "C-h"

              "s-i" "<tab>"
              "s-I" "<backtab>"

              "s-h" "<left>"
              "s-j" "<down>"
              "s-k" "<up>"
              "s-l" "<right>")
#+end_src
***** General
#+begin_src elisp
(defalias 'original-yank-pop #'yank-pop)

;; REVIEW Some of these should be in `:after' (or their respective package) sections but I'm not totally certain where I want to put bindings yet and I'm lazy.
(map! "s-V" #'original-yank-pop

      "s-SPC" doom-leader-map

      ;; Copied from Doom MacOS bindings: ~/.emacs.d/modules/config/default/config.el:263
      "s-`" #'other-frame
      "s-n" #'+default/new-buffer
      "s-z" #'undo
      "s-Z" #'redo
      "s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
      "s-v" #'yank
      "s-s" #'save-buffer
      "s-x" #'execute-extended-command
      :v "s-x" #'kill-region
      "s-/" (cmd! (save-excursion (comment-line 1)))
      :n "s-/" #'evilnc-comment-or-uncomment-lines
      :v "s-/" #'evilnc-comment-operator

      "s-t" (lookup-key doom-leader-map (kbd "`"))
      "s-f" (cl-flet ((f (lookup-key doom-leader-map (kbd "s b"))))
              ;; `swiper' hangs initially when `visual-line-mode' is active. Plus Doom defaults to having `visual-line-mode' enabled in text-mode (and derived) buffers where it makes more sense to not search linewise.
              (cmd! (if visual-line-mode
                        (letf! ((#'swiper #'swiper-isearch))
                          (f))
                      (f))))
      "s-r" (lookup-key doom-leader-map (kbd "f r"))
      "s-w" (lookup-key doom-leader-map (kbd "b k"))
      "s-d w" (lookup-key doom-leader-map (kbd "w d"))
      "s-d s-w" (cmd! (kill-current-buffer)
                      (+workspace/close-window-or-workspace))
      "s-g" (lookup-key doom-leader-map (kbd "g g"))
      "s-," (lookup-key doom-leader-map (kbd "w w"))
      "s-<" (lookup-key doom-leader-map (kbd "w W"))
      "s-y" (lookup-key doom-leader-map (kbd "i y"))
      "s-{" (lookup-key doom-leader-map (kbd "b p"))
      "s-}" (lookup-key doom-leader-map (kbd "b n"))
      "s-p" (lookup-key global-map (kbd "C-~"))

      "s-u" (lookup-key doom-leader-map (kbd "u"))
      "s-U" #'negative-argument         ; Trying this out.
      (:map universal-argument-map
       "s-u" #'universal-argument-more)

      (:after evil-easymotion
       "s-a" (lookup-key evilem-map (kbd "SPC")))

      "s-." #'repeat

      "s-J" #'evil-scroll-down
      "s-K" #'evil-scroll-up

      (:prefix "s-d"
       "." #'repeat-complex-command

       "h" #'git-gutter:popup-hunk
       ;; "o" #'+macos/open-in-default-program ;; TODO consider a Guix alternative? Meh.
       "r" #'projectile-replace
       "t" #'tldr
       "s" #'org-save-all-org-buffers
       "a" #'link-hint-open-multiple-links
       ;; "b" (cmd! (evil-local-mode 'toggle)
       ;;           (when evil-local-mode (evil-normal-state)))
       (:prefix "c"
        "f" #'org-gcal-fetch
        "s" #'org-gcal-sync
        "p" #'org-gcal-post-at-point)))
#+end_src
**** Packages
#+begin_src elisp
(after! all-the-icons-dired
  (setq all-the-icons-dired-monochrome nil))

(after! avy
  (setq avy-single-candidate-jump t))
#+end_src
***** Battery :UI:
#+begin_src elisp
(use-package! battery
  :config
  (display-battery-mode 1))
#+end_src
***** Clojure :lang:clojure:
#+begin_src elisp
(after! clojure-mode
  (set-ligatures! 'clojure-mode :lambda "fn"))
#+end_src
***** Cider :lang:clojure:persistence:
#+begin_src elisp
(after! cider
  (setq cider-repl-history-size biome--very-big
        cider-print-options '(("length" 100))))

;; TODO make sure this is still working after nesting in `after!'
(after! cider-repl
  (add-hook! 'cider-repl-mode-hook
             #'goto-address-prog-mode
             #'highlight-numbers-mode
             #'rainbow-delimiters-mode
             #'yas-minor-mode-on
             #'biome--sp-strict-h))
#+end_src
***** Clj Refactor :lang:clojure:bindings:
#+begin_src elisp
(after! clj-refactor
  ;; TODO make sure this is still working after nesting in `after!'
  (add-hook! 'clj-refactor-mode-hook
    (cljr-add-keybindings-with-prefix "s-M R"))) ; TODO temporary binding
#+end_src
***** Counsel :completion:UI:
#+begin_src elisp
(after! counsel
  (setq counsel-yank-pop-separator "\n--------------------------------\n"))
#+end_src
***** Doom Modeline :UI:
#+begin_src elisp
(after! doom-modeline
  ;; (setq doom-modeline-checker-simple-format nil)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-persp-name t))
#+end_src
***** Doom Themes :UI:
#+begin_src elisp
;; TODO get rid of this if I'm not going to try it out again
;; (after! doom-themes
;;   (doom-themes-visual-bell-config))
#+end_src
***** Emacs Lisp :lang:
#+begin_src elisp
(setq-hook! 'emacs-lisp-mode-hook indent-tabs-mode nil)
#+end_src
***** Emojify :UI:
#+begin_src elisp
(after! emojify
  (setq emojify-display-style 'unicode))
#+end_src
***** Eshell :persistence:
#+begin_src elisp
(after! eshell
  (setq eshell-history-size biome--very-big)) ; Setting this to `nil' to inherit envvar HISTSIZE is another option.
#+end_src
***** Evil :UI:theming:
#+begin_src elisp
(after! evil
  (setq evil-default-cursor (lambda () (evil-set-cursor-color "#fdd94a"))
        evil-emacs-state-cursor (lambda () (evil-set-cursor-color "#ff9999"))))
#+end_src
***** Evil Org :org:bindings:
#+begin_src elisp
(after! evil-org
  (map! :map evil-org-mode-map
        :nv "C-j" #'outline-forward-same-level
        :nv "C-k" #'outline-backward-same-level))
#+end_src
***** Evil Multiedit
#+begin_src elisp
(after! evil-multiedit
  (setq evil-multiedit-follow-matches t))
#+end_src
***** Expand Region :bindings:
#+begin_src elisp
(use-package! expand-region
  :defer t
  :init
  (map! :nv "s-e" #'er/expand-region
        :nv "s-E" #'er/contract-region)
  :config
  (setq expand-region-fast-keys-enabled nil) ; My mapping is conventient enough and I don't want the repeat key to conflict with anything.
  ;; Copied from Doom config: ~/.emacs.d/modules/config/default/+emacs.el:12
  (defadvice! biome--quit-expand-region-a (&rest _)
    "Properly abort an expand-region region."
    :before '(evil-escape doom/escape)
    (when (memq last-command '(er/expand-region er/contract-region))
      (er/contract-region 0))))
#+end_src
***** Highlight Indent Guides :lang:prog_mode:UI:
#+begin_src elisp
(remove-hook! '(prog-mode-hook
                text-mode-hook
                conf-mode-hook)
  #'highlight-indent-guides-mode)
#+end_src
***** Ivy :completion:bindings:UI:
#+begin_src elisp
(after! ivy
  (setq +ivy-buffer-preview t
        ivy-extra-directories nil
        ivy-count-format "(%d/%d) ")
  (dolist (i '(counsel-yank-pop
               counsel-evil-registers))
    (add-to-list 'ivy-height-alist `(,i . 10)))

  (map! :map ivy-minibuffer-map
        "s-J" #'ivy-scroll-up-command
        "s-K" #'ivy-scroll-down-command
        "C-r" #'ivy-reverse-i-search ; Doom overrides this, restore it.
        :map ivy-reverse-i-search-map
        "C-k" #'previous-line))
#+end_src
***** Ivy Hydra :completion:bindings:
#+begin_src elisp
(after! ivy-hydra
  (defhydra+ hydra-ivy ()
    ;; Doom overrides these imporant ivy hydra heads: ~/.emacs.d/modules/completion/ivy/autoload/hydras.el
    ("m" ivy-mark)
    ("u" ivy-unmark)
    ("t" ivy-toggle-marks)))
#+end_src
***** Lispy :lisp:
#+begin_src elisp
;; Not using lispy, remove the Doom module's hooks.
(remove-hook! '(lisp-mode-hook
                emacs-lisp-mode-hook
                ielm-mode-hook
                scheme-mode-hook
                racket-mode-hook
                hy-mode-hook
                lfe-mode-hook
                dune-mode-hook
                clojure-mode-hook
                fennel-mode-hook)
  #'lispy-mode)
(remove-hook! 'eval-expression-minibuffer-setup-hook #'doom-init-lispy-in-eval-expression-h)
#+end_src
***** Lispyville :lisp:lang:prog_mode:bindings:
#+begin_src elisp
(use-package! lispyville
  :hook (prog-mode . lispyville-mode)
  :config
  (lispyville-set-key-theme
   '(operators
     c-w
     c-u
     commentary))

  (map! :map lispyville-mode-map
        "s-C-j" #'lispyville-beginning-of-next-defun
        "s-C-k" #'lispyville-beginning-of-defun
        "s-C-," #'lispyville-end-of-defun
        "s-C-a" #'lispyville-drag-backward
        "s-C-g" #'lispyville-drag-forward
        "s-C-p" #'lispyville-prettify
        (:prefix "s-C-;"
         "R" #'lispyville-raise-list)))
#+end_src
***** Magit :UI:persistence:
#+begin_src elisp
(after! magit
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
  (setq transient-history-limit biome--very-big))
#+end_src
***** Org :org:UI:
#+begin_src elisp
(after! org
  (setq org-agenda-files `(,biome--org-dir
                           ,biome--org-gcal-dir
                           ,(concat biome--org-dir "/projects"))
        org-log-done 'time
        org-priority-lowest ?E
        org-priority-default ?C
        org-priority-faces `((?A . ,(doom-color 'red))
                             (?B . ,(doom-color 'orange))
                             (?C . ,(doom-color 'blue))
                             (?D . ,(doom-color 'yellow))
                             (?E . ,(doom-color 'green)))))
#+end_src
***** Org Gcal :user:secret:persistence:
#+begin_src elisp
(after! org-gcal
  (setq org-gcal-client-id "446729771716-pp79934q99aro2h8v3iki1fejcodbdoo.apps.googleusercontent.com"
        org-gcal-client-secret (-> (auth-source-search :host org-gcal-client-id) car (plist-get :secret) funcall)
        org-gcal-fetch-file-alist `(("pharcosyle@gmail.com" . ,(concat biome--org-gcal-dir "/pharcosyle@gmail.com.org"))
                                    ("addressbook%23contacts@group.v.calendar.google.com" . ,(concat biome--org-gcal-dir "/contacts.org"))
                                    ("en.usa%23holiday@group.v.calendar.google.com" . ,(concat biome--org-gcal-dir "/holidays.org")))
        org-gcal-recurring-events-mode 'nested))
#+end_src
***** Paren :UI:
#+begin_src elisp
(after! paren
  (setq! show-paren-delay 0))
#+end_src
***** Prog Mode :lang:prog_mode:
#+begin_src elisp
(add-hook! 'prog-mode-hook #'biome--sp-strict-h)
#+end_src
***** Rainbow Delimiters :UI:theming:
#+begin_src elisp
(after! rainbow-delimiters
  (setq rainbow-delimiters-max-face-count 8)) ; TODO make sure this is working and I didn't need to put it in an `:init'`or anything
#+end_src
***** Recentf :persistence:
#+begin_src elisp
(after! recentf
  (setq recentf-max-saved-items 500))
#+end_src
***** Smartparens :bindings:
#+begin_src elisp
(after! smartparens
  (map! :map smartparens-mode-map
        "s-C-h" #'sp-backward-sexp
        "s-C-l" #'sp-forward-sexp
        "s-C-u" #'sp-backward-up-sexp
        "s-C-o" #'sp-up-sexp
        :gn "s-C-m" #'sp-backward-down-sexp ; Bind in normal mode explicitly to override the Doom mapping in ~/.emacs.d/modules/config/default/config.el:447
        "s-C-." #'sp-down-sexp
        "s-C-c" #'sp-splice-sexp
        "s-C-s" #'sp-splice-sexp-killing-backward
        "s-C-f" #'sp-splice-sexp-killing-forward
        "s-C-x" #'sp-backward-slurp-sexp
        "s-C-v" #'sp-forward-slurp-sexp
        "s-C-w" #'sp-backward-barf-sexp
        "s-C-r" #'sp-forward-barf-sexp
        (:prefix "s-C-;"
         "(" #'sp-wrap-round
         "[" #'sp-wrap-square
         "{" #'sp-wrap-curly
         "s" #'sp-split-sexp
         "j" #'sp-join-sexp
         "r" #'sp-raise-sexp
         "c" #'sp-convolute-sexp
         "w" #'sp-rewrap-sexp)))
#+end_src
****** Hook :bindings:
#+begin_src elisp
(defun biome--sp-strict-h ()
  (add-hook! 'smartparens-enabled-hook :local
             #'turn-on-smartparens-strict-mode
             (lambda ()
               (map! :map smartparens-strict-mode-map
                     :i "DEL" #'sp-backward-delete-char))))
#+end_src
***** Time :UI:
#+begin_src elisp
(use-package! time
  :config
  (setq display-time-day-and-date t)
  ;; (setq display-time-24hr-format t)
  (display-time-mode 1))
#+end_src
***** Tldr :persistence:
#+begin_src elisp
(use-package! tldr
  :defer t
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+end_src
***** Undo Fu
#+begin_src elisp
(after! undo-fu
  (setq undo-fu-ignore-keyboard-quit t))
#+end_src
***** Undo Tree :UI:
#+begin_src elisp
;; (after! undo-tree
;;   (setq undo-tree-visualizer-timestamps t))
#+end_src
**** Projects
***** Hyperdrive
#+begin_src elisp
(pushnew! safe-local-variable-values
          '(cider-preferred-build-tool . shadow-cljs)
          '(cider-default-cljs-repl . shadow)
          '(cider-shadow-default-options . ":app")
          '(cider-offer-to-open-cljs-app-in-browser . nil)
          '(cider-clojure-cli-global-options . "-A:dev")
          '(eval . (setenv "DATOMIC_APP_INFO_MAP" "{:app-name \"neutrino\"}"))
          '(eval . (setenv "DATOMIC_ENV_MAP" "{:env :dev}"))
          '(cider-clojure-cli-global-options . nil))

(prodigy-define-service
  :name "Amplify Mock"
  :command "amplify"
  :args '("mock")
  :cwd "~/Projects/Krush/hyperdrive/apps/singularity"
  :kill-process-buffer-on-stop t)

(prodigy-define-service
  :name "Datomic Access (exogenesis)"
  :command "bash"
  :args '("datomic" "client" "access" "exogenesis")
  :cwd "~/Projects/Krush/hyperdrive/ion/team"
  :kill-process-buffer-on-stop t)
#+end_src
***** Massrealty
#+begin_src elisp
;; (pushnew! safe-local-variable-values
;;           '(ssh-deploy-root-remote . "/ssh:massrealty@35.196.144.73:/home/massrealty/deploy/homes/public_html/")
;;           '(ssh-deploy-automatically-detect-remote-changes . t))

;; (after! org-gcal
;;   (add-to-list 'org-gcal-fetch-file-alist `("krzysztof@massrealty.com" . ,(concat biome--org-gcal-dir "/krzysztof@massrealty.com.org")) 'append))
#+end_src
**** WIP
#+begin_src elisp
(after! org
  (add-to-list 'org-agenda-files (concat biome--org-dir "/spring_cleaning") 'append))

;; (map! "s-b" (cmd!
;;              ;; (message "chainging margin")
;;              ;; (message "%s" (selected-window))
;;              (set-window-margins (selected-window) nil (if (cdr (window-margins))
;;                                                            nil 12))))

;; Run this only when not on EXWM (probably not strictly necessary have this condition)
;; (add-to-list 'initial-frame-alist '(fullscreen . fullboth))

(map! "s-A" #'counsel-linux-app)

(map! :leader
      "s-," (lookup-key doom-leader-map (kbd "<")))

(after! company
  (map! (:map company-active-map
         "s-[" #'company-show-doc-buffer ; Currently opens Help, it would be better if I made it use Helpful.
         "s-]" #'company-show-location)))
#+end_src
***** Tramp :path:
#+begin_src elisp
(after! tramp
  ;; Make tramp work on Guix.
  ;; TODO will this work anymore now that I use profiles other than `.guix-profile'?
  (prependq! tramp-remote-path '("~/.guix-profile/bin"
                                 "~/.guix-profile/sbin"
                                 "/run/current-system/profile/bin"
                                 "/run/current-system/profile/sbin")))
#+end_src
***** Dotfiles auto-tangle :path:
- TODO Might be easier to do this with file-local variables.
#+begin_src elisp
;; (setq biome--dotfiles-dir "~/Projects/dotfiles")

;; (add-hook! 'org-mode-hook
;;   (add-hook! 'after-save-hook :local
;;     (when (file-in-directory-p buffer-file-name biome--dotfiles-dir)
;;       ;; TODO ensure there aren't files in the output directory that no longer correspond to the org file. Just wipe it?
;;       (let ((org-confirm-babel-evaluate nil))
;;         (org-babel-tangle)))))
#+end_src
*** packages.el
#+begin_src elisp :tangle gen/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-

(package! bluetooth :pin "147d4690087049c6647b5222ee40baa5002b7586")
(package! dash :pin "2675596b9ac1c4b9d47b93e227f06f8ec6755ec6")
(package! expand-region :pin "95a773bd8f557cbd43d3b2dab2fa4417ec5927ab")
;; TODO this should probably be specific to the krush/hyperdrive/afterburner(?) project
;; (package! graphql-mode :pin "2371316a750b807de941184d49ca19d277ecadcd")
;; TODO was causing weird errors with company-capf in eshell, just start typing "guix search [...]" to reproduce
;; (package! guix :pin "c9aef52121b458297e70bb50f49f7276b4a8d759")
(package! tldr :pin "d59405bd72f3379417b9e73f06e8848b43cb021d")
(package! trashed :pin "23e782f78d9adf6b5479a01bfac90b2cfbf729fe")
(package! symon :pin "8dd8b6df49b03cd7d31b85aedbe9dd08fb922335")
#+end_src
*** Theme :UI:theming:
#+begin_src elisp :tangle gen/.config/doom/themes/doom-nuclear-theme.el :lexical t
;;; doom-nuclear-theme.el --- inspired by Atom One Dark -*- lexical-binding: t; no-byte-compile: t; -*-
;;
;; Copyright (C) 2016-2021 Henrik Lissner
;;
;; Author: Henrik Lissner <https://github.com/hlissner>
;; Created: December 6, 2020
;; Version: 2.0.0
;; Keywords: custom themes, faces
;; Homepage: https://github.com/hlissner/emacs-doom-themes
;; Package-Requires: ((emacs "25.1") (cl-lib "0.5") (doom-themes "2.2.1"))
;;
;;; Commentary:
;;
;; Inspired by Atom's One Dark color scheme.
;;
;;; Code:

(require 'doom-themes)


;;
;;; Variables

(defgroup nuclear-theme nil
  "Options for the `doom-nuclear' theme."
  :group 'doom-themes)

(defcustom nuclear-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'nuclear-theme
  :type 'boolean)

(defcustom nuclear-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group 'nuclear-theme
  :type 'boolean)

(defcustom nuclear-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line.
Can be an integer to determine the exact padding."
  :group 'nuclear-theme
  :type '(choice integer boolean))


;;
;;; Theme definition

(def-doom-theme doom-nuclear
  "A dark theme inspired by Atom One Dark."

  ;; name        default   256           16
  ((bg         '("#282c34" "black"       "black" ))
   (fg         '("#DEE2F8" "#bfbfbf"     "brightwhite"  ))

   ;; These are off-color variants of bg/fg, used primarily for `solaire-mode',
   ;; but can also be useful as a basis for subtle highlights (e.g. for hl-line
   ;; or region), especially when paired with the `doom-darken', `doom-lighten',
   ;; and `doom-blend' helper functions.
   (bg-alt     '("#21242b" "black"       "black"        ))
   (fg-alt     '("#5B6268" "#2d2d2d"     "white"        ))

   ;; These should represent a spectrum from bg to fg, where base0 is a starker
   ;; bg and base8 is a starker fg. For example, if bg is light grey and fg is
   ;; dark grey, base0 should be white and base8 should be black.
   (base0      '("#1B2229" "black"       "black"        ))
   (base1      '("#1c1f24" "#1e1e1e"     "brightblack"  ))
   (base2      '("#202328" "#2e2e2e"     "brightblack"  ))
   (base3      '("#23272e" "#262626"     "brightblack"  ))
   (base4      '("#3f444a" "#3f3f3f"     "brightblack"  ))
   (base5      '("#5B6268" "#525252"     "brightblack"  ))
   (base6      '("#73797e" "#6b6b6b"     "brightblack"  ))
   (base7      '("#9ca0a4" "#979797"     "brightblack"  ))
   (base8      '("#DFDFDF" "#dfdfdf"     "white"        ))

   (grey       base4)
   (red        '("#FB8578" "#ff6655" "red"          ))
   (orange     '("#FDCE5F" "#dd8844" "brightred"    ))
   (green      '("#9FED9C" "#99bb66" "green"        ))
   (teal       '("#4db5bd" "#44b9b1" "brightgreen"  ))
   (yellow     '("#EDDC91" "#ECBE7B" "yellow"       ))
   (blue       '("#7DB9FE" "#51afef" "brightblue"   ))
   (dark-blue  '("#5F68DE" "#2257A0" "blue"         ))
   (magenta    '("#E29BF7" "#c678dd" "brightmagenta"))
   (violet     '("#AEB9F3" "#a9a1e1" "magenta"      ))
   (cyan       '("#75E0F9" "#46D9FF" "brightcyan"   ))
   (dark-cyan  '("#5699AF" "#5699AF" "cyan"         ))

   ;; These are the "universal syntax classes" that doom-themes establishes.
   ;; These *must* be included in every doom themes, or your theme will throw an
   ;; error, as they are used in the base theme defined in doom-themes-base.
   (highlight      "#8496FF")
   (vertical-bar   (doom-darken base1 0.1))
   (selection      dark-blue)
   (builtin        blue)
   (comments       (if nuclear-brighter-comments dark-cyan "#63677F"))
   (doc-comments   (doom-lighten (if nuclear-brighter-comments dark-cyan base5) 0.25))
   (constants      yellow)
   (functions      blue)
   (keywords       magenta)
   (methods        violet)
   (operators      cyan)
   (type           orange)
   (strings        green)
   (variables      red)
   (numbers        violet)
   (region         `(,(doom-lighten (car bg-alt) 0.15) ,@(doom-lighten (cdr base1) 0.35)))
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    orange)
   (vc-added       green)
   (vc-deleted     red)

   ;; These are extra color variables used only in this theme; i.e. they aren't
   ;; mandatory for derived themes.
   (modeline-fg              fg)
   (modeline-fg-alt          base5)
   (modeline-bg              (if nuclear-brighter-modeline
                                 (doom-darken blue 0.45)
                               (doom-darken bg-alt 0.1)))
   (modeline-bg-alt          (if nuclear-brighter-modeline
                                 (doom-darken blue 0.475)
                               `(,(doom-darken (car bg-alt) 0.15) ,@(cdr bg))))
   (modeline-bg-inactive     `(,(car bg-alt) ,@(cdr base1)))
   (modeline-bg-inactive-alt `(,(doom-darken (car bg-alt) 0.1) ,@(cdr bg)))

   (-modeline-pad
    (when nuclear-padded-modeline
      (if (integerp nuclear-padded-modeline) nuclear-padded-modeline 4))))


  ;;;; Base theme face overrides
  (((line-number &override) :foreground base4)
   ((line-number-current-line &override) :foreground violet)
   ((font-lock-comment-face &override)
    :background (if nuclear-brighter-comments (doom-lighten bg 0.05)))
   (font-lock-comment-delimiter-face :foreground "#939abd")
   (font-lock-doc-face
    :inherit 'font-lock-comment-face
    :foreground cyan)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if nuclear-brighter-modeline base8 highlight))

   ;;;; clojure-mode
   (clojure-interop-method-face :foreground cyan)
   (clojure-character-face :foreground violet :weight 'bold)
   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground orange)
   (css-property             :foreground green)
   (css-selector             :foreground blue)
   ;;;; doom-modeline
   (doom-modeline-bar :background (if nuclear-brighter-modeline modeline-bg highlight))
   (doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
   (doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
   (doom-modeline-buffer-project-root :foreground green :weight 'bold)
   ;;;; elscreen
   (elscreen-tab-other-screen-face :background "#353a42" :foreground "#1e2022")
   ;;;; ivy
   (ivy-current-match :background dark-blue :distant-foreground base0 :weight 'normal)
   ;;;; LaTeX-mode
   (font-latex-math-face :foreground green)
   ;;;; markdown-mode
   (markdown-markup-face :foreground base5)
   (markdown-header-face :inherit 'bold :foreground red)
   ((markdown-code-face &override) :background (doom-lighten base3 0.05))
   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face :foreground fg)
   (rainbow-delimiters-depth-2-face :foreground magenta)
   (rainbow-delimiters-depth-3-face :foreground blue)
   (rainbow-delimiters-depth-4-face :foreground cyan)
   (rainbow-delimiters-depth-5-face :foreground green)
   (rainbow-delimiters-depth-6-face :foreground yellow)
   (rainbow-delimiters-depth-7-face :foreground orange)
   (rainbow-delimiters-depth-8-face :foreground red)
   ;;;; rjsx-mode
   (rjsx-tag :foreground red)
   (rjsx-attr :foreground orange)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :background modeline-bg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-inactive-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-alt))))

  ;;;; Base theme variable overrides-
  ())

;;; doom-nuclear-theme.el ends here
#+end_src
** desktop :UI:bindings:path:
#+begin_src elisp :tangle gen/desktop.el :lexical t
;;; -*- lexical-binding: t; -*-

;; TODO rename efs to biome
;; TODO at end, make sure that all exwm mappings' functions are sharp quoted
;; TODO ~setq!~ for exwm vars with custom setters? Can/should I do them in an ~after!~ block then?

(defun efs/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun efs/exwm-init-hook ()
  (efs/run-in-background (concat "dunst -config " (expand-file-name "~/Projects/dotfiles/gen/desktop/dunstrc")))
  (efs/run-in-background "nm-applet")
  (efs/run-in-background "pasystray")
  (efs/run-in-background "redshift-gtk -l 47:-123")
  (efs/run-in-background "udiskie -t"))

(defun efs/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun efs/exwm-update-title ()
  (pcase exwm-class-name
    ("Chromium-browser" (exwm-workspace-rename-buffer (format "Chromium: %s" exwm-title))))) ; TODO get rid of preceding or trailing "Chromium"

(defun biome--shell-cmd (command)
  (start-process-shell-command command nil command))

(use-package! exwm
  :config
  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;; When window title updates, use it to set the buffer name
  (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

  ;; When EXWM starts up, do some extra confifuration
  (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

  ;; NOTE: Uncomment the following two options if you want window buffers
  ;;       to be available on all workspaces!

  ;; Automatically move EXWM buffer to current workspace when selected
  (setq exwm-layout-show-all-buffers t)

  ;; Display all EXWM buffers in every workspace buffer list
  (setq exwm-workspace-show-all-buffers t)

  ;; NOTE: Uncomment this option if you want to detach the minibuffer!
  ;; Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)
  ;;(setq exwm-workspace-minibuffer-position 'top)

  ;; Load the system tray before exwm-init
  (require 'exwm-systemtray)
  (setq exwm-systemtray-height 32) ; daviwil says explicity setting a system tray height can help prevent issues with icons not showing up.
  (setq exwm-systemtray-icon-gap 8)
  (exwm-systemtray-enable)

  ;; TODO might one or both of these fix chromium not being focused when I switch to it? What other effects might there be? Note that this doesn't seem to be problem on some other apps like gnome-terminal, perhaps there's I can set up an exwm local hook for chromium or something.
  ;; Window focus should follow the mouse pointer
  ;; (setq mouse-autoselect-window t
  ;;       focus-follows-mouse t)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ;; ?\C-u
          ;; ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ;; ?\C-\M-j  ;; Buffer list
          ?\s-\ ; TODO I might want this in exwm global keys
          ?\s-, ; TODO I might want this in exwm global keys
          ))
  ;; (setq exwm-input-prefix-keys nil)

  ;; (setq exwm-input-simulation-keys
  ;;         '(([?\C-b] . [left])
  ;;           ([?\C-f] . [right])
  ;;           ([?\C-p] . [up])
  ;;           ([?\C-n] . [down])
  ;;           ([?\C-a] . [home])
  ;;           ([?\C-e] . [end])
  ;;           ([?\M-v] . [prior])
  ;;           ([?\C-v] . [next])
  ;;           ([?\C-d] . [delete])
  ;;           ([?\C-k] . [S-end delete])))
  (setq exwm-input-simulation-keys
        '(([?\s-c] . [C-c])))

  ;; TODO might want to do some local simulation keys too

  ;; TODO maybe find a way to alias localleader key to the commands in exwm-mode-map under C-c?
  ;; TODO probably use `map!' instead of `define-key'
  ;; (define-key exwm-mode-map [?\s-\M-q] 'exwm-input-send-next-key) ; TODO see if I can reverse the order of super and meta

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  ;; TODO maybe setq! would work though?
  (setq exwm-input-global-keys
        `(([?\s-q] . exwm-reset)

          ([?\s-Q] . exwm-input-release-keyboard)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ([?\s-t] . evil-switch-to-windows-last-buffer)
          ;; ([?\s-\ ] . doom-leader-map)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (biome--shell-cmd command)))

          (,(kbd "<XF86LaunchA>") . ,(cmd! (biome--shell-cmd "dunstctl close")))
          (,(kbd "S-<XF86LaunchA>") . ,(cmd! (biome--shell-cmd "dunstctl close-all")))
          (,(kbd "C-<XF86LaunchA>") . ,(cmd! (biome--shell-cmd "dunstctl history-pop")))
          (,(kbd "M-<XF86LaunchA>") . ,(cmd! (biome--shell-cmd "dunstctl action")))))

  ;; TODO why is exwm-input-set-key used like this, daviwil uses it in his dotfiles too. The docs say to only use it interactively.
  (exwm-input-set-key (kbd "s-A") 'counsel-linux-app)

  (exwm-enable)


  ;; WIP
  (add-hook 'exwm-mode-hook #'doom-mark-buffer-as-real-h))


(use-package! desktop-environment
  :after exwm
  :config
  (setq desktop-environment-volume-get-command "pactl list sinks | grep '^[[:space:]]Volume:' | head -n 1 | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,'"
        desktop-environment-volume-set-command "pactl set-sink-volume @DEFAULT_SINK@ %s"
        desktop-environment-volume-toggle-command "pactl set-sink-mute @DEFAULT_SINK@ toggle"
        desktop-environment-volume-normal-increment "+5%"
        desktop-environment-volume-normal-decrement "-5%"
        desktop-environment-keyboard-backlight-normal-increment 26
        desktop-environment-keyboard-backlight-normal-decrement -26)
  ;; These are set into the exwm global keymap when the mode is enabled (this can be changed) perform modifications before doing so.
  (map! :map desktop-environment-mode-map
        "s-l" nil
        "<XF86KbdBrightnessUp>" #'desktop-environment-keyboard-backlight-increment
        "<XF86KbdBrightnessDown>" #'desktop-environment-keyboard-backlight-decrement
        "<XF86LaunchB>" (lookup-key desktop-environment-mode-map (kbd "<print>"))
        "S-<XF86LaunchB>" (lookup-key desktop-environment-mode-map (kbd "S-<print>")))
  (desktop-environment-mode))
#+end_src
