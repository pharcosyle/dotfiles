diff --git a/modules/ui/ligatures/README.org b/modules/ui/ligatures/README.org
index 66d969ff1..ed486dbf6 100644
--- a/modules/ui/ligatures/README.org
+++ b/modules/ui/ligatures/README.org
@@ -16,8 +16,10 @@
   - [[#mathematical-symbols-replacement][Mathematical symbols replacement]]
   - [[#coding-ligatures][Coding ligatures]]
 - [[#configuration][Configuration]]
-  - [[#setting-ligatures][Setting ligatures]]
-  - [[#changing-ligatures][Changing ligatures]]
+  - [[#setting-symbol-replacements][Setting symbol replacements]]
+  - [[#changing-symbol-replacements][Changing symbol replacements]]
+  - [[#setting-ligatures-for-specific-font-or-major-mode][Setting ligatures for specific font or major mode]]
+    - [[#overwriting-all-default-ligatures][Overwriting all default ligatures]]
 - [[#troubleshooting][Troubleshooting]]
 
 * Description
@@ -53,7 +55,7 @@ Harfbuzz support (which can compose ligatures natively), or b) Mitsuharu's
 #+end_quote
 
 ** Plugins
-This module installs no packages.
+- [[https://github.com/mickeynp/ligature.el][ligature.el]] (on Emacs 28+ with Harfbuzz)
 
 * Prerequisites
 This module requires one of three setups for ligatures to work:
@@ -103,9 +105,9 @@ Even though harfbuzz has been included in emacs 27, there is currently a [[https
 emacs 27.
 
 * Configuration
-** Setting ligatures
-If you want to set ligatures for modules that don't have them by default you can
-use the ~set-ligatures!~ macro in your config el file
+** Setting symbol replacements
+If you want to set symbol replacements for modules that don't have them by
+default you can use the ~set-ligatures!~ macro in your config el file
 #+BEGIN_SRC emacs-lisp
 (after! PACKAGE
   (set-ligatures! 'MAJOR-MODE
@@ -167,7 +169,7 @@ If you have multiple versions of the same keyword you can set the symbol twice
   :null "none"
   :null "None")
 #+END_SRC
-** Changing ligatures
+** Changing symbol replacements
 if you don't like the symbols chosen you can change them by using...
 
 #+BEGIN_SRC emacs-lisp
@@ -212,5 +214,53 @@ if you don't like the symbols chosen you can change them by using...
   :dot           "â€¢")  ;; you could also add your own if you want
 #+END_SRC
 
+** Setting ligatures for specific font or major mode
+#+begin_quote
+You need Emacs 28+ with (MacOS or Harfbuzz) for EmacsLisp in this section to work.
+#+end_quote
+
+As the [[https://github.com/mickeynp/ligature.el][README]] for ligature.el states, you can manipulate the ligatures that you
+want to enable, specific for your font, or specific for the major modes that you
+want to use.
+
+#+begin_src elisp
+(after! ligature
+  (ligature-set-ligatures '(haskell-mode clojure-mode) '(">>=")))
+
+;; Alternatively
+(set-ligatures! '(haskell-mode clojure-mode)
+  :font-ligatures '(">>="))
+#+end_src
+
+This call will:
+- overwrite all preceding calls to =ligature-set-ligatures= or =set-ligatures!=
+  for =haskell-mode= and =clojure-mode= specifically, but
+- keep the inheritance to ligatures set for all modes, or parent modes like =prog-mode=
+
+*** Overwriting all default ligatures
+If you want to "start from scratch" and get control over all ligatures that
+happen in all modes, you can use
+
+#+begin_src elisp
+;; Set all your custom ligatures for all prog-modes here
+;; This section is *out of* the after! block
+;; Example: only get ligatures for "==" and "===" in programming modes
+;; by default, and get only "www" in all buffers by default.
+(setq +ligatures-prog-mode-list '("==" "===")
+      +ligatures-all-modes-list '("www"))
+;; Set any of those variables to nil to wipe all defaults.
+
+;; All mode specific configuration go in the `after!' block
+(after! ligature
+  ;; Set all your additional custom ligatures for other major modes here.
+  ;; Example: enable traditional ligature support in eww-mode, if the
+  ;; `variable-pitch' face supports it
+  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi")))
+
+;; Alternatively
+(set-ligatures! 'eww-mode
+  :font-ligatures '("ff" "fi" "ffi"))
+#+end_src
+
 * TODO Troubleshooting
  If you have any problems with this module, do get in touch!
diff --git a/modules/ui/ligatures/autoload/ligatures.el b/modules/ui/ligatures/autoload/ligatures.el
index 7856ff7c1..06486a4ec 100644
--- a/modules/ui/ligatures/autoload/ligatures.el
+++ b/modules/ui/ligatures/autoload/ligatures.el
@@ -9,17 +9,24 @@
   "Associates string patterns with icons in certain major-modes.
 
   MODES is a major mode symbol or a list of them.
-  PLIST is a property list whose keys must match keys in
-`+ligatures-extra-symbols', and whose values are strings representing the text
-to be replaced with that symbol. If the car of PLIST is nil, then unset any
-pretty symbols previously defined for MODES.
+  PLIST is a property list whose keys must either:
 
-This function accepts one special property:
+  - match keys in
+`+ligatures-extra-symbols', and whose values are strings representing the text
+to be replaced with that symbol, or
+ - be one of two special properties:
 
   :alist ALIST
     Appends ALIST to `prettify-symbols-alist' literally, without mapping text to
     `+ligatures-extra-symbols'.
 
+  :font-ligatures LIST
+    Sets the list of strings that should get transformed by the font into ligatures,
+    like \"==\" or \"-->\". LIST is a list of strings.
+
+If the car of PLIST is nil, then unset any
+pretty symbols and ligatures previously defined for MODES.
+
 For example, the rule for emacs-lisp-mode is very simple:
 
   (set-ligatures! 'emacs-lisp-mode
@@ -30,18 +37,32 @@ assicated with :lambda in `+ligatures-extra-symbols'.
 
 Pretty symbols can be unset for emacs-lisp-mode with:
 
-  (set-ligatures! 'emacs-lisp-mode nil)"
+  (set-ligatures! 'emacs-lisp-mode nil)
+
+Note that this will keep all ligatures in `+ligatures-prog-mode-list' active, as
+`emacs-lisp-mode' is derived from `prog-mode'."
   (declare (indent defun))
   (if (null (car-safe plist))
       (dolist (mode (doom-enlist modes))
-        (delq! mode +ligatures-extra-alist 'assq))
-    (let (results)
+        (delq! mode +ligatures-extra-alist 'assq)
+        (add-to-list 'ligature-ignored-major-modes mode))
+    (let ((results)
+          (font-ligatures))
       (while plist
         (let ((key (pop plist)))
-          (if (eq key :alist)
-              (prependq! results (pop plist))
+          (cond
+           ((eq key :alist)
+            (prependq! results (pop plist)))
+           ((eq key :font-ligatures)
+            (setq font-ligatures (pop plist)))
+           (t
             (when-let (char (plist-get +ligatures-extra-symbols key))
-              (push (cons (pop plist) char) results)))))
+              (push (cons (pop plist) char) results))))))
+      (when font-ligatures
+        (with-eval-after-load 'ligature
+          (dolist (mode (doom-enlist modes))
+            (setq ligature-ignored-major-modes (delete mode ligature-ignored-major-modes)))
+          (ligature-set-ligatures (doom-enlist modes) font-ligatures)))
       (dolist (mode (doom-enlist modes))
         (setf (alist-get mode +ligatures-extra-alist)
               (if-let (old-results (alist-get mode +ligatures-extra-alist))
diff --git a/modules/ui/ligatures/config.el b/modules/ui/ligatures/config.el
index 2c34fce8f..3958aefbd 100644
--- a/modules/ui/ligatures/config.el
+++ b/modules/ui/ligatures/config.el
@@ -47,44 +47,25 @@ font.")
 (defvar +ligatures-extra-alist '((t))
   "A map of major modes to symbol lists (for `prettify-symbols-alist').")
 
-(defvar +ligatures-composition-alist
-  '((?!  . "\\(?:!\\(?:==\\|[!=]\\)\\)")                                      ; (regexp-opt '("!!" "!=" "!=="))
-    (?#  . "\\(?:#\\(?:###?\\|_(\\|[#(:=?[_{]\\)\\)")                         ; (regexp-opt '("##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{"))
-    (?$  . "\\(?:\\$>>?\\)")                                                  ; (regexp-opt '("$>" "$>>"))
-    (?%  . "\\(?:%%%?\\)")                                                    ; (regexp-opt '("%%" "%%%"))
-    (?&  . "\\(?:&&&?\\)")                                                    ; (regexp-opt '("&&" "&&&"))
-    (?*  . "\\(?:\\*\\(?:\\*[*/]\\|[)*/>]\\)?\\)")                            ; (regexp-opt '("*" "**" "***" "**/" "*/" "*>" "*)"))
-    (?+  . "\\(?:\\+\\(?:\\+\\+\\|[+:>]\\)?\\)")                              ; (regexp-opt '("+" "++" "+++" "+>" "+:"))
-    (?-  . "\\(?:-\\(?:-\\(?:->\\|[>-]\\)\\|<[<-]\\|>[>-]\\|[:<>|}~-]\\)\\)") ; (regexp-opt '("--" "---" "-->" "--->" "->-" "-<" "-<-" "-<<" "->" "->>" "-}" "-~" "-:" "-|"))
-    (?.  . "\\(?:\\.\\(?:\\.[.<]\\|[.=>-]\\)\\)")                             ; (regexp-opt '(".-" ".." "..." "..<" ".=" ".>"))
-    (?/  . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")                      ; (regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>"))
-    (?:  . "\\(?::\\(?:::\\|[+:<=>]\\)?\\)")                                  ; (regexp-opt '(":" "::" ":::" ":=" ":<" ":=" ":>" ":+"))
-    (?\; . ";;")                                                              ; (regexp-opt '(";;"))
-    (?0  . "0\\(?:\\(x[a-fA-F0-9]\\).?\\)") ; Tries to match the x in 0xDEADBEEF
-    ;; (?x . "x") ; Also tries to match the x in 0xDEADBEEF
-    ;; (regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<**>" "<+" "<+>" "<-" "<--" "<---" "<->" "<-->" "<--->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<=>" "<===>" "<>" "<|" "<|>" "<~" "<~~" "<." "<.>" "<..>"))
-    (?<  . "\\(?:<\\(?:!--\\|\\$>\\|\\*\\(?:\\*?>\\)\\|\\+>\\|-\\(?:-\\(?:->\\|[>-]\\)\\|[>-]\\)\\|\\.\\(?:\\.?>\\)\\|/>\\|<[<=-]\\|=\\(?:==>\\|[<=>]\\)\\||>\\|~~\\|[$*+./<=>|~-]\\)\\)")
-    (?=  . "\\(?:=\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)\\)")               ; (regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>"))
-    (?>  . "\\(?:>\\(?:->\\|=>\\|>[=>-]\\|[:=>-]\\)\\)")                      ; (regexp-opt '(">-" ">->" ">:" ">=" ">=>" ">>" ">>-" ">>=" ">>>"))
-    (??  . "\\(?:\\?[.:=?]\\)")                                               ; (regexp-opt '("??" "?." "?:" "?="))
-    (?\[ . "\\(?:\\[\\(?:|]\\|[]|]\\)\\)")                                    ; (regexp-opt '("[]" "[|]" "[|"))
-    (?\\ . "\\(?:\\\\\\\\[\\n]?\\)")                                          ; (regexp-opt '("\\\\" "\\\\\\" "\\\\n"))
-    (?^  . "\\(?:\\^==?\\)")                                                  ; (regexp-opt '("^=" "^=="))
-    (?w  . "\\(?:wwww?\\)")                                                   ; (regexp-opt '("www" "wwww"))
-    (?{  . "\\(?:{\\(?:|\\(?:|}\\|[|}]\\)\\|[|-]\\)\\)")                      ; (regexp-opt '("{-" "{|" "{||" "{|}" "{||}"))
-    (?|  . "\\(?:|\\(?:->\\|=>\\||=\\|[]=>|}-]\\)\\)")                        ; (regexp-opt '("|=" "|>" "||" "||=" "|->" "|=>" "|]" "|}" "|-"))
-    (?_  . "\\(?:_\\(?:|?_\\)\\)")                                            ; (regexp-opt '("_|_" "__"))
-    (?\( . "\\(?:(\\*\\)")                                                    ; (regexp-opt '("(*"))
-    (?~  . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))                                  ; (regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>"))
-  "An alist of all ligatures used by `+ligatures-extras-in-modes'.
-
-The car is the character ASCII number, cdr is a regex which will call
-`font-shape-gstring' when matched.
-
-Because of the underlying code in :ui ligatures module, the regex should match a
-string starting with the character contained in car.
-
-This variable is used only if you built Emacs with Harfbuzz on a version >= 28")
+(defvar +ligatures-prog-mode-list
+  '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
+    ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
+    "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
+    "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
+    "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
+    "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
+    "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
+    "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
+    ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
+    "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
+    "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
+    "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
+    "\\\\" "://")
+  "A list of ligatures to enable in all `prog-mode' buffers.")
+
+(defvar +ligatures-all-modes-list
+  '()
+  "A list of ligatures to enable in all buffers.")
 
 (defvar +ligatures-in-modes
   '(not special-mode comint-mode eshell-mode term-mode vterm-mode Info-mode
@@ -182,15 +163,19 @@ and cannot run in."
  ((and EMACS28+
        (or (featurep 'ns)
            (string-match-p "HARFBUZZ" system-configuration-features))
-       (featurep 'composite))  ; Emacs loads `composite' at startup
-  (defvar +ligature--composition-table (make-char-table nil))
+       (featurep 'composite))           ; Emacs loads `composite' at startup
+
+  (use-package! ligature
+    :config
+    ;; Enable all `+ligatures-prog-mode-list' ligatures in programming modes
+    (ligature-set-ligatures 'prog-mode +ligatures-prog-mode-list)
+    (ligature-set-ligatures 't +ligatures-all-modes-list))
+
   (add-hook! 'doom-init-ui-hook :append
-    (defun +ligature-init-composition-table-h ()
-      (dolist (char-regexp +ligatures-composition-alist)
-        (set-char-table-range
-         +ligature--composition-table
-         (car char-regexp) `([,(cdr char-regexp) 0 font-shape-gstring])))
-      (set-char-table-parent +ligature--composition-table composition-function-table))))
+    (defun +ligature-enable-globally-h ()
+      "Enables ligature checks globally in all buffers.
+You can also do it per mode with `ligature-mode'."
+      (global-ligature-mode t))))
 
  ;; Fallback ligature support for certain, patched fonts. Install them with
  ;; `+ligatures/install-patched-font'
diff --git a/modules/ui/ligatures/packages.el b/modules/ui/ligatures/packages.el
new file mode 100644
index 000000000..fa85cf83c
--- /dev/null
+++ b/modules/ui/ligatures/packages.el
@@ -0,0 +1,9 @@
+(when (and EMACS28+
+           (or (featurep 'ns)
+               (string-match-p "HARFBUZZ" system-configuration-features))
+           (featurep 'composite))
+  (package! ligature
+    :recipe (:host github
+             :repo "mickeynp/ligature.el"
+             :files ("*.el"))
+    :pin "c0e696a88824be6afa1f33fad548d36f96801d8e"))
