#+TITLE: Phrenetic
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:elisp :lexical t

* Meta
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "meta.el")
:END:
- REVIEW depending on how I do per-project literate config, I may want/need to pull out this code for use in other projects
  - ideally capture file-wide properties as well
    ~mkdirp~ and ~lexical~ at the time of this writing
  - a name for the project: "illiterate"
#+begin_src elisp
;;; -*- lexical-binding: t; -*-

(require 'dash)
;; FIXME
;; (require 'donnager-org)

(setq meta--base-dir ".")
#+end_src
** Path hierarchy
#+begin_src elisp
(defun meta-get-dir ()
  (concat meta--base-dir
          (when-let ((dirs (org-entry-get (point) "meta-dir" 'inherit)))
            (-> dirs (split-string " /") (string-join "/")))))

(defun meta-in-dir (sub-path)
  (concat (meta-get-dir) "/" sub-path))
#+end_src
** DB
#+begin_src elisp
(setq meta--table-refs
      '("db/schema-common"
        "db/systems-common"
        "db/feature-linux-nonfree"
        "db/feature-macbook"
        "db/systems-frostfire"
        "db/schema-whatever"
        "db/users-common"
        "db/users-system"
        "db/users-home"
        "db/palette"))

;; FIXME
;; (setq meta--database
;;       (db--load meta--table-refs))
#+end_src
** Dev
*** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
/meta.el
#+end_src
* Guix system/home
:PROPERTIES:
:meta-dir+: /ebullient
:END:
#+name: db/schema-common
| =:db/id=             | =:db/valueType=  | =:db/cardinality=    |
|----------------------+------------------+----------------------|
| :entity/channel-deps | :db.type/keyword | :db.cardinality/many |
| :system/features     | :db.type/keyword | :db.cardinality/many |
| :user/login-shell    | :db.type/keyword |                      |
| :user/sessions       | :db.type/keyword | :db.cardinality/many |

#+begin_src scheme :tangle (meta-in-dir "ebullient.scm")
(define-module (ebullient))

(define-public default-login-shell #:shell/bash)
#+end_src
** Common
*** Channels
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "ebullient/channels.scm")
:END:
#+begin_src scheme
(define-module (ebullient channels)
  #:use-module (guix channels)
  #:use-module ((srfi srfi-1) #:select (remove))
  #:use-module (mendicant utils)
  #:export (get-channels
            guix
            nonguix
            channel-map))

(define* (get-channels #:rest cs)
  (append
   cs
   (remove (lambda (c)
             (member (channel-name c)
                     (map channel-name cs)))
           %default-channels)))
#+end_src
**** Definitions
#+begin_src scheme
(define guix %default-guix-channel)

(define nonguix
  (channel
   (name 'nonguix)
   (url "https://gitlab.com/nonguix/nonguix")
   (introduction
    (make-channel-introduction
     "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
     (openpgp-fingerprint
      "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))

(define channel-map
  (kvm #:channel/guix guix
       #:channel/nonguix nonguix))
#+end_src
** Installation WIP
*** Create bootable USB
Download (or create) a Guix installation ISO
- I'm using the [[https://github.com/SystemCrafters/guix-installer/releases/latest][System Crafters Guix Installer]] since it's kept up-to-date which should speed things up a bit.
- Run ~lsblk~ to find the usb device.
#+begin_src sh
iso_file=guix-system-install-1.3.0.x86_64-linux.iso
usb_device=/dev/sdc
dd if=$iso_file of=$usb_device status=progress bs=4M
sync
#+end_src
*** Install
Boot from the installation medium, select your language and country, and select "Install using the shell based process" when prompted.
**** Keyboard layout
This messed up the keyboard when I tried it on mac, not doing ~loadkeys~ at all was fine.
#+begin_src sh
# keysfile=mac-us
# loadkeys $keysfile
#+end_src
**** Networking
#+begin_src sh
# List network interfaces and find one to use.
ifconfig -a

# Is this necessary if the interface is already activated?
interface=usb0
ifconfig $interface up

dhclient -v $interface

# Test that networking is up and working.
ping -c 3 gnu.org
#+end_src
**** Partitioning
#+begin_src sh
# Check out the current block devices and partitions if you want.
lsblk

device=/dev/sda

# Make two partitions, partition types should be "EFI system partition" and "Linux x86-64 root (/)". For EFI I'm gonna do 1GB to be on the safe side, second should be remainder of free space.
cfdisk $device
parted $device set 1 esp on

efi_system_partition="$device"1
efi_label=genesis

mkfs.fat -F32 -n $efi_label $efi_system_partition

root_partition="$device"2
root_label=firmament
crypt_name=ciphered
crypt_mapping=/dev/mapper/$crypt_name

cryptsetup luksFormat $root_partition
cryptsetup open --type luks $root_partition $crypt_name

mkfs.btrfs -L $root_label $crypt_mapping
#+end_src
**** Set up subvolumes
#+begin_src sh
# I don't know if the type argument is necessary but that's how Andrew Tropin had it.
mount -t btrfs LABEL=$root_label /mnt

btrfs subvolume create /mnt/root
btrfs subvolume create /mnt/boot
btrfs subvolume create /mnt/guix-store
btrfs subvolume create /mnt/guix-var
btrfs subvolume create /mnt/log
btrfs subvolume create /mnt/home
btrfs subvolume create /mnt/persist
btrfs subvolume create /mnt/nix

# Take an empty readonly snapshot of the root subvolume (might be useful later for rolling back or comparison)
btrfs subvolume snapshot -r /mnt/root /mnt/root-blank

umount /mnt
#+end_src
**** Mount
NB: ~$crypt_mapping~ can/"should" be ~LABEL=$root_label~
#+begin_src sh
mount -o subvol=root,compress=zstd,autodefrag $crypt_mapping /mnt

mkdir /mnt/boot
mount -o subvol=boot,compress=zstd,autodefrag $crypt_mapping /mnt/boot
mkdir -p /mnt/gnu/store
mount -o subvol=guix-store,compress=zstd,autodefrag,noatime $crypt_mapping /mnt/gnu/store
mkdir -p /mnt/var/guix
mount -o subvol=guix-var,compress=zstd,autodefrag $crypt_mapping /mnt/var/guix
mkdir -p /mnt/var/log
mount -o subvol=log,compress=zstd,autodefrag $crypt_mapping /mnt/var/log
mkdir /mnt/home
mount -o subvol=home,compress=zstd,autodefrag $crypt_mapping /mnt/home
mkdir /mnt/.persist
mount -o subvol=persist,compress=zstd,autodefrag $crypt_mapping /mnt/.persist

mkdir -p /mnt/boot/efi
mount LABEL=$efi_label /mnt/boot/efi
#+end_src
**** Proceeding with installation
#+begin_src sh
herd start cow-store /mnt
#+end_src
**** System configuration
#+begin_src sh
# Grab my dotfiles, from github if I put them up at some point or maybe from a USB or another computer with `woof`, into the current directory (the one I'm already in, not `/mnt`).
# git clone https://github.com/pharcosyle/phrenetic
# guix environment --ad-hoc woof -- woof -U
# Important: `woof` didn't work for me over the local network, I had to have my other computer offer it over the public internet with localtunnel.

mkdir -p ~/.config/guix
cp ~/projects/phrenetic/exuberant/exuberant/he/solitude/solitude-channels-lock ~/.config/guix
guix pull
hash guix

# Find the LUKS UUID to update it in the system config. Make sure to update in the dotfiles upstream later.
cryptsetup luksUUID $root_partition

cd ~/projects/phrenetic
guix system --load-path=. init exuberant/exuberant/os/frostfire.scm /mnt
#+end_src
**** Post-installation
#+begin_src sh
# Reboot the system, take out the installation medium, and login as root when faced with a login prompt.

# Set the password for the root account.
passwd
# Set the password for my user.
my_user=pharcosyle
passwd $my_user

# Log out and log in to my user account.

# Grab my dotfiles again.

# Ensure my channels file is in `~/.config/guix` and update my channels.
guix pull

# Run a system reconfigure, home reconfigure, install manifests, and deploy `home-state.git`. Copy over all my old data.
#+end_src
** System
:PROPERTIES:
:meta-dir+: /ebullient/system
:END:
#+name: db/schema-whatever
| =:db/id=     | =:db/valueType=  |
|--------------+------------------|
| :user/admin? | :db.type/boolean |

*** Channels
#+begin_src scheme :tangle (meta-in-dir "channels.scm")
(define-module (ebullient system channels)
  #:use-module ((donnager client) #:prefix d:)
  #:use-module (ebullient channels)
  #:use-module (mendicant utils)
  #:export (get-system-channels
            system-channel-deps))

(define (get-system-channels cs)
  (apply get-channels cs))

(define (system-channel-deps system)
  (as-> system $
        (d:q $ '(#:system/features #:entity/channel-deps))
        (map (partial get system-channel-map) $)))

(define system-channel-map channel-map)
#+end_src
*** Components
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "components.scm")
:END:
#+begin_src scheme
(define-module (ebullient system components)
  #:use-module ((guix modules) #:select (source-module-closure))
  #:use-module (guix gexp)
  #:use-module ((guix store) #:select (%default-substitute-urls))
  #:use-module (gnu bootloader)
  #:use-module (gnu bootloader grub)
  ;; #:use-module ((gnu packages bash) #:select (bash))
  #:use-module ((gnu packages certs) #:select (nss-certs))
  #:use-module ((gnu packages fonts) #:select (font-terminus))
  #:use-module ((gnu packages gnupg) #:select (guile-gcrypt))
  #:use-module ((gnu packages linux) #:select (brightnessctl pipewire-0.3))
  ;; #:use-module ((gnu packages shells) #:select (zsh))
  #:use-module ((gnu packages wm) #:select (sway swaylock))
  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services desktop)
  #:use-module (gnu services nix)
  #:use-module (gnu services sound)
  #:use-module (gnu services xorg)
  #:use-module (gnu system)
  #:use-module (gnu system accounts)
  #:use-module (gnu system file-systems)
  #:use-module (gnu system keyboard)
  #:use-module (gnu system mapped-devices)
  #:use-module ((nongnu packages linux) #:select (linux linux-firmware broadcom-sta broadcom-bt-firmware))
  #:use-module ((nongnu system linux-initrd) #:select (microcode-initrd))
  #:use-module ((ice-9 match) #:select (match-lambda))
  #:use-module ((ice-9 rdelim) #:select (read-string))
  #:use-module ((srfi srfi-1) #:select (any remove iota))
  #:use-module (ebullient)
  #:use-module (mendicant utils)
  #:export (barebones-os
            host-info
            grub-efi
            base-services+packages
            linux-nonfree
            disk-encryption
            stateless
            btrfs
            users
            nonguix-substitutes
            nix
            console-keyboard-layouts
            hidpi-console-font
            desktop-services
            gdm
            gnome-desktop
            wm
            sway-wm
            macbook-wireless
            macbook-kbl))
#+end_src
#+begin_src scheme
(define-syntax-rule (system-comp os field ...)
  (operating-system
    (inherit os)
    field ...))

(define-syntax define-system-comp
  (lambda (x)
    (syntax-case x ()
      ((_ (name arg ...) field ...)
       (with-syntax ((os (datum->syntax x 'os)))
         #'(define* (name os arg ...)
             (system-comp os field ...)))))))
#+end_src
**** Barebones OS
#+begin_src scheme
(define barebones-os
  (operating-system
    (host-name #f)
    (timezone #f)
    (bootloader #f)
    (services '())
    (file-systems %base-file-systems)))
#+end_src
**** Host info
#+begin_src scheme
(define-system-comp (host-info #:key host-name timezone locale)
  (host-name host-name)
  (timezone timezone)
  (locale locale))
#+end_src
**** Boot
***** Grub
...
***** Grub EFI
#+begin_src scheme
(define-system-comp (grub-efi #:key label target)
  (bootloader (bootloader-configuration
               (bootloader grub-efi-bootloader)
               (targets (list target))
               (timeout 1)))
  (file-systems
   (cons* (file-system
            (device (file-system-label label))
            (mount-point target)
            (type "vfat"))
          (operating-system-file-systems os))))
#+end_src
**** Base services and packages
#+begin_src scheme
(define-system-comp (base-services+packages)
  (packages
   (cons* nss-certs
          (operating-system-packages os)))
  (services
   (append %base-services
           (operating-system-user-services os))))
#+end_src
**** Linux nonfree
#+name: db/feature-linux-nonfree
| =:db/id=               | =:entity/channel-deps= |
|------------------------+------------------------|
| :feature/linux-nonfree | :channel/nonguix       |

#+begin_src scheme
(define-system-comp (linux-nonfree)
  (kernel linux)
  (initrd microcode-initrd)
  (firmware (cons* linux-firmware
                   (operating-system-firmware os))))
#+end_src
**** Disk encryption
#+begin_src scheme
(define* (disk-encryption os #:key source-uuid target encrypted-mount-points)
  (let ((encrypted-device (mapped-device
                           (source (uuid source-uuid))
                           (targets (list target))
                           (type luks-device-mapping))))
    (system-comp
     os
     (mapped-devices
      (cons* encrypted-device
             (operating-system-mapped-devices os)))
     (file-systems
      (map (lambda (fs)
             (if (member (file-system-mount-point fs) encrypted-mount-points)
                 (file-system
                   (inherit fs)
                   (dependencies (cons* encrypted-device
                                        (file-system-dependencies fs))))
                 fs))
           (operating-system-file-systems os))))))
#+end_src
**** Stateless
The stateless service should come after base/desktop services (potentially others as well) so its state gets installed before theirs during activation. To this end the ~stateless-service-type~ is appended, not prepended, to operating system services. It also modifies file systems so users of this component should include it at the end of their component chain.
#+begin_src scheme
(define-system-comp (stateless #:key persist-dir bluetooth?)
  (initrd (lambda (file-systems . rest)
            (apply (operating-system-initrd os) file-systems
                   #:volatile-root? #t
                   rest)))
  (file-systems
   (map (lambda (fs)
          (if (member (file-system-mount-point fs)
                      `("/var/guix"
                        "/var/log"
                        ,persist-dir))
              (file-system
                (inherit fs)
                (needed-for-boot? #t))
              fs))
        (operating-system-file-systems os)))
  (services
   (append
    (operating-system-user-services os)
    (list
     (service stateless-service-type
              `(#:persist-dir ,persist-dir
                #:paths ,(append
                          '("/etc/machine-id"
                            "/var/lib/random-seed"
                            "/etc/NetworkManager/system-connections"
                            "/var/lib/NetworkManager/secret_key"
                            "/etc/guix/signing-key.pub"
                            "/etc/guix/signing-key.sec")
                          (if bluetooth?
                              (list "/var/lib/bluetooth") '()))))))))
#+end_src
***** Service
#+begin_src scheme
(define save-or-restore-users+groups
  #~(lambda (persist-dir save-or-restore)
      (for-each (lambda (path)
                  (let ((files (list path (string-append persist-dir path))))
                    (apply copy-file (case save-or-restore
                                       ((#:restore) (reverse files))
                                       ((#:save) files)))))
                '("/etc/group"
                  "/etc/passwd"
                  "/etc/shadow"))))

(define (populate-gexp config)
  (with-extensions (list guile-gcrypt)
    (with-imported-modules (source-module-closure
                            '((gnu build install)))
      #~(begin
          (use-modules ((gnu build install) #:select (populate-root-file-system)))

          (define* (populate #:key persist-dir #:allow-other-keys)
            (let* ((system-path "/var/guix/profiles/system")
                   (system-1-path "/var/guix/profiles/system-1-link")
                   (system-1-exists? (file-exists? system-1-path))
                   (system-link (readlink system-path))
                   (system-1-link (if system-1-exists?
                                      (readlink system-1-path)
                                      system-link)))
              (populate-root-file-system system-1-link ""
                                         #:extras `((,system-path -> ,system-link)))
              (unless system-1-exists?
                (delete-file system-1-path)))
            (#$save-or-restore-users+groups persist-dir #:restore))

          (apply populate '#$config)))))

(define (activate-state-gexp config)
  #~(begin
      (use-modules ((ice-9 match) #:select (match)))

      (define* (activate-state #:key persist-dir paths)

        (define (install path)
          (let loop ((components (string-tokenize path (char-set-complement (char-set #\/))))
                     (base persist-dir)
                     (target-base ""))
            (match components
              ((head tail ...)
               (let* ((path (string-append base "/" head))
                      (target-path (string-append target-base "/" head)))
                 (if (null? tail)
                     ;; The Guix code makes a point of doing stuff like this atomically. I don't really know why but I will too.
                     (let ((pivot (string-append target-path ".new")))
                       (symlink path pivot)
                       (rename-file pivot target-path))
                     (begin
                       (catch 'system-error
                         (lambda ()
                           (mkdir target-path))
                         (lambda args
                           (unless (= EEXIST (system-error-errno args))
                             (apply throw args))))
                       (let ((st (lstat path)))
                         (chown target-path (stat:uid st) (stat:gid st))
                         (chmod target-path (stat:perms st)))
                       (loop tail path target-path))))))))

        (for-each install paths)
        (#$save-or-restore-users+groups persist-dir #:save))

      (apply activate-state '#$config)))

(define stateless-service-type
  (service-type
   (name 'stateless)
   (extensions
    (list (service-extension boot-service-type
                             populate-gexp)
          (service-extension activation-service-type
                             activate-state-gexp)))))
#+end_src
**** File systems
***** Ext4
...
***** Btrfs
#+begin_src scheme
(define-system-comp (btrfs #:key label subvols)
  (file-systems
   (append
    (map (match-lambda
           ((subvol mount-point)
            (file-system
              (device (file-system-label label))
              (mount-point mount-point)
              (type "btrfs")
              (options (string-append "subvol=" subvol ",compress=zstd,autodefrag")))))
         subvols)
    (operating-system-file-systems os))))
#+end_src
**** Users
#+begin_src scheme
(define* (account #:key name comment shell admin? password salt bluetooth?)
  (user-account
   (name name)
   (comment (or comment ""))
   (group "users")
   (supplementary-groups (append '("netdev" "audio" "video")
                                 (if admin? '("wheel") '())
                                 (if bluetooth? '("lp") '())))
   (shell (if (eq? shell default-login-shell)
              (default-shell)
              ;; (case shell
              ;;   ((#:shell/bash) (file-append bash "/bin/bash"))
              ;;   ((#:shell/zsh) (file-append zsh "/bin/zsh")))
              ))
   (password (if password
                 (crypt password salt)
                 #f))))

(define-system-comp (users #:key who bluetooth?)
  (users
   (append (map (lambda (user)
                  (apply account (-> user
                                     (massoc user #:bluetooth? bluetooth?)
                                     keyvals)))
                who)
           (operating-system-users os))))
#+end_src
**** Nonguix substitutes
#+begin_src scheme
(define-system-comp (nonguix-substitutes)
  (services
   (update-services
    (operating-system-user-services os)
    guix-service-type
    (lambda (config)
      (guix-configuration
       (inherit config)
       (substitute-urls
        (append (guix-configuration-substitute-urls config)
                (list "https://substitutes.nonguix.org")))
       (authorized-keys
        (append (guix-configuration-authorized-keys config)
                (list (local-file "substitutes.nonguix.org.pub")))))))))
#+end_src
***** Signing key
#+begin_src scheme :tangle (meta-in-dir "substitutes.nonguix.org.pub")
(public-key
 (ecc
  (curve Ed25519)
  (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))
#+end_src
**** Nix
#+begin_src scheme
(define-system-comp (nix)
  (services
   (cons* (service nix-service-type)
          (operating-system-user-services os))))
#+end_src
**** Console
***** Console keyboard layouts
#+begin_src scheme
(define-system-comp (console-keyboard-layouts #:key keyboard-layout)
  (keyboard-layout keyboard-layout)
  (bootloader (bootloader-configuration
               (inherit (operating-system-bootloader os))
               (keyboard-layout keyboard-layout))))
#+end_src
***** HiDPI console font
#+begin_src scheme
(define-system-comp (hidpi-console-font)
  (services
   (update-services
    (operating-system-user-services os)
    console-font-service-type
    (lambda (config)
      (map (lambda (tty-and-font)
             (cons (car tty-and-font)
                   (file-append font-terminus "/share/consolefonts/ter-132n")))
           config)))))
#+end_src
**** Desktop
***** Desktop services
#+begin_src scheme
(define-system-comp (desktop-services #:key pipewire? bluetooth?)
  (services
   (as-> (operating-system-user-services os) $
     (append selective-desktop-services $)
     (if pipewire?
         (with-pipewire $) $)
     ;; (if bluetooth?
     ;;     (cons* (bluetooth-service #:auto-enable? #t) $))
     )))
#+end_src
****** Pipewire
#+begin_src scheme
(define (with-pipewire services)
  (as-> services $
    (remove-services $ (list pulseaudio-service-type
                             alsa-service-type))
    (cons* (udev-rules-service 'pipewire-add-udev-rules
                               pipewire-0.3)
           $)))
#+end_src
****** \
#+begin_src scheme
(define (remove-services services kinds)
  (remove (lambda (s)
            (member (service-kind s) kinds))
          services))

(define selective-desktop-services
  (remove-services %desktop-services
                   (append (map service-kind %base-services)
                           (list gdm-service-type
                                 screen-locker-service-type))))
#+end_src
***** Display managers
****** GDM
#+begin_src scheme
(define-system-comp (gdm #:key wayland? auto-login)
  (services
   (cons* (service gdm-service-type
                   (gdm-configuration
                    (auto-login? (if auto-login #t #f))
                    (default-user auto-login)
                    (wayland? wayland?)))
          (operating-system-user-services os))))
#+end_src
***** Desktop environments
****** Gnome
#+begin_src scheme
(define-system-comp (gnome-desktop)
  (services
   (cons* (service gnome-desktop-service-type)
          (operating-system-user-services os))))
#+end_src
***** Window managers
#+begin_src scheme
(define-system-comp (wm #:key package services)
  (packages
   (cons* package
          (operating-system-packages os)))
  (services
   (append services
           (operating-system-user-services os))))
#+end_src
****** Sway
#+begin_src scheme
(define* (sway-wm os #:key laptop?)
  (wm os
      #:package sway
      #:services (cons* swaylock-service
                        (if laptop?
                            (list brightnessctl-udev-rules) '()))))
#+end_src
***** Screen lockers
****** Swaylock
#+begin_src scheme
(define swaylock-service
  (screen-locker-service swaylock))
#+end_src
***** Backlight
****** Brightnessctl
#+begin_src scheme
(define brightnessctl-udev-rules
  (udev-rules-service 'brightnessctl-add-udev-rules brightnessctl))
#+end_src
**** Macbook
***** Wireless
I'm not sure if this requires the nonfree linux kernel and/or if the blacklist refers to kernel modules not present in linux-libre.

#+name: db/feature-macbook
| =:db/id=         | =:entity/channel-deps= |
|------------------+------------------------|
| :feature/macbook | :channel/nonguix       |

#+begin_src scheme
(define-system-comp (macbook-wireless #:key bluetooth?)
  (kernel-arguments (with-blacklist (operating-system-user-kernel-arguments os)
                                    "b43,b43legacy,ssb,bcm43xx,brcm80211,brcmfmac,brcmsmac,bcma"))
  (kernel-loadable-modules (cons* broadcom-sta
                                  (operating-system-kernel-loadable-modules os)))
  (firmware (append
             (if bluetooth? (list broadcom-bt-firmware) '())
             (operating-system-firmware os))))

(define (with-blacklist kernel-args new)

  (define blacklist-param "modprobe.blacklist")
  (define (blacklist? ka)
    (string-prefix? blacklist-param ka))

  (if (any blacklist? kernel-args)
      (update-list kernel-args blacklist? (lambda (blacklist)
                                            (string-append blacklist "," new)))
      (cons* (string-append blacklist-param "=" new) kernel-args)))
#+end_src
***** Keyboard layout
#+begin_src scheme
(define macbook-kbl
  (keyboard-layout "us" #:model "macbook78"))
#+end_src
*** Base OS
#+begin_src scheme :tangle (meta-in-dir "base-os.scm")
(define-module (ebullient system base-os)
  #:use-module ((donnager client) #:prefix d:)
  #:use-module (ebullient system components)
  #:use-module (ebullient)
  #:use-module (mendicant utils)
  #:export (base-os))

(define* (base-os #:key
                  system
                  host-name
                  timezone
                  (locale "en_US.utf8")
                  accounts
                  luks-uuid
                  auto-login-account
                  kbl
                  console?
                  laptop?
                  bluetooth?)
  (let* ((feature?
          (let ((features (get (d:pull '(#:system/features) system) #:system/features)))
            (lambda (feat)
              (member feat features))))
         (linux-nonfree? (feature? #:feature/linux-nonfree))
         (disk-encryption? (feature? #:feature/disk-encryption))
         (stateless? (feature? #:feature/stateless))
         (nix? (feature? #:feature/nix))
         (desktop? (feature? #:feature/desktop))
         (laptop? (and desktop? laptop?))
         (macbook? (and laptop? (feature? #:feature/macbook)))
         (pipewire? (and desktop? (feature? #:feature/pipewire)))
         (bluetooth? (and desktop? bluetooth?))
         (kbl (or kbl
                  (if macbook?
                      macbook-kbl #f)))
         (auto-login (if disk-encryption?
                         (get (d:pull '(#:user/username) auto-login-account) #:user/username) #f))
         (who
          (->> accounts
               (apply d:pull-many '(*))
               (map (lambda (user)
                      (merge
                       (kvm #:name (get user #:user/username)
                            #:comment (get user #:user/full-name)
                            #:shell (let ((shell (get user #:user/login-shell)))
                                      (if (equal? shell #:shell/default)
                                          default-login-shell shell))
                            #:admin? (get user #:user/admin?))
                       (let ((admin? (get user #:user/admin?))
                             (password (get user #:user/password)))
                         (if (and password (not admin?))
                             (kvm #:password password
                                  #:salt "toosimple")
                             (kvm))))))))
         (nonguix-substitutes?
          (let ((channel-deps (append
                               (d:q $ '(#:system/features #:entity/channel-deps) system)
                               (d:q-many $ '(#:entity/channel-deps) accounts))))
            (member #:channel/nonguix channel-deps)))
         (session?
          (let ((sessions
                 (->> accounts
                      (map (rpartial get #:user/sessions) (d:pull-many '(#:user/sessions)))
                      (apply append))))
            (lambda (s)
              (member s sessions))))
         gnome? (session? #:session/gnome)
         sway? (session? #:session/sway))
    (-> barebones-os
        (host-info #:host-name host-name
                   #:timezone timezone
                   #:locale locale)
        (grub-efi #:label "genesis"
                  #:target "/boot/efi")
        base-services+packages
        (users #:who who
               #:bluetooth? bluetooth?)
        (as-> $
          (if nonguix-substitutes?
              (nonguix-substitutes $) $)
          (if linux-nonfree?
              (linux-nonfree $) $)
          (if nix?
              (nix $) $)
          (if console?
              (-> $
                  (console-keyboard-layouts #:keyboard-layout kbl)
                  hidpi-console-font)
              $)
          (if desktop?
              (-> $
                  (desktop-services #:pipewire? pipewire?
                                    #:bluetooth? bluetooth?)
                  (gdm #:wayland? #t
                       #:auto-login auto-login)
                  (as-> $
                    (if gnome?
                        (gnome-desktop $) $)
                    (if sway?
                        (sway-wm $ #:laptop? laptop?) $)))
              $)
          (if macbook?
              (macbook-wireless $ #:bluetooth? bluetooth?) $)
          (let* ((persist-dir "/.persist")
                 (subvols
                  (append
                   `(("root-blank" "/")
                     ("boot" "/boot")
                     ("guix-store" "/gnu/store")
                     ("guix-var" "/var/guix")
                     ("log" "/var/log")
                     ("home" "/home")
                     ("persist" ,persist-dir))
                   (if nix? '(("nix" "/nix")) '()))))
            (-> $
                (btrfs #:label "firmament"
                       #:subvols subvols)
                (as-> $
                  (if disk-encryption?
                      (disk-encryption $ #:source-uuid luks-uuid
                                       #:target "ciphered"
                                       #:encrypted-mount-points (map cadr subvols))
                      $))
                (as-> $
                  (if stateless?
                      (stateless #:persist-dir persist-dir
                                 #:bluetooth? bluetooth?)
                      $))))))))
#+end_src
*** \
- TODO expression shouldn't reference "exhuberant"
#+begin_src sh :var os_name="" os_dir=(meta-get-dir)
sudo guix time-machine \
	--channels="$os_dir"/$os_name-channels-lock \
	-- \
	system \
	--load-path=. \
	--expression="(@ (exuberant os $os_name) os)" \
	reconfigure
#+end_src
** Home
:PROPERTIES:
:meta-dir+: /ebullient/home
:END:
#+name: guix-home-profile
#+begin_src sh
~/.guix-home/profile
#+end_src
#+name: guix-extra-profiles-path
#+begin_src sh
~/.guix-extra-profiles
#+end_src
*** Channels
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "channels.scm")
:END:
#+begin_src scheme
(define-module (ebullient home channels)
  #:use-module (guix channels)
  #:use-module ((donnager client) #:prefix d:)
  #:use-module (ebullient channels)
  #:use-module (mendicant utils)
  #:export (get-home-channels
            user-channel-deps
            rde
            flat)
  #:re-export (guix
               nonguix))

(define (get-home-channels cs)
  (apply get-channels (if (member rde cs)
                          cs (cons rde cs))))

(define (user-channel-deps user)
  (as-> user $
        (get (d:pull '(#:entity/channel-deps) $) #:entity/channel-deps)
        (map (partial get home-channel-map) $)))
#+end_src
**** Definitions
#+begin_src scheme
(define rde
  (channel
   (name 'rde)
   (url "https://git.sr.ht/~abcdw/rde")
   (introduction
    (make-channel-introduction
     "257cebd587b66e4d865b3537a9a88cccd7107c95"
     (openpgp-fingerprint
      "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0")))))

(define flat
  (channel
   (name 'flat)
   (url "https://github.com/flatwhatson/guix-channel.git")
   (introduction
    (make-channel-introduction
     "33f86a4b48205c0dc19d7c036c85393f0766f806"
     (openpgp-fingerprint
      "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490")))))
#+end_src
**** \
#+begin_src scheme
(define home-channel-map
  (merge channel-map
         (kvm #:channel/rde rde
              #:channel/flat flat)))
#+end_src
*** Components
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "components.scm")
:END:
#+begin_src scheme
(define-module (ebullient home components)
  #:use-module (guix gexp)
  #:use-module (gnu home services)
  #:use-module (gnu home services mcron)
  #:use-module (gnu home services shells)
  #:use-module (gnu home services shepherd)
  #:use-module (gnu home services xdg)
  #:use-module (gnu home-services ssh)
  #:use-module (gnu home-services version-control)
  ;; #:use-module ((gnu packages bash) #:select (bash))
  #:use-module ((gnu packages fonts) #:select (font-fira-code))
  #:use-module ((gnu packages freedesktop) #:select (udiskie xdg-desktop-portal xdg-desktop-portal-wlr))
  #:use-module ((gnu packages gnome) #:select (network-manager-applet))
  #:use-module ((gnu packages linux) #:select (pipewire-0.3 wireplumber))
  #:use-module ((gnu packages package-management) #:select (flatpak))
  #:use-module ((gnu packages shells) #:select (zsh))
  #:use-module ((gnu packages shellutils) #:select (direnv))
  #:use-module ((gnu packages xdisorg) #:select (gammastep))
  #:use-module (gnu services)
  #:use-module (gnu services shepherd)
  #:use-module ((srfi srfi-1) #:select (append-map))
  #:use-module ((ebullient home doom-emacs) #:select (doom-emacs))
  #:use-module ((ebullient home emacs) #:select (emacs-29-pgtk+native-comp))
  #:use-module (mendicant utils)
  #:export (he-shells
            he-extra-profiles
            he-nix
            he-emacs
            he-doom
            he-direnv
            he-pipewire
            he-flatpak
            he-sway
            gammastep-service-type
            network-manager-service-type
            udiskie-service-type))
#+end_src
**** Shells
#+begin_src scheme
(define* (he-shells svcs #:key login-shell interactive-shell)
  (append
   (cons*
    (service (login-shell-service-type login-shell))
    (filter
     service?
     (let ((setup-shell? (lambda (shell)
                           (memq shell (list login-shell interactive shell)))))
       (list
        (when (setup-shell? #:shell/bash)
          (service home-bash-service-type
                   ;; (home-bash-configuration
                   ;;  (bash-profile
                   ;;   (list (local-file "bashrc"))))
                   ))
        (when (setup-shell? #:shell/zsh)
          (service home-zsh-service-type
                   (home-zsh-configuration
                    (zshrc
                     (list (local-file "zshrc"))))))
        (when-not (eq login-shell interactive-shell)
          (simple-service
           'set-shell
           home-environment-variables-service-type
           `(("SHELL" . ,(case interactive-shell
                           ;; ((#:shell/bash) (file-append bash "/bin/bash"))
                           ((#:shell/zsh) (file-append zsh "/bin/zsh")))))))))))
   svcs))
#+end_src
***** Login shell service
#+begin_src scheme
(define (he-login-shell-service-type shell)
  (service-type
   (name 'he-login-shell)
   (extensions
    (service-extension
     (case shell
       ((#:shell/bash) home-bash-service-type)
       ;; ((#:shell/zsh) home-zsh-service-type)
       )
     identity))
   (compose identity)
   (extend
    (lambda (initial extensions)
      (let* ((config (cons* initial extensions))
             (field (lambda (k)
                      (append-map (rpartial k) config))))
        (case shell
          ((#:shell/bash)
           (home-bash-extension
            (environment-variables (field #:environment-variables))
            (bash-profile (field #:profile))))
          ;; ((#:shell/zsh)
          ;;  (home-zsh-extension
          ;;   (environment-variables (field #:environment-variables))
          ;;   (zprofile (field #:profile))))
          ))))
   (default-value (kvm))))
#+end_src
***** Bash
****** Bashrc
...
***** Zsh
****** Zshrc
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "zshrc")
:END:
******* Andrew Tropin's zshrc
- TODO trying out Andrew Tropin's zsh configuration verbatim for now
#+begin_src sh
# Prevent freezing output on ^s, needed for various isearches
hash stty 2> /dev/null && stty -ixon

# Completions and other stuff
autoload -U compinit
compinit -d ${XDG_CACHE_HOME:-$HOME/.cache}/.zcompdump

# Enable bash completion, requires to source them from somewhere
# autoload -U bashcompinit && bashcompinit

zstyle ':completion:*' menu select
zstyle ':completion:*' insert-tab false

# Automatically update cache of binaries avaliable in $PATH
zstyle ':completion:*' rehash true # Can have a performance penalty

# Approximate completion
# zstyle ':completion:::::' completer _complete _approximate
# zstyle ':completion:*:approximate:*' max-errors 2

# Fuzzy completion
# https://superuser.com/questions/415650/does-a-fuzzy-matching-mode-exist-for-the-zsh-shell
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'

# Make kill completion smart
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,args -w -w"

# Colored completion for files and dirs according to LS_COLORS

hash dircolors 2> /dev/null && eval $(dircolors --sh) && \
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Prompt theme setup
clear_fn() {
#  zle reset-prompt
  zle kill-buffer
}

prompt_rde_precmd() {
  # Prevent killing prompt on ^C
  trap 'clear_fn' SIGINT
}

prompt_rde_setup() {
  if [[ $UID -eq 0 ]]; then
    user_part='%F{red}>%f'
  else
    user_part='%F{green}>%f'
  fi
  if [ -n "$GUIX_ENVIRONMENT" ]; then
    genv_part='%F{blue}>%f'
  fi
  # exit_code_part='%(?..[%?])'

  PS1="$user_part$genv_part "
  # RPS1="$exit_code_part"

  # Fish-like C-c behavior
  # add-zsh-hook precmd prompt_rde_precmd
}

# Load promptinit and set rde theme
autoload -Uz promptinit && promptinit
prompt_themes+=( rde )
prompt rde

setopt printexitvalue # Instead of using RPS1 for status code

echo -en "\033[6 q" # Make a cursor to be a vertical bar

# Remove slashes and dashes from wordchars to make M-b, M-f work
# correctly
WORDCHARS=""

# Configure history
# HISTSIZE=5000
# SAVEHIST=$HISTSIZE
HISTFILE=${XDG_CACHE_HOME:-$HOME/.cache}/.zhistory

#setopt incappendhistory # Save history to shared file, but not read
setopt sharehistory     # Share history across shell sessions
setopt histignorespace  # Ignore commands that start with space

# Configuring help (M-h to call it on current command/function)
autoload -Uz run-help
(( ${+aliases[run-help]} )) && unalias run-help
autoload -Uz run-help-git

# Delete, home, end buttons
bindkey  "^[[3~"  delete-char
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line

# Launch $VISUAL or $EDITOR, for emacsclient if there is no server
# avaliable $ALTERNATE_EDITOR will be used.
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

alias help=run-help
alias try='guix shell man-db coreutils'
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
#+end_src
******* History
#+begin_src sh
HISTSIZE=1000000
SAVEHIST=$HISTSIZE
#+end_src
**** Extra profiles
***** login shell profile wip
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "profile")
:END:
****** Use Guix extra profiles
#+begin_src sh :noweb yes
gepp="<<guix-extra-profiles-path>>"
GUIX_EXTRA_PROFILES="${gepp/#\~/$HOME}"

for i in $GUIX_EXTRA_PROFILES/*; do
  profile=$i/$(basename "$i")
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi

  # Emulate guix-home setup-environment file (and thus `/etc/profile` as well). Regarding MANPATH and INFOPATH in particular, see https://guix.gnu.org/en/cookbook/en/guix-cookbook.html#Required-packages
  case $XDG_DATA_DIRS in
    ,*"$profile"/share*) ;;
    ,*) export XDG_DATA_DIRS="$profile"/share:$XDG_DATA_DIRS ;;
  esac
  case $MANPATH in
    ,*"$profile"/share/man*) ;;
    ,*) export MANPATH="$profile"/share/man:$MANPATH
  esac
  case $INFOPATH in
    ,*"$profile"/share/info*) ;;
    ,*) export INFOPATH="$profile"/share/info:$INFOPATH ;;
  esac
  case $XDG_CONFIG_DIRS in
    ,*"$profile"/etc/xdg*) ;;
    ,*) export XDG_CONFIG_DIRS="$profile"/etc/xdg:$XDG_CONFIG_DIRS ;;
  esac
  case $XCURSOR_PATH in
    ,*"$profile"/share/icons*) ;;
    ,*) export XCURSOR_PATH="$profile"/share/icons:$XCURSOR_PATH ;;
  esac

  unset profile
done
#+end_src
**** Nix
#+begin_src scheme
(define (he-nix svcs)
  (cons*
   (service
    (service-type
     (name 'he-nix)
     (extensions
      (list
       (service-extension
        home-files-service-type
        (const
         `(("nix-channels"
            ,(local-file "nix-channels")))))
       (service-extension
        home-xdg-configuration-files-service-type
        (const
         `(("nixpkgs/config.nix"
            ,(local-file "nixpkgs-config.nix")))))))
     (default-value #f)))
   svcs))
#+end_src
***** Load Nix environment
#+begin_src sh
if [ -f /run/current-system/profile/etc/profile.d/nix.sh ]; then
  . /run/current-system/profile/etc/profile.d/nix.sh
fi
#+end_src
***** Nix channels
#+begin_src conf :tangle (meta-in-dir "nix-channels")
https://nixos.org/channels/nixpkgs-unstable nixpkgs
#+end_src
***** Nixpkgs config
#+begin_src nix :tangle (meta-in-dir "nixpkgs-config.nix")
{ allowUnfree = true; }
#+end_src
***** Nix WIP
Commands and stuff (like manifests install and upgrade and guix channel pull) plus a packages "manifest"
****** Update channels
#+begin_src sh :results output silent :async
nix-channel --update
#+end_src
****** "Manifest"
- TODO might want to / see if I can make this a simple bulleted list I pass with :var to source block(s)
#+name: nix-packages
#+begin_src org
google-chrome zoom-us
#+end_src
****** Install packages
#+begin_src sh :results output silent :async :noweb yes
nix-env --install <<nix-packages>>
#+end_src
****** Upgrade packages
#+begin_src sh :results output silent :async
nix-env --upgrade
#+end_src
**** Emacs
#+begin_src scheme
(define* (he-emacs svcs #:key zsh-vterm? config)
  (cons*
   (service (he-emacs-service-type zsh-vterm? config))
   svcs))

(define (he-emacs-service-type zsh-vterm? config)
  (service-type
   (name 'he-emacs)
   (extensions
    (filter
     service-extension?
     (list
      (service-extension
       home-profile-service-type
       (lambda (config)
         (list (-> (get config #:emacs)
                   emacs-with-C-source
                   emacs-with-zstd))))
      (service-extension
       he-login-shell-service-type
       (lambda (config)
         (kvm #:environment-variables
              `(("VISUAL" . ,(file-append (get config #:emacs) "/bin/emacsclient"))
                ("EDITOR" . "$VISUAL")))))
      (when zsh-vterm?
        (service-extension
         home-zsh-service-type
         (const (home-zsh-extension
                 (zshrc
                  (local-file "zsh-vterm")))))))))
   (default-value
     (or config
         (kvm #:emacs emacs-29-pgtk+native-comp)))))
#+end_src
***** Configure zsh for vterm
#+begin_src sh :tangle (meta-in-dir "zsh-vterm")
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    elif ([ "${TERM%%-*}" = "eterm" ] || [ "${TERM%%-*}" = "dumb" ]); then
        # Do nothing for Emacs' term and ansi-term, and other dumb terminals.
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
}
setopt PROMPT_SUBST
PROMPT=$PROMPT'%{$(vterm_prompt_end)%}
#+end_src
***** Emacs packages
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "emacs.scm")
:END:
#+begin_src scheme
(define-module (ebullient home emacs)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module ((guix utils) #:select (substitute-keyword-arguments))
  #:use-module ((gnu packages compression) #:select (zstd))
  #:use-module ((gnu packages emacs) #:select (emacs-next-pgtk))
  #:use-module ((gnu packages gcc) #:select (gcc-11)))
#+end_src
****** With C source
#+begin_src scheme
(define-public (emacs-with-C-source emacs)
  (package
    (inherit emacs)
    (arguments
     (substitute-keyword-arguments (package-arguments emacs)
       ((#:phases phases '%standard-phases)
        #~(modify-phases #$phases
            (add-after 'unpack 'patch-C-source-directory
              (lambda _
                (substitute* "lisp/emacs-lisp/find-func.el"
                  (("\\(expand-file-name \"src\" source-directory\\)")
                   (string-append "\"" #$(file-append (package-source emacs) "/src") "\"")))))))))))
#+end_src
****** With =zstd=
Just add a propagated input for now. Using ~wrap-program~ on the emacs executable would be better but it's a bit tricky (see the ~strip-double-wrap~ build phase in the emacs package definition) and I don't want to mess it up and introduce possibly subtle problems.
#+begin_src scheme
(define-public (emacs-with-zstd emacs)
  (package
    (inherit emacs)
    (propagated-inputs
     (modify-inputs (package-propagated-inputs emacs)
       (prepend zstd)))))
#+end_src
****** Emacs 29 with pgtk + native comp :package:version:
#+begin_src scheme
(define emacs-from-git (@@ (flat packages emacs) emacs-from-git))
(define emacs-with-native-comp (@@ (flat packages emacs) emacs-with-native-comp))

(define-public emacs-29-pgtk+native-comp
  (emacs-from-git
   (emacs-with-native-comp emacs-next-pgtk gcc-11 'full-aot)
   #:pkg-name "emacs-29-pgtk+native-comp"
   #:pkg-version "29.0.50"
   #:pkg-revision "0"
   #:git-repo "https://github.com/emacs-mirror/emacs" ; https://git.savannah.gnu.org/git/emacs.git is the canonical repo but it doesn't allow shallow fetches.
   #:git-commit "aeb25f9d3d12a18ef3881e23b32a34615355d4d0"
   #:checksum "1mikbbibngk60klr1q7d543rbg5a1lz0rg2acvy125zjczvr7pww"))
#+end_src
***** Doom
#+begin_src scheme
(define (he-doom svcs)
  (cons*
   (service
    (service-type
     (name 'he-doom)
     (extensions
      (list
       (service-extension
        home-profile-service-type
        (const (list `(,doom-emacs "bin")
                     font-fira-code))) ; TODO maybe make this contributed by the doom /config/ specifically. Really what I want is to unquote a gexp for it inside the config like I'll be doing for e.g. the sway config. Even though my Doom private config is in elisp and not scheme, how might I do this as similarly to that as possible?
       (service-extension
        home-xdg-configuration-files-service-type
        (const `(("emacs"
                  ,#~#$doom-emacs)
                 ;; ("config/doom"
                 ;;  ,(local-file "doom-private" #:recursive? #t))
                 )))))
     (default-value #f)))
   svcs))
#+end_src
****** Doom Emacs :package:version:
Tests:
Nonfunctional at the moment ([[doom:core/core-cli.el::212][hlissner has them commented out]]) but once they're working determine if they make sense to run during packaging (if they can find places where my patches, substitutions, etc mess stuff). I'm concerned they'll take too long to run or require network access (to download Straight dependencies). Make sure there aren't any side effect files that end up getting installed.
#+begin_src scheme :tangle (meta-in-dir "doom-emacs.scm")
(define-module (ebullient home doom-emacs)
  #:use-module (guix build-system copy)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module (guix packages)
  #:use-module ((guix licenses) #:prefix license:)
  ;; #:use-module ((gnu packages emacs) #:select (emacs))
  #:use-module ((gnu packages rust-apps) #:select (fd ripgrep))
  #:use-module ((gnu packages version-control) #:select (git))
  #:use-module ((ebullient home fonts) #:select (all-the-icons-fonts)))

(define-public doom-emacs
  (let ((commit "42e5763782fdc1aabb9f2624d468248d6978abe2")
        (revision "0"))
    (package
      (name "doom-emacs")
      (version (git-version "21.12.0-alpha" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/hlissner/doom-emacs")
               (commit commit)))
         (sha256
          (base32
           "178bbblcv2sc2np6np1gaknkabr8mgfsc0kg6f3sm8bi89lkmqa1"))
         (file-name (git-file-name name version))
         (patches
          (list (local-file "change-paths.patch")
                (local-file "ligatures.patch")))))
      (build-system copy-build-system) ; TOOD LICENSE file gets installed to a "share/" folder, not hurting anything but maybe remove. More generally perhaps check to see what other changes there might be between a simple checkout of the repo and post- copy-build-system
      (arguments
       `(;; #:install-plan
         ;; '(("." "share/doom-emacs/"))
         ;; #:tests? #t
         ;; #:test-command '("./bin/doom" "test")
         #:phases
         ,#~(modify-phases %standard-phases
              (add-after 'install 'symlink-bin
                (lambda _
                  (mkdir #$output:bin)
                  (symlink (string-append #$output "/bin")
                           (string-append #$output:bin "/bin")))))))
      (propagated-inputs
       (list ;; emacs ; TODO uncomment and wrap usage(s) with `package-input-rewriting`
             git
             ripgrep
             fd
             all-the-icons-fonts))
      (outputs '("out" "bin"))
      (synopsis "An Emacs framework for the stubborn martian hacker")
      (description "Doom is a configuration framework for GNU Emacs tailored for
Emacs bankruptcy veterans who want less framework in their frameworks, a modicum
of stability (and reproducibility) from their package manager, and the
performance of a hand rolled config (or better).")
      (home-page "https://github.com/hlissner/doom-emacs")
      (license license:expat))))
#+end_src
******* Emacs packages :package:version:
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "emacs-xyz.scm")
:END:
#+begin_src scheme
(define-module (ebullient home emacs-xyz)
  #:use-module (guix build-system copy)
  #:use-module (guix build-system emacs)
  #:use-module (guix download)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module (guix packages)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module ((guix utils) #:select (substitute-keyword-arguments))
  #:use-module ((gnu packages emacs-xyz) #:prefix emacs-xyz:)
  #:use-module ((gnu packages compression) #:select (unzip)))
#+end_src
******** dash
Tests fail in Emacs 28+ (see [[https://github.com/magnars/dash.el/issues/389][magnars/dash.el#389 Byte-compile fails with Emacs 28]]) so disable them until this is resolved upstream.
#+begin_src scheme
(define-public emacs-dash
  (package
    (inherit emacs-xyz:emacs-dash)
    (arguments
     (substitute-keyword-arguments (package-arguments emacs-xyz:emacs-dash)
       ((#:tests? _) #f)))))
#+end_src
******** guix-contributing
#+begin_src scheme
(define-public emacs-guix-contributing
  (package
    (name "emacs-guix-contributing")
    (version "0")
    (source
     (local-file "guix-contributing.el"))
    (build-system emacs-build-system)
    (arguments
     '(#:phases
       (modify-phases %standard-phases
         (add-after 'unpack 'patch-guix-source-path
           (lambda* (#:key inputs #:allow-other-keys)
             (make-file-writable "guix-contributing.el")
             (emacs-substitute-variables "guix-contributing.el"
               ("guix-contributing-source-path" (search-input-directory inputs "share/guix-emacs-development"))))))))
    (inputs
     (list guix-emacs-development))
    (home-page #f)
    (synopsis "Some Emacs integration to assist in contributing to Guix")
    (description "See https://guix.gnu.org/manual/en/guix.html#The-Perfect-Setup")
    (license license:gpl3+)))
#+end_src
********* Source
#+begin_src elisp :tangle (meta-in-dir "guix-contributing.el")
(defvar guix-contributing-source-path "~/src/guix")

(with-eval-after-load 'yasnippet
  (add-to-list 'yas-snippet-dirs (concat guix-contributing-source-path "/etc/snippets")))

(load-file (concat guix-contributing-source-path "/etc/copyright.el"))

(when (and user-full-name
           user-mail-address)
  (setq copyright-names-regexp (format "%s <%s>" user-full-name user-mail-address)))

(provide 'guix-contributing)
#+end_src
********* Guix's Emacs development code
#+begin_src scheme
(define guix-emacs-development
  (let ((commit "bf0389a3806509650b7a8425973ac5aac722901a")
        (revision "0"))
    (package
      (name "guix-emacs-development")
      (version (git-version "1.3.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/guix-mirror/guix")  ; https://git.savannah.gnu.org/git/guix.git is the canonical repo but it doesn't allow shallow fetches.
               (commit commit)))
         (sha256
          (base32
           "0x4mpw017q4l14aimlyzxxa68jz2rn6zb8m8l7s791fkkdn2paja"))))
      (build-system copy-build-system)
      (arguments
       `(#:install-plan
         '(("etc/copyright.el" "share/guix-emacs-development/etc/copyright.el")
           ("etc/snippets" "share/guix-emacs-development/etc/snippets"))))
      (home-page #f)
      (synopsis #f)
      (description #f)
      (license #f))))
#+end_src
******** tldr
#+begin_src scheme
(define-public emacs-tldr
  (package
    (inherit emacs-xyz:emacs-tldr)
    (arguments
     (substitute-keyword-arguments (package-arguments emacs-xyz:emacs-tldr)
       ((#:phases phases '%standard-phases)
        `(modify-phases ,phases
           (add-after 'unpack 'patch-tldr-directory-path
             (lambda* (#:key inputs #:allow-other-keys)
               (emacs-substitute-variables "tldr.el"
                 ("tldr-directory-path" (search-input-directory inputs "share/tldr-pages")))))))))
    (inputs (modify-inputs (package-inputs emacs-xyz:emacs-tldr)
              (prepend tldr-pages)))))
#+end_src
********* tldr pages
#+begin_src scheme
(define tldr-pages
  (let ((commit "7ee7ed0f4afc90ef05b1dde87f6fec5b462a0394")
        (revision "0"))
    (package
      (name "tldr-pages")
      (version (git-version "1.5b" revision commit))
      (source
       (origin
         (method url-fetch/zipbomb)
         (uri (string-append "https://raw.githubusercontent.com/tldr-pages/tldr-pages.github.io/" commit "/assets/tldr.zip"))
         (sha256
          (base32
           "0a09ycfrxiaxv0hzjrkwi56l0ga5d7ydrlclmk4vd6ndb242vhgr"))))
      (build-system copy-build-system)
      (arguments
       `(#:install-plan
         '(("." "share/tldr-pages/"))))
      (home-page "https://tldr.sh")
      (synopsis "A collection of community-maintained help pages for command-line tools")
      (description synopsis)
      (license license:cc-by4.0))))
#+end_src
******* batch emacs packages WIP
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "emacs-xyz-batch.scm")
:END:
******** ~doom-packages~
#+begin_src scheme
(define-module (ebullient home emacs-xyz-batch)
  #:use-module (guix build-system emacs)
  #:use-module (guix git-download)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module ((gnu packages emacs-xyz)))

(define-public emacs-auto-minor-mode
  (package
    (name "emacs-auto-minor-mode")
    (version "20180527.1123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joewreschnig/auto-minor-mode.git")
               (commit "17cfa1b54800fdef2975c0c0531dad34846a5065")))
        (sha256
          (base32 "1jgq9b262pjr6npza3k0p2glb6mpp0dfpslgx3i2p8a5ipwhwaqa"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/joewreschnig/auto-minor-mode")
    (synopsis "Enable minor modes by file name and contents")
    (description
      " This package lets you enable minor modes based on file name and contents.  To
find the right modes, it checks filenames against patterns in
‘auto-minor-mode-alist’ and file contents against ‘auto-minor-mode-magic-alist’.
 These work like the built-in Emacs variables ‘auto-mode-alist’ and
‘magic-mode-alist’.

Unlike major modes, all matching minor modes are enabled, not only the first
match.

A reason you might want to use it:   (add-to-list 'auto-minor-mode-alist
'(\"-theme\\\\.el\\\\'\" .  rainbow-mode))

There’s intentionally no equivalent of ‘interpreter-mode-alist’.  Interpreters
should determine the major mode.  Relevant minor modes can then be enabled by
major mode hooks.

Minor modes are set whenever ‘set-auto-mode’, the built-in function responsible
for handling automatic major modes, is called.

If you also use ‘use-package’, two new keywords are added, ‘:minor’ and
‘:magic-minor’, which register entries in these alists.  You must load (and not
defer) ‘auto-minor-mode’ before using these keywords for other packages.")
    (license #f)))

(define-public emacs-better-jumper
  (package
    (name "emacs-better-jumper")
    (version "20220110.118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gilbertw1/better-jumper.git")
               (commit "47622213783ece37d5337dc28d33b530540fc319")))
        (sha256
          (base32 "16z14jvpy4w0wglaxr8869cwpvn6f5dyvwwav6j8cqyiphjf259p"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/gilbertw1/better-jumper")
    (synopsis "configurable jump list")
    (description
      " Better-jumper is configurable jump list implementation for Emacs that can be
used to easily jump back to previous locations.  That provides optional
integration with evil.

To enable globally:

    (require 'better-jumper)     (better-jumper-mode 1)

See included README.md for more information.")
    (license #f)))

(define-public emacs-company-dict
  (package
    (name "emacs-company-dict")
    (version "20190302.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-company-dict.git")
               (commit "cd7b8394f6014c57897f65d335d6b2bd65dab1f4")))
        (sha256
          (base32 "11whnjmy5dyg4wkwabpip8hqsmqys193m7aqbd7jl4hmq24hrwsw"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-company emacs-parent-mode))
    (home-page "https://github.com/hlissner/emacs-company-dict")
    (synopsis "A backend that emulates ac-source-dictionary")
    (description "No description available.")
    (license #f)))

(define-public emacs-consult-flycheck
  (package
    (name "emacs-consult-flycheck")
    (version "20210530.202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/consult-flycheck.git")
               (commit "0ad7e8ff15683a4d64b79c29b3fcf847edfe244b")))
        (sha256
          (base32 "09h9p7axy4gavzz2fn847hx2xvfxlnz4x9lpvp9arivjzn0yqrzi"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-consult emacs-flycheck))
    (arguments '(#:include '("^consult-flycheck.el$") #:exclude '()))
    (home-page "https://github.com/minad/consult")
    (synopsis "Provides the command `consult-flycheck'")
    (description
      "This package provides the command `consult-flycheck'.  This is an extra package,
since the consult.el package only depends on Emacs core components.")
    (license #f)))

(define-public emacs-embark-consult
  (package
    (name "emacs-embark-consult")
    (version "20220329.32")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/embark.git")
               (commit "06d5caafd58db6b6d7fa14cf8b6f7336486b92ca")))
        (sha256
          (base32 "08g2zskdgq7p08zyv600vzdkzyva860f2i4mrl6hljkkp66ndcc1"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-embark emacs-consult))
    (arguments '(#:include '("^embark-consult.el$") #:exclude '()))
    (home-page "https://github.com/oantolin/embark")
    (synopsis "Consult integration for Embark")
    (description
      "This package provides integration between Embark and Consult.  To use it,
arrange for it to be loaded once both of those are loaded:

(with-eval-after-load 'consult   (with-eval-after-load 'embark     (require
'embark-consult)))

Some of the functionality here was previously contained in Embark itself:

- Support for consult-buffer, so that you get the correct actions for each type
of entry in consult-buffer's list.

- Support for consult-line, consult-outline, consult-mark and
consult-global-mark, so that the insert and save actions don't include a weird
unicode character at the start of the line, and so you can export from them to
an occur buffer (where occur-edit-mode works!).

Just load this package to get the above functionality, no further configuration
is necessary.

Additionally this package contains some functionality that has never been in
Embark: access to Consult preview from auto-updating Embark Collect buffer that
is associated to an active minibuffer for a Consult command.  For information on
Consult preview, see Consult's info manual or its readme on GitHub.

If you always want the minor mode enabled whenever it possible use:

(add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)

If you don't want the minor mode automatically on and prefer to trigger the
consult previews manually use this instead:

(define-key embark-collect-mode-map (kbd \"C-j\")   #'consult-preview-at-point)")
    (license #f)))

(define-public emacs-nav-flash
  (package
    (name "emacs-nav-flash")
    (version "20210906.1942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/nav-flash.git")
               (commit "2e31f32085757e1dfdd8ec78e9940fd1c88750de")))
        (sha256
          (base32 "0wzk6nqky5zjpds9mmi1dcwn00d3044l7a0giawqycsa4zcybdlk"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/rolandwalker/nav-flash")
    (synopsis "Briefly highlight the current line")
    (description
      " Quickstart

    (require 'nav-flash)

    (nav-flash-show)

Explanation

Nav-flash temporarily highlights the line containing the point, which is
sometimes useful for orientation after a navigation command.

To use nav-flash, place the nav-flash.el library somewhere Emacs can find it,
and add the following to your ~/.emacs file:

    (require 'nav-flash)

There is no user-level interface for this library; it is only used by other Lisp
libraries.  However, you might find it useful to call `nav-flash-show' in your
~/.emacs file.  For example, the following hook causes a flash to appear after
navigating via imenu:

    (add-hook 'imenu-after-jump-hook 'nav-flash-show nil t)

See Also

    M-x customize-group RET nav-flash RET     M-x customize-group RET pulse RET

Notes

    This library reuses a timer and overlay defined in compile.el,     but
should not affect the normal use of compile.el / `next-error'.

    Pulse.el provides similar functionality and is included with     Emacs.
This library can use pulse.el, but does not do so by     default, because
pulse.el uses `sit-for', breaking this type     of construction:

        (nav-flash-show)         (with-temp-message \"message here\"
(sit-for 2))

    When using an overlay and timer for cleanup (as nav-flash does     by
default) the flash and message appear simultaneously.

    Nav-flash.el is also simpler than pulse.el.

Compatibility and Requirements

    GNU Emacs version 25.1-devel     : not tested     GNU Emacs version 24.5
      : not tested     GNU Emacs version 24.4           : yes     GNU Emacs
version 24.3           : yes     GNU Emacs version 23.3           : yes     GNU
Emacs version 22.2           : yes, with some limitations     GNU Emacs version
21.x and lower : unknown

    No external dependencies

Bugs

    No known bugs.

TODO

    Check pulse period on other platforms.

; License

Simplified BSD License:

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  1.  Redistributions of source code must retain the above      copyright
notice, this list of conditions and the following      disclaimer.

  2.  Redistributions in binary form must reproduce the above      copyright
notice, this list of conditions and the following      disclaimer in the
documentation and/or other materials      provided with the distribution.

This software is provided by Roland Walker \"AS IS\" and any express or implied
warranties, including, but not limited to, the implied warranties of
merchantability and fitness for a particular purpose are disclaimed.  In no
event shall Roland Walker or contributors be liable for any direct, indirect,
incidental, special, exemplary, or consequential damages (including, but not
limited to, procurement of substitute goods or services; loss of use, data, or
profits; or business interruption) however caused and on any theory of
liability, whether in contract, strict liability, or tort (including negligence
or otherwise) arising in any way out of the use of this software, even if
advised of the possibility of such damage.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of Roland Walker.")
    (license #f)))

(define-public emacs-centaur-tabs
  (package
    (name "emacs-centaur-tabs")
    (version "20220224.808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ema2159/centaur-tabs.git")
               (commit "f4cef95acbd2eb99c8db3b6cdde74a6e0a966a0a")))
        (sha256
          (base32 "10vpy22g2ccrj00kycrjcywywc69hqf3dm7vcbmmw7ralh9vclbc"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page "https://github.com/ema2159/centaur-tabs")
    (synopsis "Aesthetic, modern looking customizable tabs plugin")
    (description
      " Emacs plugin aiming to become an aesthetic, modern looking tabs plugin.

This package offers tabs with a wide range of customization options, both
aesthetical and functional, implementing them trying to follow the Emacs
philosophy packing them with useful keybindings and a nice integration with the
Emacs environment, without sacrificing customizability.  Some of the features
Centaur tabs offers are: - Tab styles - Tab icons - Graying out icons - Selected
tab bar (over, under and left bar) - Close button - Modified marker - Buffer
grouping - Projectile integration - Ivy and Helm integration for group switching")
    (license #f)))

(define-public emacs-treemacs-evil
  (package
    (name "emacs-treemacs-evil")
    (version "20211019.1654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit "b18a05b1f62074a40e6011d83cd4c92cbee040dd")))
        (sha256
          (base32 "0975n5d1rl9dqi9qwsg724cjxl753rw30xxngg7qs6338mp77c1y"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil emacs-treemacs))
    (arguments '(#:include '("^src/extra/treemacs-evil.el$") #:exclude '()))
    (home-page "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Evil mode integration for treemacs")
    (description "; Evil mode compatibility.")
    (license #f)))

(define-public emacs-treemacs-projectile
  (package
    (name "emacs-treemacs-projectile")
    (version "20211223.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit "b18a05b1f62074a40e6011d83cd4c92cbee040dd")))
        (sha256
          (base32 "0975n5d1rl9dqi9qwsg724cjxl753rw30xxngg7qs6338mp77c1y"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-projectile emacs-treemacs))
    (arguments
      '(#:include '("^src/extra/treemacs-projectile.el$") #:exclude '()))
    (home-page "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Projectile integration for treemacs")
    (description "; Projectile integration for treemacs")
    (license #f)))

(define-public emacs-treemacs-magit
  (package
    (name "emacs-treemacs-magit")
    (version "20211010.1005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit "b18a05b1f62074a40e6011d83cd4c92cbee040dd")))
        (sha256
          (base32 "0975n5d1rl9dqi9qwsg724cjxl753rw30xxngg7qs6338mp77c1y"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-treemacs emacs-pfuture emacs-magit))
    (arguments '(#:include '("^src/extra/treemacs-magit.el$") #:exclude '()))
    (home-page "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Magit integration for treemacs")
    (description
      "; Closing the gaps for filewatch- and git-modes in conjunction with magit.  ;
Specifically this package will hook into magit so as to artificially ; produce
filewatch events for changes that treemacs would otherwise ; not catch, nameley
the committing and (un)staging of files.")
    (license #f)))

(define-public emacs-treemacs-persp
  (package
    (name "emacs-treemacs-persp")
    (version "20220209.2117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit "b18a05b1f62074a40e6011d83cd4c92cbee040dd")))
        (sha256
          (base32 "0975n5d1rl9dqi9qwsg724cjxl753rw30xxngg7qs6338mp77c1y"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-treemacs emacs-persp-mode emacs-dash))
    (arguments '(#:include '("^src/extra/treemacs-persp.el$") #:exclude '()))
    (home-page "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Persp-mode integration for treemacs")
    (description
      "; Integration of persp-mode into treemacs' buffer scoping framework.")
    (license #f)))

(define-public emacs-vi-tilde-fringe
  (package
    (name "emacs-vi-tilde-fringe")
    (version "20141028.242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/vi-tilde-fringe.git")
               (commit "f1597a8d54535bb1d84b442577b2024e6f910308")))
        (sha256
          (base32 "0wdm8k49zl6i6wnh7vjkswdh5m9lix56jv37xvc90inipwgs402z"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/syl20bnr/vi-tilde-fringe")
    (synopsis "Displays tildes in the fringe on empty lines a la Vi.")
    (description
      "Usage -----

To toggle the mode locally: M-x vi-tilde-fringe-mode

To toggle the mode globally: M-x global-vi-tilde-fringe-mode

To turn it on automatically only for programming modes: (add-hook
'prog-mode-hook 'vi-tilde-fringe-mode)

Customization -------------

Open the customization group buffer: M-x customize-group RET vi-tilde-fringe RET

There you can change the bitmap array or the face of the symbol drawn in the
fringe.  By default the symbol is a tilde :-) and its face simply inherits from
`default'.")
    (license #f)))

(define-public emacs-evil-easymotion
  (package
    (name "emacs-evil-easymotion")
    (version "20200424.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/evil-easymotion.git")
               (commit "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")))
        (sha256
          (base32 "0xsva9bnlfwfmccm38qh3yvn4jr9za5rxqn4pwxbmhnx4rk47cch"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page "https://github.com/pythonnut/evil-easymotion")
    (synopsis "A port of vim's easymotion to emacs")
    (description
      "This is a clone of the popular easymotion package for vim, which describes
itself in these terms:

> EasyMotion provides a much simpler way to use some motions in vim.  > It takes
the <number> out of <number>w or <number>f{char} by > highlighting all possible
choices and allowing you to press one key > to jump directly to the target.

If you're having trouble picturing this, please visit the github repo for a
screencast.

Usage/status ============

evil-easymotion, rather unsurprisingly can use evil.  However, you don't _need_
evil to use it.  evil-easymotion can happily define motions for regular emacs
commands.  With that said, evil is recommended, not least because it's awesome.

Currently most motions are supported, and it's easy to define your own
easymotions.

  (evilem-define (kbd \"SPC w\") 'evil-forward-word-begin)

To define easymotions for all motions that evil defines by default, add

  (evilem-default-keybindings \"SPC\")

This binds all motions under the prefix `SPC` in `evil-motion-state-map`.  This
is not done by default for motions defined manually.  You will need to supply
the prefix.

More advanced use-cases are detailed in the github README.")
    (license #f)))

(define-public emacs-embrace
  (package
    (name "emacs-embrace")
    (version "20171031.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/embrace.el.git")
               (commit "dd5da196e5bcc5e6d87e1937eca0c21da4334ef2")))
        (sha256
          (base32 "1m0qyipkp5ydgcav8d0m58fbj1gilipbj7g8mg40iajr8wfqcjdc"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis "Add/Change/Delete pairs based on `expand-region'")
    (description
      "                             _____________

                               EMBRACE.EL

                              Junpeng Qiu
_____________


Table of Contents _________________

1 Overview 2 Usage ..  2.1 Example ..  2.2 Screencasts ..  2.3 `embrace-change'
and `embrace-delete' ..  2.4 `embrace-add' 3 Customization ..  3.1 Adding More
Semantic Units ..  3.2 Adding More Surrounding Pairs ..  3.3 Disable Help
Message ..  3.4 Example Settings 4 For `evil-surround' Users ..  4.1 Where\n`embrace' is better ..  4.2 Why not use together? 5 Contributions 6 Related
Packages


Add/Change/Delete pairs based on [expand-region].

For `evil-surround' integration, see [evil-embrace].


[expand-region] https://github.com/magnars/expand-region.el

[evil-embrace] https://github.com/cute-jumper/evil-embrace.el


1 Overview ==========

  This package is heavily inspired by [evil-surround] (which is a port   of the
vim plugin [surround.vim]).  But instead of using `evil' and its   text objects,
this package relies on another excellent package   [expand-region].

  For Emacs users who don't like `evil' and thus don't use   `evil-surround',
`embrace' provides similar commands that can be found   in `evil-surround'.
`Evil' is absolutely *not* required.  For   `evil-surround' users, `embrace' can
make your `evil-surround'   commands even better! (Have you noticed that
`evil-surround' doesn't   work on many custom pairs?)


[evil-surround] https://github.com/timcharper/evil-surround

[surround.vim] https://github.com/tpope/vim-surround

[expand-region] https://github.com/magnars/expand-region.el


2 Usage =======

  There are three commands: `embrace-add', `embrace-change' and
`embrace-delete' that can add, change, and delete surrounding pairs
respectively.  You can bind these commands to your favorite key   bindings.

  There is also a dispatch command `embrace-commander'.  After invoking
`embrace-commander', you can hit:   - `a' for `embrace-add'   - `c' for
`embrace-change'   - `d' for `embrace-delete'


2.1 Example ~~~~~~~~~~~

  It might be a little hard for users who have no experience in `evil'   and
`evil-surround' to understand what `embrace' can do.  So let's give   an example
to show what `embrace' can do fist.  You can look at the   following sections to
see the meaning of key bindings.  In this   example, I bind C-, to
`embrace-commander'.  Assume we have following   text in `c-mode' and the cursor
position is indicated by `|':   ,----   | fo|o   `----

  Press C-, a w ' to add '' to the current word:   ,----   | 'fo|o'   `----

  Press C-, a q { to add {} to outside of the quotes:   ,----   | {'fo|o'}
`----

  Press C-, c ' \" to change the '' to \"\":   ,----   | {\"fo|o\"}   `----

  Press C-, c { t, and then enter the tag: body class=\"page-body\", to   change
the {} to a tag:   ,----   | <body class=\"page-body\">\"fo|o\"</body>   `----

  Press C-, c t f, and enter the function name `bar' to change the tag   to a
function call:   ,----   | bar(\"fo|o\")   `----

  Press C-, d f to remove the function call:   ,----   | \"fo|o\"   `----

  If you're an `evil-surround' user, you might notice that the last   command
can't be achieved by `evil-surround'.  However, it works in   `embrace'! And
yes, you can find even more examples in which   `evil-surround' doesn't work
while `embrace' works!


2.2 Screencasts ~~~~~~~~~~~~~~~

  For non `evil-mode' users, use the following settings (they will be
explained later):   ,----   | (global-set-key (kbd \"C-,\") #'embrace-commander)
| (add-hook 'org-mode-hook #'embrace-org-mode-hook)   `----

  Open an org-mode file, we can perform the following pair changing:

  [./screencasts/embrace.gif]

  For `evil-mode' users, here is a similar screencast (see   [evil-embrace] for
more details):


[https://github.com/cute-jumper/evil-embrace.el/blob/master/screencasts/evil-embrace.gif]


[evil-embrace] https://github.com/cute-jumper/evil-embrace.el


2.3 `embrace-change' and `embrace-delete'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  These two commands can change and delete the surround pair   respectively.
For `evil-surround' users, `embrace-change' is similar   to `cs' and
`embrace-delete' is similar to `ds'.

  The surrounding pair is specified by a key, which is very similar to   the key
used for Vim's text objects.  For example, `(' stands for the   surrounding pair
`(' and `)', and `{' stands for the surrouding pair,   `{' and `}'.  The default
key mappings are shown below:    Key  Left             right
--------------------------------    (    \"(\"              \")\"    )    \"( \"
      \" )\"    {    \"{\"              \"}\"    }    \"{ \"             \" }\"    [
\"[\"              \"]\"    ]    \"[ \"             \" ]\"    >    \"<\"              \">\"
  \"    \"\\\"\"             \"\\\"\"    '    \"\\'\"             \"\\'\"    `    \"`\"
   \"`\"    t    \"<foo bar=100>\"  \"</foo>\"    f    \"func(\"          \")\"

  Note that for `t' and `f' key, the real content is based on the   user's
input.  Also, you can override the closing quote when   entering a ` (backquote)
in emacs-lisp to get a ' (apostrophe)   instead of a ` (backquote) by using
`embrace-emacs-lisp-mode-hook' (see below).


2.4 `embrace-add' ~~~~~~~~~~~~~~~~~

  This command is similar to `evil-surround''s `ys' command.  We need to   enter
a key for the semantic unit to which we want to add a   surrounding pair.  The
semantic unit is marked by the functions   provided by `expand-region'.

  Here is the default mapping:    key  mark function
-----------------------------    w    er/mark-word    s    er/mark-symbol    d
 er/mark-defun    p    er/mark-outside-pairs    P    er/mark-inside-pairs    q
 er/mark-outside-quotes    Q    er/mark-inside-quotes    .    er/mark-sentence
 h    er/mark-paragraph

  After pressing a key to select the semantic unit, you can press   another key
to add the surrounding pair, which is the same as   `embrace-change' and
`embrace-delete'.


3 Customization ===============

3.1 Adding More Semantic Units ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  You can modify the variable `embrace-semantic-units-alist' and note   that
this variable is buffer-local so it is better to change the value   in a hook:
,----   | (add-hook 'text-mode-hook   |     (lambda ()   |        (add-to-list
'embrace-semantic-units-alist '(?e .  er/mark-email))))   `----


3.2 Adding More Surrounding Pairs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Use the command `embrace-add-pair' to add a pair:   ,----   |
(embrace-add-pair key left right)   `----

  The change is also buffer-local, so wrap it in a hook function:   ,----   |
(add-hook 'LaTeX-mode-hook   |     (lambda ()   |        (embrace-add-pair ?e
\"\\\\begin{\" \"}\")))   `----

  If you want add something like the `t' key for the tag, you can look   at the
function `embrace-add-pair-regexp' in the source code.

  Note that if you're using `embrace-add-pair' to add an existing key,   then it
will replace the old one.


3.3 Disable Help Message ~~~~~~~~~~~~~~~~~~~~~~~~

  If you find the help message annoying, use the following code to   disable it:
 ,----   | (setq embrace-show-help-p nil)   `----


3.4 Example Settings ~~~~~~~~~~~~~~~~~~~~

  I recommend binding a convenient key for `embrace-commander'.  For   example,
 ,----   | (global-set-key (kbd \"C-,\") #'embrace-commander)   `----

  We have defined several example hook functions that provide additional   key
bindings which can be used in different major modes.  Right now   there are
hooks for `LaTeX-mode', `org-mode', `ruby-mode' (including   `enh-ruby-mode')
and `emacs-lisp-mode':

  `LaTeX-mode':    Key  Left      Right   ----------------------    =    \\verb|
  |    ~    \\texttt{  }    *    \\textbf{  }

  `org-mode':    Key  Left              Right
------------------------------------------    =    =                 =    ~    ~
                ~    *    *                 *    _    _                 _    +
 +                 +    k    `@@html:<kbd>@@'  `@@html:</kbd>@@'

  `ruby-mode' and `enh-ruby-mode':    Key  Left  Right   ------------------    #
   #{     }    d    do     end

  `emacs-lisp-mode':    Key  Left  Right   ------------------    `    `      '

  To use them:   ,----   | (add-hook 'LaTeX-mode-hook 'embrace-LaTeX-mode-hook)
 | (add-hook 'org-mode-hook 'embrace-org-mode-hook)   | (add-hook
'ruby-mode-hook 'embrace-ruby-mode-hook) ;; or enh-ruby-mode-hook   | (add-hook
'emacs-lisp-mode-hook 'embrace-emacs-lisp-mode-hook)   `----

  The code of two of the hooks above (which are defined in `embrace.el'):
,----   | (defun embrace-LaTeX-mode-hook ()   |   (dolist (lst '((?= \"\\\\verb|\" .
\"|\")   |                  (?~ \"\\\\texttt{\" . \"}\")   |                  (?/
\"\\\\emph{\" . \"}\")   |                  (?* \"\\\\textbf{\" . \"}\")))   |
(embrace-add-pair (car lst) (cadr lst) (cddr lst))))   | (defun
embrace-org-mode-hook ()   |   (dolist (lst '((?= \"=\" . \"=\")   |
 (?~ \"~\" . \"~\")   |                  (?/ \"/\" . \"/\")   |                  (?* \"*\"
. \"*\")   |                  (?_ \"_\" . \"_\")   |                  (?+ \"+\" . \"+\")
|                  (?k \"@@html:<kbd>@@\" . \"@@html:</kbd>@@\")))   |
(embrace-add-pair (car lst) (cadr lst) (cddr lst))))   `----

  You can define and use your own hook function similar to the code   above.

  Welcome to add some settings for more major modes.


4 For `evil-surround' Users ===========================

4.1 Where `embrace' is better ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  From the previous example, you can see that `embrace' actually   replicates\nall the funcionalities provided in `evil-surround' and it   can even do more
than `evil-surround'.  Actually, they are quite   different.  Since `embrace'
uses `expand-region' behind the scene, you   can expect it to work as long as
`expand-region' works.  Unlike   `evil-surround', which is restricted to the
pre-defined text objects,   `embrace' can define nearly arbitrary surrounding
pairs and three core   commands always work.  On the contratry, you get nearly
no   customization in `evil-surround': custom pairs don't work in `cs' or   `ds'
if you don't have a corresponding text object defined (they work   in `ys').

  ,*TL;DR*: `embrace' is more customizable.


4.2 Why not use together? ~~~~~~~~~~~~~~~~~~~~~~~~~

  Sure! You can make `embrace' and `evil-surround' work together.  Look   at
[evil-embrace]!


[evil-embrace] https://github.com/cute-jumper/evil-embrace.el


5 Contributions ===============

  This package is still in early stage, but it is quite usable right   now.
More functions can be added and the evil integration is not   perfect yet.
Contributions are always welcome!


6 Related Packages ==================

  - [evil-embrace]   - [expand-region]   - [evil-surround]   - [change-inner]
- [smartparens]


[evil-embrace] https://github.com/cute-jumper/evil-embrace.el

[expand-region] https://github.com/magnars/expand-region.el

[evil-surround] https://github.com/timcharper/evil-surround

[change-inner] https://github.com/magnars/change-inner.el

[smartparens] https://github.com/Fuco1/smartparens")
    (license #f)))

(define-public emacs-evil-embrace
  (package
    (name "emacs-evil-embrace")
    (version "20220211.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/evil-embrace.el.git")
               (commit "7b5a539cfe7db238d860122c793a0cb2d329cc6e")))
        (sha256
          (base32 "03b53626ywq9qdqzsb92321lc0fzjqb674kwkssjrxlz6hhn5hlq"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-embrace emacs-evil-surround))
    (home-page "unspecified")
    (synopsis "Evil integration of embrace.el")
    (description
      "                             ______________

                              EVIL-EMBRACE

                              Junpeng Qiu
______________


Table of Contents _________________

1 Overview 2 Why 3 Usage 4 Screencasts


Evil integration of [embrace.el].


[embrace.el] https://github.com/cute-jumper/embrace.el


1 Overview ==========

  This package provides evil integration of [embrace.el].  Since
`evil-surround' provides a similar set of features as `embrace.el',   this
package aims at adding the goodies of `embrace.el' to   `evil-surround' and
making `evil-surround' even better.


[embrace.el] https://github.com/cute-jumper/embrace.el


2 Why =====

  `evil-surround' is good when there is a text object defined.  But
unfortunately, if you want to add custom surrouding pairs,   `evil-surround'
will not be able to delete/change the pairs if there   are no evil text objects
defined for these pairs.  For example, if you   want to make `\\textbf{' and `}'\nas a surround pair in `LaTeX-mode',   you can't either change or delete the
surround pair since there is no   text object for `\\textbf{' and `}'.  However,
using `embrace', you can   define whatever surrounding pairs you like, and
adding, changing, and   deleting will *always* work.

  The idea of this package is that let `evil-surround' handle the keys   that
corresponds to existing text objects (i.e., `(', `[', etc.),   which is what
`evil-surround' is good at, and make `embrace' handles   all the other keys of
custom surrounding pairs so that you can also   benefit from the extensibility
that `embrace' offers.

  In a word, you can use the default `evil-surround'.  But whenever you   want
to add a custom surrounding pair, use `embrace' instead.  To see   how to add a
custom pair in `embrace', look at the README of   [embrace.el].


[embrace.el] https://github.com/cute-jumper/embrace.el


3 Usage =======

  To enable the `evil-surround' integration:   ,----   |
(evil-embrace-enable-evil-surround-integration)   `----

  And use `evil-embrace-disable-evil-surround-integration' to disable   whenever
you don't like it.

  The keys that are processed by `evil-surround' are saved in the   variable
`evil-embrace-evil-surround-keys'.  The default value is:   ,----   | (?\\( ?\\[
?\\{ ?\\) ?\\] ?\\} ?\\\" ?\\' ?< ?> ?b ?B ?t ?w ?W ?s ?p)   `----

  Note that this variable is buffer-local.  You should change it in the   hook:
 ,----   | (add-hook 'LaTeX-mode-hook   |     (lambda ()   |        (add-to-list
'evil-embrace-evil-surround-keys ?o)))   `----

  Only these keys saved in the variable are processed by   `evil-surround', and
all the other keys will be processed by   `embrace'.

  If you find the help message popup annoying, use the following code to
disable it:   ,----   | (setq evil-embrace-show-help-p nil)   `----


4 Screencasts =============

  Use the following settings:   ,----   | (add-hook 'org-mode-hook
'embrace-org-mode-hook)   | (evil-embrace-enable-evil-surround-integration)
`----

  In an org-mode file, we can change the surrounding pair in the   following way
(note that this whole process can't be achieved solely   by `evil-surround'):

  [./screencasts/evil-embrace.gif]")
    (license #f)))

(define-public emacs-evil-snipe
  (package
    (name "emacs-evil-snipe")
    (version "20211114.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/evil-snipe.git")
               (commit "a79177df406a79b4ffa25743c752f21363bba1cc")))
        (sha256
          (base32 "0pz2s0g0859zhyryvn1glngw1aq7a04x9rydl1l89h50hf5avmvj"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/hlissner/evil-snipe")
    (synopsis "emulate vim-sneak & vim-seek")
    (description
      " Evil-snipe emulates vim-seek and/or vim-sneak in evil-mode.

It provides 2-character versions of evil's f/F/t/T motions, for quick and more
accurately jumping around text, plus incremental highlighting (for f/F/t/T as
well).

To enable globally:

    (require 'evil-snipe)     (evil-snipe-mode 1)

To replace evil-mode's f/F/t/T functionality with (1-character) sniping:

    (evil-snipe-override-mode 1)

See included README.md for more information.")
    (license #f)))

(define-public emacs-evil-textobj-anyblock
  (package
    (name "emacs-evil-textobj-anyblock")
    (version "20170905.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/evil-textobj-anyblock.git")
               (commit "ff00980f0634f95bf2ad9956b615a155ea8743be")))
        (sha256
          (base32 "0wn5lp7kh3ip1bmqi12c9ivpjj0x602h8d7ag39qw36smv4jqvnb"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/noctuid/evil-textobj-anyblock")
    (synopsis "Textobject for the closest user-defined blocks.")
    (description
      "This package is a port of vim-textobj-anyblock.  It gives text objects for the
closest block of those defined in the evil-anyblock-blocks alist.  By default it
includes (), {}, [], <>, '', \"\", ``, and “”.  This is convenient for operating
on the closest block without having to choose between typing something like i{
or i<.  This package allows for the list of blocks to be changed.  They can be
more complicated regexps.  A simple expand-region like functionality is also
provided when in visual mode, though this is not a primary focus of the plugin
and does not exist in vim-textobj-anyblock.  Also, in the case that the point is
not inside of a block, anyblock will seek forward to the next block.

The required version of evil is based on the last change I could find to
evil-select-paren, but the newest version of evil is probably preferable.

For more information see the README in the github repo.")
    (license #f)))

(define-public emacs-exato
  (package
    (name "emacs-exato")
    (version "20180305.1042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ninrod/exato.git")
               (commit "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")))
        (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/ninrod/exato")
    (synopsis "EXATO: Evil XML/HTML Attributes Text Object")
    (description
      "This package provides the `x` text object to manipulate html/xml tag attributes.
it is a port of https://github.com/whatyouhide/vim-textobj-xmlattr vim plugin.

Try using `dax`, `vix` and `gUix`.  You can customize the binding.

To install the package, Just use https://melpa.org.  Here's an oneliner using
https://github.com/jwiegley/use-package: (use-package exato :ensure t)

,*customization*: to change the bind from `x` to your liking, you can customize
exato-key:

(use-package exato   :ensure t   :init   (setq exato-key \"h\"))")
    (license #f)))

(define-public emacs-vimish-fold
  (package
    (name "emacs-vimish-fold")
    (version "20201205.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matsievskiysv/vimish-fold.git")
               (commit "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")))
        (sha256
          (base32 "0w0r951c6vn890h1cz5l8rl6hicna6rbdzfgbg4lpm280yds9lpb"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/mrkkrp/vimish-fold")
    (synopsis "Fold text like in Vim")
    (description
      "This is a package to perform text folding like in Vim.  It has the following
features:

,* folding of active regions;

,* good visual feedback: it's obvious which part of text is folded;

,* persistence by default: when you kill a buffer your folds don't   disappear;

,* persistence scales well, you can work on hundreds of files with lots of
folds without adverse effects;

,* it does not break indentation;

,* folds can be toggled from folded state to unfolded and back very   easily;

,* quick navigation between existing folds;

,* you can use mouse to unfold folds (good for beginners and not only for
them);

,* for fans of `avy' package: you can use `avy' to fold text with minimal
number of key strokes!")
    (license #f)))

(define-public emacs-vimish-fold
  (package
    (name "emacs-vimish-fold")
    (version "20201205.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matsievskiysv/vimish-fold.git")
               (commit "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")))
        (sha256
          (base32 "0w0r951c6vn890h1cz5l8rl6hicna6rbdzfgbg4lpm280yds9lpb"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/mrkkrp/vimish-fold")
    (synopsis "Fold text like in Vim")
    (description
      "This is a package to perform text folding like in Vim.  It has the following
features:

,* folding of active regions;

,* good visual feedback: it's obvious which part of text is folded;

,* persistence by default: when you kill a buffer your folds don't   disappear;

,* persistence scales well, you can work on hundreds of files with lots of
folds without adverse effects;

,* it does not break indentation;

,* folds can be toggled from folded state to unfolded and back very   easily;

,* quick navigation between existing folds;

,* you can use mouse to unfold folds (good for beginners and not only for
them);

,* for fans of `avy' package: you can use `avy' to fold text with minimal
number of key strokes!")
    (license #f)))

(define-public emacs-evil-vimish-fold
  (package
    (name "emacs-evil-vimish-fold")
    (version "20200122.117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/evil-vimish-fold.git")
               (commit "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")))
        (sha256
          (base32 "14qhfhk3d4c7v4jhr909dbxy8222flpqwk73bwg0pqwpkcifyv7n"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-evil emacs-vimish-fold))
    (home-page "https://github.com/alexmurray/evil-vimish-fold")
    (synopsis "Integrate vimish-fold with evil")
    (description
      " Integrate `vimish-fold' with `evil'.

Provides bindings to create and delete folds via \"zf\" and \"zd\" respectively, and
provides integration of usual vim fold commands via `vimish-fold`.  Also
supports navigation between folds using \"zj\" / \"zk\" respectively.")
    (license #f)))

(define-public emacs-language-id
  (package
    (name "emacs-language-id")
    (version "20220328.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-language-id.git")
               (commit "698a6011e76bde459a6228c7549e73a1816c91be")))
        (sha256
          (base32 "0rp0plh19w5vpnql162pnfv8g9byl3hgjcihq2vc623ifjh706r7"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/lassik/emacs-language-id")
    (synopsis "Library to work with programming language identifiers")
    (description
      "language-id is a small, focused library that helps other Emacs packages identify
the programming languages and markup languages used in Emacs buffers.  The main
point is that it contains an evolving table of language definitions that doesn't
need to be replicated in other packages.

Right now there is only one public function, `language-id-buffer'.  It looks at
the major mode and other variables and returns the language's GitHub Linguist
identifier.  We can add support for other kinds of identifiers if there is
demand.

This library does not do any statistical text matching to guess the language.")
    (license #f)))

(define-public emacs-format-all
  (package
    (name "emacs-format-all")
    (version "20220322.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-format-all-the-code.git")
               (commit "eb2a7fa6da15d23b57921218a36ac67d523e81f1")))
        (sha256
          (base32 "1lf719fifgaci4hirz1bdnf918ijmkp017ynmlg1gq0lfx7ay7gj"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-inheritenv emacs-language-id))
    (home-page "https://github.com/lassik/emacs-format-all-the-code")
    (synopsis "Auto-format C, C++, JS, Python, Ruby and 50 other languages")
    (description
      "Lets you auto-format source code in many languages using the same command for
all languages, instead of learning a different Emacs package and formatting
command for each language.

Just do M-x format-all-buffer and it will try its best to do the right thing.
To auto-format code on save, use the minor mode format-all-mode.  Please see the
documentation for that function for instructions.

Supported languages:

- Angular/Vue (prettier) - Assembly (asmfmt) - ATS (atsfmt) - Awk (gawk) - Bazel
Starlark (buildifier) - BibTeX (Emacs) - C/C++/Objective-C (clang-format,
astyle) - C# (clang-format, astyle) - Cabal (cabal-fmt) - Clojure/ClojureScript
(zprint, node-cljfmt) - CMake (cmake-format) - Crystal (crystal tool format) -
CSS/Less/SCSS (prettier) - Cuda (clang-format) - D (dfmt) - Dart (dartfmt,
dart-format) - Dhall (dhall format) - Dockerfile (dockfmt) - Elixir (mix format)
- Elm (elm-format) - Emacs Lisp (Emacs) - F# (fantomas) - Fish Shell
(fish_indent) - Fortran Free Form (fprettify) - Gleam (gleam format) - GLSL
(clang-format) - Go (gofmt, goimports) - GraphQL (prettier) - Haskell (brittany,
fourmolu, hindent, ormolu, stylish-haskell) - HTML/XHTML/XML (tidy) - Java
(clang-format, astyle) - JavaScript/JSON/JSX (prettier, standard) - Jsonnet
(jsonnetfmt) - Kotlin (ktlint) - LaTeX (latexindent, auctex) - Ledger
(ledger-mode) - Lua (lua-fmt, prettier plugin) - Markdown (prettier) - Nginx
(nginxfmt) - Nix (nixpkgs-fmt, nixfmt) - OCaml (ocp-indent) - Perl (perltidy) -\nPHP (prettier plugin) - Protocol Buffers (clang-format) - PureScript (purty,
purs-tidy) - Python (black, yapf, isort) - R (styler) - Racket (raco-fmt) -
Reason (bsrefmt) - ReScript (rescript) - Ruby (rubocop, rufo, standardrb) - Rust
(rustfmt) - Scala (scalafmt) - Shell script (beautysh, shfmt) - Snakemake
(snakefmt) - Solidity (prettier plugin) - SQL (pgformatter, sqlformat) - Svelte
(prettier plugin) - Swift (swiftformat) - Terraform (terraform fmt) - TOML
(prettier plugin) - TypeScript/TSX (prettier, ts-standard) - V (v fmt) - Verilog
(iStyle) - YAML (prettier)

You will need to install external programs to do the formatting.  If
`format-all-buffer` can't find the right program, it will try to tell you how to
install it.

Many of the external formatters support configuration files in the source code
directory to control their formatting.  Please see the documentation for each
formatter.

New external formatters can be added easily if they can read code from standard
input and format it to standard output.  Feel free to submit a pull request or
ask for help in GitHub issues.")
    (license #f)))

(define-public emacs-fd-dired
  (package
    (name "emacs-fd-dired")
    (version "20210723.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/fd-dired.git")
               (commit "458464771bb220b6eb87ccfd4c985c436e57dc7e")))
        (sha256
          (base32 "0253r4fbi9b8vk5akp1wz0krvik500jhy1hclwp1p0bwrq2irlml"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/yqrashawn/fd-dired")
    (synopsis "find-dired alternative using fd")
    (description
      "Provide a dired-mode interface for fd's result.  Same functionality as
find-dired, use fd instead.  Depend on find-dired.

Just call `fd-dired'.")
    (license #f)))

(define-public emacs-git-commit
  (package
    (name "emacs-git-commit")
    (version "20220328.47")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit "d1ad778280f651f0ab87ce191784b96b3ebe312a")))
        (sha256
          (base32 "0x09i80rrf2gji0igqvjirgdmpxfzfcaynfydbhdzrf56a6syzn5"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-transient emacs-with-editor))
    (arguments
      '(#:include
        '("^lisp/git-commit.el$" "^lisp/git-commit-pkg.el$")
        #:exclude
        '()))
    (home-page "https://github.com/magit/magit")
    (synopsis "Edit Git commit messages.")
    (description
      "This package assists the user in writing good Git commit messages.

While Git allows for the message to be provided on the command line, it is
preferable to tell Git to create the commit without actually passing it a
message.  Git then invokes the `$GIT_EDITOR' (or if that is undefined `$EDITOR')
asking the user to provide the message by editing the file \".git/COMMIT_EDITMSG\"
(or another file in that directory, e.g. \".git/MERGE_MSG\" for merge commits).

When `global-git-commit-mode' is enabled, which it is by default, then opening
such a file causes the features described below, to be enabled in that buffer.
Normally this would be done using a major-mode but to allow the use of any
major-mode, as the user sees fit, it is done here by running a setup function,
which among other things turns on the preferred major-mode, by default
`text-mode'.

Git waits for the `$EDITOR' to finish and then either creates the commit using
the contents of the file as commit message, or, if the editor process exited
with a non-zero exit status, aborts without creating a commit.  Unfortunately
Emacsclient (which is what Emacs users should be using as `$EDITOR' or at least
as `$GIT_EDITOR') does not differentiate between \"successfully\" editing a file
and aborting; not out of the box that is.

By making use of the `with-editor' package this package provides both ways of
finish an editing session.  In either case the file is saved, but Emacseditor's
exit code differs.

  C-c C-c  Finish the editing session successfully by returning            with
exit code 0.  Git then creates the commit using            the message it finds
in the file.

  C-c C-k  Aborts the edit editing session by returning with exit
code 1.  Git then aborts the commit.

Aborting the commit does not cause the message to be lost, but relying solely on
the file not being tampered with is risky.  This package additionally stores all
aborted messages for the duration of the current session (i.e.  until you close
Emacs).  To get back an aborted message use M-p and M-n while editing a message.

  M-p      Replace the buffer contents with the previous message            from
the message ring.  Of course only after storing            the current content
there too.

  M-n      Replace the buffer contents with the next message from            the
message ring, after storing the current content.

Some support for pseudo headers as used in some projects is provided by these
commands:

  C-c C-s  Insert a Signed-off-by header.    C-c C-a  Insert a Acked-by header.
 C-c C-m  Insert a Modified-by header.    C-c C-t  Insert a Tested-by header.
C-c C-r  Insert a Reviewed-by header.    C-c C-o  Insert a Cc header.    C-c C-p
 Insert a Reported-by header.    C-c C-i  Insert a Suggested-by header.

When Git requests a commit message from the user, it does so by having her edit
a file which initially contains some comments, instructing her what to do, and
providing useful information, such as which files were modified.  These
comments, even when left intact by the user, do not become part of the commit
message.  This package ensures these comments are propertizes as such and
further prettifies them by using different faces for various parts, such as
files.

Finally this package highlights style errors, like lines that are too long, or
when the second line is not empty.  It may even nag you when you attempt to
finish the commit without having fixed these issues.  The style checks and many
other settings can easily be configured:

  M-x customize-group RET git-commit RET")
    (license #f)))

(define-public emacs-flycheck-popup-tip
  (package
    (name "emacs-flycheck-popup-tip")
    (version "20170812.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-popup-tip.git")
               (commit "ef86aad907f27ca076859d8d9416f4f7727619c6")))
        (sha256
          (base32 "1bi6f9nm4bylsbjv4qnkar35s6xzdf2cc2cxi3g691p9527apdz6"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-flycheck emacs-popup))
    (home-page "https://github.com/flycheck/flycheck-popup-tip/")
    (synopsis "Display Flycheck error messages using popup.el")
    (description
      "This is extension for Flycheck.

It displays Flycheck error messages in buffer using `popup.el' library.

For more information about Flycheck: http://www.flycheck.org/
https://github.com/flycheck/flycheck

For more information about this Flycheck extension:
https://github.com/flycheck/flycheck-popup-tip

;; Setup

Add to your `init.el':

(with-eval-after-load 'flycheck   '(add-hook 'flycheck-mode-hook
'flycheck-popup-tip-mode))")
    (license #f)))

(define-public emacs-flycheck-posframe
  (package
    (name "emacs-flycheck-posframe")
    (version "20210316.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-posframe.git")
               (commit "8f60c9bf124ab9597d681504a73fdf116a0bde12")))
        (sha256
          (base32 "0qh9hzvs95jvfrspglzkwhfq6a5pinab94bbh5vzkg8jc2fq6drf"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-flycheck emacs-posframe))
    (home-page "https://github.com/alexmurray/flycheck-posframe")
    (synopsis "Show flycheck error messages using posframe.el")
    (description
      "Show flycheck error messages using posframe.el

;; Setup

(with-eval-after-load 'flycheck    (require 'flycheck-posframe)    (add-hook
'flycheck-mode-hook #'flycheck-posframe-mode))")
    (license #f)))

(define-public emacs-magit-gitflow
  (package
    (name "emacs-magit-gitflow")
    (version "20170929.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtatarik/magit-gitflow.git")
               (commit "cc41b561ec6eea947fe9a176349fb4f771ed865b")))
        (sha256
          (base32 "0jz69wrrzvqadaphmjrr146nzvmphsbl7rmc3ccnpw1gw6gnz81f"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-magit emacs-magit-popup))
    (home-page "https://github.com/jtatarik/magit-gitflow")
    (synopsis "gitflow extension for magit")
    (description
      " Gitflow plugin for Magit.

(require 'magit-gitflow) (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)

C-f in magit status buffer will invoke the gitflow popup.")
    (license #f)))

(define-public emacs-uuidgen
  (package
    (name "emacs-uuidgen")
    (version "20200816.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kanru/uuidgen-el.git")
               (commit "b50e6fef2de4199a8f207b46588c2cb3890ddd85")))
        (sha256
          (base32 "08m74kj7h70kna3pifk3sgsy7mck11p32vi48h9wzqnafyq3n55d"))))
    (build-system emacs-build-system)
    (home-page "unspecified")
    (synopsis "Provides various UUID generating functions")
    (description
      " This is a naive implementation of RFC4122 Universally Unique IDentifier
generation in elisp.  Currently implemented are UUID v1 v3, v4 and v5
generation.  The resolution of the time based UUID is microseconds, which is 10
times of the suggested 100-nanosecond resolution, but should be enough for
general usage.

Get development version from git:

    git clone git://github.com/kanru/uuidgen-el.git")
    (license #f)))

(define-public emacs-code-review
  (package
    (name "emacs-code-review")
    (version "20220328.108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/code-review.git")
               (commit "85ab2080e489b4ca01c787f5a316ade02a4ee877")))
        (sha256
          (base32 "0j0ijnzfd7b3a2jqi94zlky8iqv9g7vj9fx5fd4g2k53ilgapmdl"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-closql
            emacs-magit
            emacs-a
            emacs-ghub
            emacs-uuidgen
            emacs-deferred
            emacs-markdown-mode
            emacs-forge
            emacs-emojify))
    (home-page "https://github.com/wandersoncferreira/code-review")
    (synopsis "Perform code review from Github, Gitlab, and Bitbucket Cloud")
    (description
      " Review Pull Request in Emacs using a modern interface based on Magit Section
and Transient.  Currently supports Github, Gitlab, and Bitbucket Cloud.")
    (license #f)))

(define-public emacs-prodigy
  (package
    (name "emacs-prodigy")
    (version "20210116.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/prodigy.el.git")
               (commit "168f5ace1671876d8c3bd350c0853bd0196bddda")))
        (sha256
          (base32 "15rshpq0h5i252xamxh70acdz9jddn5xwgswzk5h2b24kxsbfnli"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/prodigy.el")
    (synopsis "Manage external services from within Emacs")
    (description "")
    (license #f)))

(define-public emacs-kurecolor
  (package
    (name "emacs-kurecolor")
    (version "20200113.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/kurecolor.git")
               (commit "3fc84840cbbd75e646cafa2fd3a00004b55e37ec")))
        (sha256
          (base32 "0y8wj8f2wzhg5vl4kjrqny3333616s4lcil085190yyb7mjakvn5"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis "color editing goodies for Emacs")
    (description
      " A collection of color tools aimed at those working with (normal 6 digit) hex
color codes, useful for CSS, Emacs themes, etc.

View the presentation at https://github.com/emacsfodder/kurecolor

![](kurecolor.gif)

Features include interactive step modification of hue, sat, val on hex colors.
Color conversion algorithms, for 6 digit hex colors, hsv, rgb, cssrgb.  Get/set
h s v values from/for a color.

It's recommend you use this in conjunction with rainbow-mode, for instant
feedback on color changes.

### Doing cool things

You can do funky things like adjust the saturation of all the colors in a
selection, using macros.

The presentation touches on this, and you'll need to get your keyboard macro
skills out to really shine, but it's relatively simple.

### Step by step: Mass saturation decrease As per the animated presentation,
these steps will demonstrate how to use Kurecolor interactive hsv adjusters with
keyboard macros, to mass adjust colors.

Add a few hex colors to your active buffer, or load up a css, code or simple
text buffer, which already has some colors you'd like to tweak.  Activate
rainbow-mode.  (If you need to install rainbow-mode, grab it from ELPA.)

After you have some colors ready to tweak, we're ready to try the following
steps:

1.  Select the region you want to modify 2.  Narrow the buffer `M-x
narrow-to-region` 3.  Go to the top `M-<` of the narrowed section 4.  Start
recording a macro `f3`   1.  Regexp i-search `C-M-s` for `#[0-9A-Fa-f]\\{6\\}` and
`ENTER` on the first match   2.  Your cursor point will be at the end of the
first color (unless the Regexp was in-adequate :( )   3. `M-5` (to do 5 steps)
`M-x kurecolor-decrease-saturation-by-step` (shortcut `M-x kure-d-sat` **TAB**)
5.  Stop recording the macro `f4` 6.  Run the macro again with `f4`, repeat
until you are finished, or use `M-0 f4` to run the macro until it hits the end
of the narrowed region (or hits an error).  8.  When you're done, `M-x widen` to
exit narrowing.

## Installing

Installing kurecolor is recommended to be done via MELPA.

    M-x package-install kurecolor

If you wish to install it manually, you already have your big boy pants on and
need no further help from me.

Enjoy!\n
### Tests

This package has a suite of unit tests.  To run them load both kurecolor and
kurecolor-test, and then do `M-x ert` (accept `default`).

### Ephemera

For those interested in such things, the name Kurecolor is unashamedly nicked
from a high end marker pen company.  Hopefully this outrage will fall silently
under their radar, and I won't have to change it due to some frivilous and
paranoid law suit. (seriously guys, this is just free advertising.)

I have not been pressured into saying this, however, Kurecolor markers and art
supplies are best best!  Buy some NOW (Like REALLY Immediately!!) for you, your
mum and your pet chinchilla Frank.

Since the question comes up occassionally, the mode-line hack used in the
presentation is based on original work by Armit Patel.  I gisted this a while
back, you can get it from.  https://gist.github.com/jasonm23/8554119

The theme is Gruvbox, although you can't see much of it.  Anyway, it's a great
theme, you should go install it now. (from MELPA)

; Package-Requires: ((emacs \"24.1\") (s \"1.0\"))

; Licence: MIT")
    (license #f)))

(define-public emacs-inflections
  (package
    (name "emacs-inflections")
    (version "20210110.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/jump.el.git")
               (commit "55caa66a7cc6e0b1a76143fd40eff38416928941")))
        (sha256
          (base32 "03fh7i6blnbc0zbmp83fk095hr3q4fdvrvfxad74zghcbc2nk7b7"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^inflections.el$") #:exclude '()))
    (home-page "https://github.com/eschulte/jump.el")
    (synopsis "convert english words between singular and plural")
    (description "No description available.")
    (license #f)))

(define-public emacs-clj-refactor
  (package
    (name "emacs-clj-refactor")
    (version "20220315.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clj-refactor.el.git")
               (commit "f368c56c83843396b160440f472a661a3b639862")))
        (sha256
          (base32 "0xp17gc5ipm7jzyx8smnq5z3hb7nb36c11f5c637chg3qdhw1r8m"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-yasnippet
            emacs-paredit
            emacs-multiple-cursors
            emacs-clojure-mode
            emacs-cider
            emacs-parseedn
            emacs-inflections
            emacs-hydra))
    (arguments
      '(#:include
        '("^[^/]+.el$"
          "^[^/]+.el.in$"
          "^dir$"
          "^[^/]+.info$"
          "^[^/]+.texi$"
          "^[^/]+.texinfo$"
          "^doc/dir$"
          "^doc/[^/]+.info$"
          "^doc/[^/]+.texi$"
          "^doc/[^/]+.texinfo$"
          "^CHANGELOG.md$")
        #:exclude
        '("^.dir-locals.el$"
          "^test.el$"
          "^tests.el$"
          "^[^/]+-test.el$"
          "^[^/]+-tests.el$")))
    (home-page "unspecified")
    (synopsis "A collection of commands for refactoring Clojure code")
    (description
      "See README.md at https://github.com/clojure-emacs/clj-refactor.el")
    (license #f)))

(define-public emacs-flycheck-clj-kondo
  (package
    (name "emacs-flycheck-clj-kondo")
    (version "20211227.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/borkdude/flycheck-clj-kondo.git")
               (commit "d8a6ee9a16aa24b5be01f1edf9843d41bdc75555")))
        (sha256
          (base32 "010gzxwvr2p2wv358r76ajkn48ilgmkmv7z6bckqbap0cjhrqq43"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "https://github.com/borkdude/flycheck-clj-kondo")
    (synopsis "Add clj-kondo linter to flycheck")
    (description
      "This package integrates clj-kondo with Emacs via flycheck.  To use it, add to
your init.el:

(require 'flycheck-clj-kondo)

Make sure the clj-kondo binary is on your path.  For installation instructions,
see https://github.com/borkdude/clj-kondo.")
    (license #f)))

(define-public emacs-sly-repl-ansi-color
  (package
    (name "emacs-sly-repl-ansi-color")
    (version "20171020.1516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PuercoPop/sly-repl-ansi-color.git")
               (commit "b9cd52d1cf927bf7e08582d46ab0bcf1d4fb5048")))
        (sha256
          (base32 "0fgcn6bwgz8yyjza07kfi86siargvpq4kp4j20hs6b67ckxjxx0x"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-sly))
    (home-page "https://github.com/PuercoPop/sly-repl-ansi-color")
    (synopsis "Add ANSI colors support to the sly mrepl.")
    (description
      "This package adds ANSI colors support to the sly mrepl.  It is a port of
slime-repl-ansi-color.el which was originally written by Max Mikhanosha.")
    (license #f)))

(define-public emacs-highlight-quoted
  (package
    (name "emacs-highlight-quoted")
    (version "20140916.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-quoted.git")
               (commit "24103478158cd19fbcfb4339a3f1fa1f054f1469")))
        (sha256
          (base32 "1gq8inxfni9zgz2brqm4nlswgr8b0spq15wr532xfrgr456g10ks"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Fanael/highlight-quoted")
    (synopsis "Highlight Lisp quotes and quoted symbols")
    (description
      "Minor mode proving highlight of Lisp quotes and quoted symbols.")
    (license #f)))

(define-public emacs-overseer
  (package
    (name "emacs-overseer")
    (version "20180226.619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/overseer.el.git")
               (commit "02d49f582e80e36b4334c9187801c5ecfb027789")))
        (sha256
          (base32 "0q4ai7ividy8xv09s342y49s97ismhfdfsjk70zif60fp0ajfzfn"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-pkg-info emacs-f))
    (home-page "http://www.github.com/tonini/overseer.el")
    (synopsis "Ert-runner Integration Into Emacs")
    (description "Ert-runner Integration Into Emacs.")
    (license #f)))

(define-public emacs-elisp-def
  (package
    (name "emacs-elisp-def")
    (version "20210126.750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/elisp-def.git")
               (commit "dfca043ec0cbead67bd9c526cb009daf771d0fa2")))
        (sha256
          (base32 "16ryl9idrfpf8whx7srd6a0b3j50qhvc8brkk7iq42p7srr79ly0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-f emacs-s))
    (home-page "unspecified")
    (synopsis "macro-aware go-to-definition for elisp")
    (description
      "Find the definition of the symbol at point, intelligently.  Understands
namespaces, macros, libraries and local bindings.

See full docs at https://github.com/Wilfred/elisp-def")
    (license #f)))

(define-public emacs-flycheck-cask
  (package
    (name "emacs-flycheck-cask")
    (version "20200926.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-cask.git")
               (commit "4b2ede6362ded4a45678dfbef1876faa42edbd58")))
        (sha256
          (base32 "0fzcknz2gicpx5rqf8qdxiy1g2kppy2qzsgszxm28mbahf0913bb"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-flycheck emacs-dash))
    (home-page "https://github.com/flycheck/flycheck-cask")
    (synopsis "Cask support in Flycheck")
    (description
      "Add Cask support for Flycheck.

Configure Flycheck to initialize packages from Cask in Cask projects.

;; Setup

(add-hook 'flycheck-mode-hook #'flycheck-cask-setup)")
    (license #f)))

(define-public emacs-js2-refactor
  (package
    (name "emacs-js2-refactor")
    (version "20210306.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/js-emacs/js2-refactor.el.git")
               (commit "a0977c4ce1918cc266db9d6cd7a2ab63f3a76b9a")))
        (sha256
          (base32 "0pjadcb5i8g8wkaf4hvh270r5z3qcsksnpcq5gzacqbgz5j2qcaf"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-s
            emacs-multiple-cursors
            emacs-dash
            emacs-s
            emacs-yasnippet))
    (home-page "unspecified")
    (synopsis "A JavaScript refactoring library for emacs.")
    (description
      "This is a collection of small refactoring functions to further the idea of a
JavaScript IDE in Emacs that started with js2-mode.

## Installation

Start by installing the dependencies:

 ,* js2-mode https://github.com/mooz/js2-mode/  * dash
https://github.com/magnars/dash.el  * multiple-cursors
https://github.com/magnars/multiple-cursors.el

It is also recommended to get
[expand-region](https://github.com/magnars/expand-region.el) to more easily mark
vars, method calls and functions for refactorings.

Then add this to your Emacs settings:

    (require 'js2-refactor)     (add-hook 'js2-mode-hook #'js2-refactor-mode)
 (js2r-add-keybindings-with-prefix \"C-c C-m\")

Note: I am working on a smoother installation path through package.el, but I
haven't had the time to whip this project into that sort of structure - yet.

## Usage

All refactorings start with `C-c C-m` and then a two-letter mnemonic shortcut.

 ,* `ee` is `expand-node-at-point`: Expand bracketed list according to node type
at point (array, object, function, call args).   * `cc` is
`contract-node-at-point`: Contract bracketed list according to node type at
point (array, object, function, call args).   * `ef` is `extract-function`:
Extracts the marked expressions out into a new named function.   * `em` is
`extract-method`: Extracts the marked expressions out into a new named method in
an object literal.   * `tf` is `toggle-function-expression-and-declaration`:
Toggle between function name() {} and var name = function ();  * `ta` is
`toggle-arrow-function-and-expression`: Toggle between function expression to
arrow function.   * `ts` is `toggle-function-async`: Toggle between an async and
a regular function.   * `ip` is `introduce-parameter`: Changes the marked
expression to a parameter in a local function.   * `lp` is `localize-parameter`:
Changes a parameter to a local var in a local function.   * `wi` is
`wrap-buffer-in-iife`: Wraps the entire buffer in an immediately invoked
function expression  * `ig` is `inject-global-in-iife`: Creates a shortcut for a
marked global by injecting it in the wrapping immediately invoked function
expression  * `ag` is `add-to-globals-annotation`: Creates a `/*global */`
annotation if it is missing, and adds the var at point to it.   * `ev` is
`extract-var`: Takes a marked expression and replaces it with a var.   * `el` is
`extract-var`: Takes a marked expression and replaces it with a let.   * `ec` is
`extract-var`: Takes a marked expression and replaces it with a const.   * `iv`
is `inline-var`: Replaces all instances of a variable with its initial value.
,* `rv` is `rename-var`: Renames the variable on point and all occurrences in its
lexical scope.   * `vt` is `var-to-this`: Changes local `var a` to be `this.a`
instead.   * `ao` is `arguments-to-object`: Replaces arguments to a function
call with an object literal of named arguments.   * `3i` is `ternary-to-if`:
Converts ternary operator to if-statement.   * `sv` is `split-var-declaration`:
Splits a `var` with multiple vars declared, into several `var` statements.   *
`ss` is `split-string`: Splits a `string`.   * `st` is `string-to-template`:
Converts a `string` into a template string.   * `uw` is `unwrap`: Replaces the
parent statement with the selected region.   * `lt` is `log-this`: Adds a
console.log() statement for what is at point (or region).  With a prefix
argument, use JSON pretty-printing.   * `dt` is `debug-this`: Adds a debug()
statement for what is at point (or region).   * `sl` is `forward-slurp`: Moves
the next statement into current function, if-statement, for-loop or while-loop.
,* `ba` is `forward-barf`: Moves the last child out of current function,
if-statement, for-loop or while-loop.   * `k` is `kill`: Kills to the end of the
line, but does not cross semantic boundaries.

There are also some minor conveniences bundled:

 ,* `C-S-down` and `C-S-up` moves the current line up or down.  If the line is an
  element in an object or array literal, it makes sure that the commas are
still correctly placed.   * `k` `kill-line`: Like `kill-line` but respecting the
AST.

## Todo

A list of some wanted improvements for the current refactorings.

 ,* expand- and contract-array: should work recursively with nested object
literals and nested arrays.   * expand- and contract-function: should deal
better with nested object literals, array declarations, and statements
terminated only by EOLs (without semicolons).   * wrap-buffer-in-iife: should
skip comments and namespace initializations at buffer start.   *
extract-variable: could end with a query-replace of the expression in its scope.

## Contributions

,* [Matt Briggs](https://github.com/mbriggs) contributed
`js2r-add-to-globals-annotation` * [Alex
Chamberlain](https://github.com/apchamberlain) contributed contracting and
expanding arrays and functions.  * [Nicolas
Petton](https://github.com/NicolasPetton) contributed `js2r-kill` Thanks!

## Contribute

This project is still in its infancy, and everything isn't quite sorted out yet.
 If you're eager to contribute, please add an issue here on github and we can
discuss your changes a little before diving into the elisp :-).

To fetch the test dependencies:

    $ cd /path/to/multiple-cursors     $ git submodule init     $ git submodule
update

Run the tests with:

    $ ./util/ecukes/ecukes features")
    (license #f)))

(define-public emacs-xref-js2
  (package
    (name "emacs-xref-js2")
    (version "20210310.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/js-emacs/xref-js2.git")
               (commit "fd6b723e7f1f9793d189a815e1904364dc026b03")))
        (sha256
          (base32 "0iny4qswyicrax36d4sgyfrw3giwjd1440bmlksd36y8zjkqqym0"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page "https://github.com/NicolasPetton/xref-js2")
    (synopsis "Jump to references/definitions using ag & js2-mode's AST")
    (description
      " xref-js2 adds an xref backend for JavaScript files.

Instead of using a tag system, it relies on `ag' to query the codebase of a
project.  This might sound crazy at first, but it turns out that `ag' is so fast
that jumping using xref-js2 is most of the time instantaneous, even on fairly
large JavaScript codebase (it successfully works with 50k lines of JS code).

Because line by line regexp search has its downside, xref-js2 does a second pass
on result candidates and eliminates possible false positives using `js2-mode''s
AST, thus giving very accurate results.")
    (license #f)))

(define-public emacs-markdown-toc
  (package
    (name "emacs-markdown-toc")
    (version "20210905.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ardumont/markdown-toc.git")
               (commit "3d724e518a897343b5ede0b976d6fb46c46bcc01")))
        (sha256
          (base32 "01l48njg0x7gkssvw9nv3yq97866r945izbggx9y3z5ckr1w4hlc"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-s emacs-dash emacs-markdown-mode))
    (home-page "http://github.com/ardumont/markdown-toc")
    (synopsis "A simple TOC generator for markdown file")
    (description
      "Generate a TOC from a markdown file: M-x markdown-toc-generate-toc This will
compute the TOC at insert it at current position.  Update existing TOC: C-u M-x
markdown-toc-generate-toc

Here is a possible output: <!-- markdown-toc start - Don't edit this section.
Run M-x markdown-toc-refresh-toc --> **Table of Contents**

- [some markdown page title](#some-markdown-page-title) - [main
title](#main-title)     - [Sources](#sources)         - [Marmalade
(recommended)](#marmalade-recommended)         - [Melpa-stable](#melpa-stable)
      - [Melpa (~snapshot)](#melpa-~snapshot)     - [Install](#install)
- [Load org-trello](#load-org-trello)     - [Alternative](#alternative)
- [Git](#git)         - [Tar](#tar) - [another title](#another-title)     -
[with](#with)     - [some](#some) - [heading](#heading)

<!-- markdown-toc end -->

Install - M-x package-install RET markdown-toc RET")
    (license #f)))

(define-public emacs-nix-update
  (package
    (name "emacs-nix-update")
    (version "20190124.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/nix-update-el.git")
               (commit "fc6c39c2da3fcfa62f4796816c084a6389c8b6e7")))
        (sha256
          (base32 "01cpl4w49m5dfkx7l8g1q183s341iz6vkjv2q4fbx93avd7msjgi"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/jwiegley/nix-update-el")
    (synopsis "Update \"fetch\" blocks in .nix expressions")
    (description
      "Bind nix-update-fetch to a key (I use `C-.  u'), and then you can very easily
update the rev/sha of a fetchgit declaration.")
    (license #f)))

(define-public emacs-nixos-options
  (package
    (name "emacs-nixos-options")
    (version "20160209.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32 "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^nixos-options.el$") #:exclude '()))
    (home-page "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis "Interface for browsing and completing NixOS options.")
    (description
      "Useful functions for exploring the NixOS options.  Inspired by
https://nixos.org/nixos/options.html.")
    (license #f)))

(define-public emacs-company-nixos-options
  (package
    (name "emacs-company-nixos-options")
    (version "20160215.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32 "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-company emacs-nixos-options))
    (arguments '(#:include '("^company-nixos-options.el$") #:exclude '()))
    (home-page "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis "Company Backend for nixos-options")
    (description
      "Useful functions for exploring the NixOS options.  Inspired by
https://nixos.org/nixos/options.html.")
    (license #f)))

(define-public emacs-ox-clip
  (package
    (name "emacs-ox-clip")
    (version "20220117.1909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkitchin/ox-clip.git")
               (commit "ff117cf3c619eef12eccc0ccbfa3f11adb73ea68")))
        (sha256
          (base32 "0lwfpm5i5k1gaf0gmqjaxccisha4d7p6v8y9z9a510rc28a86vyb"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-org emacs-htmlize))
    (home-page "https://github.com/jkitchin/ox-clip")
    (synopsis "Cross-platform formatted copying for org-mode")
    (description
      " This module copies selected regions in org-mode as formatted text on the
clipboard that can be pasted into other applications.  When not in org-mode, the
htmlize library is used instead.

For Windows the html-clip-w32.py script will be installed.  It works pretty
well, but I noticed that the hyperlinks in the TOC to headings don't work, and
strike-through doesn't seem to work.  I have no idea how to fix either issue.

Mac OSX needs textutils and pbcopy, which should be part of the base install.

Linux needs a relatively modern xclip, preferrably a version of at least 0.12.
https://github.com/astrand/xclip

The main command is `ox-clip-formatted-copy' that should work across Windows,
Mac and Linux.  By default, it copies as html.

Note: Images/equations may not copy well in html.  Use
`ox-clip-image-to-clipboard' to copy the image or latex equation at point to the
clipboard as an image.  The default latex scale is too small for me, so the
default size for this is set to 3 in `ox-clip-default-latex-scale'.  This
overrides the settings in `org-format-latex-options'.")
    (license #f)))

(define-public emacs-org-cliplink
  (package
    (name "emacs-org-cliplink")
    (version "20201126.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/org-cliplink.git")
               (commit "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")))
        (sha256
          (base32 "1avyiw8vlv4n1r7zqvc6wjlsz7jl2pqaprzpm782gzp0c999pssl"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/rexim/org-cliplink")
    (synopsis "insert org-mode links from the clipboard")
    (description
      " A simple command that takes a URL from the clipboard and inserts an org-mode
link with a title of a page found by the URL into the current buffer

This code was a part of my Emacs config almost a year.  I decided to publish it
as a separate package in case someone needs this feature too.")
    (license #f)))

(define-public emacs-org-pdftools
  (package
    (name "emacs-org-pdftools")
    (version "20220320.301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fuxialexander/org-pdftools.git")
               (commit "967f48fb5038bba32915ee9da8dc4e8b10ba3376")))
        (sha256
          (base32 "0f47ww8r00b7lb1msybnmnqdhm9i2vwz5lrz9m9bn6gbh97mzhn8"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-org emacs-pdf-tools emacs-org-noter))
    (arguments '(#:include '("^org-pdftools.el$") #:exclude '()))
    (home-page "https://github.com/fuxialexander/org-pdftools")
    (synopsis "Support for links to documents in pdfview mode")
    (description
      "Add support for org links from pdftools buffers with more precise location
control.

https://github.com/fuxialexander/org-pdftools/")
    (license #f)))

(define-public emacs-orgit-forge
  (package
    (name "emacs-orgit-forge")
    (version "20220211.26")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/orgit-forge.git")
               (commit "36e57a0359992e02312f453b8086512e77beb150")))
        (sha256
          (base32 "0mrq7mrgvj5r0bmxa4365xycfwp6m42mdqi5l5pljr5xz6k3rnc4"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-forge emacs-magit emacs-org emacs-orgit))
    (home-page "https://github.com/magit/orgit-forge")
    (synopsis "Org links to Forge issue buffers")
    (description
      "This package defines the Org link typ `orgit-topic', which can be used to link
to Forge topic buffers.")
    (license #f)))

(define-public emacs-macrostep-geiser
  (package
    (name "emacs-macrostep-geiser")
    (version "20210717.801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbfalcon/macrostep-geiser.git")
               (commit "f6a2d5bb96ade4f23df557649af87ebd0cc45125")))
        (sha256
          (base32 "0dykvwcvg8n24z3fkx6rv3l1mhzmca4cxj0gsvvqsg9wp0az1fc7"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-macrostep emacs-geiser))
    (home-page "https://github.com/nbfalcon/macrostep-geiser")
    (synopsis "Macrostep for `geiser'")
    (description
      "This package provides `macrostep' support for `geiser' and `cider'.

To enable `macrostep' in `geiser-mode' buffer, execute `macrostep-geiser-setup'.
 The latter function can be added to `geiser-mode-hook' and
`geiser-repl-mode-hook':

(eval-after-load 'geiser-mode '(add-hook 'geiser-mode-hook
#'macrostep-geiser-setup)) (eval-after-load 'geiser-repl '(add-hook
'geiser-repl-mode-hook #'macrostep-geiser-setup))

Or, using `use-package':

(use-package macrostep-geiser   :after geiser-mode   :config (add-hook
'geiser-mode-hook #'macrostep-geiser-setup))

(use-package macrostep-geiser   :after geiser-repl   :config (add-hook
'geiser-repl-mode-hook #'macrostep-geiser-setup))

Additionally, for `cider' integration:

(eval-after-load 'cider-mode '(add-hook 'cider-mode-hook
#'macrostep-geiser-setup))

Or, using `use-package':

(use-package macrostep-geiser   :after cider-mode   :config (add-hook
'cider-mode-hook #'macrostep-geiser-setup))")
    (license #f)))

(define-public emacs-company-shell
  (package
    (name "emacs-company-shell")
    (version "20211013.1725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/company-shell.git")
               (commit "a77f4de75912aa87314cde92c603b831d5050246")))
        (sha256
          (base32 "1mh93l6xn9frfvw86vbvs1fz544c7ylja118iaccfl42gr2ypsw9"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-company emacs-dash))
    (arguments '(#:include '("^company-shell.el$") #:exclude '()))
    (home-page "https://github.com/Alexander-Miller/company-shell")
    (synopsis "Company mode backend for shell functions")
    (description
      "Backend for company mode to complete environment variables, binaries found on
your $PATH and fish shell functions.")
    (license #f)))

(define-public emacs-haml-mode
  (package
    (name "emacs-haml-mode")
    (version "20190219.2102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/haml-mode.git")
               (commit "bf5b6c11b1206759d2b28af48765e04882dd1fc4")))
        (sha256
          (base32 "1zh19b9az4ql87vjmjm0j7y6c4ir6w3rh0n4sxzqqpnv8xpd4b44"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nex3/haml-mode")
    (synopsis "Major mode for editing Haml files")
    (description
      "Because Haml's indentation schema is similar to that of YAML and Python, many
indentation-related functions are similar to those in yaml-mode and python-mode.

To install, save this on your load path and add the following to your .emacs
file:

(require 'haml-mode)")
    (license #f)))

(define-public emacs-pug-mode
  (package
    (name "emacs-pug-mode")
    (version "20211114.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-pug-mode.git")
               (commit "73f8c2f95eba695f701df20c8436f49abadebdc1")))
        (sha256
          (base32 "0kjjwyxdbaaagjd0zmav2xj4075c8qcs33x29zpyqfxwj4410gp3"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/hlissner/emacs-pug-mode")
    (synopsis "Major mode for jade/pug template files")
    (description
      " `pug-mode' offers Emacs support for Pug (http://jade-lang.com/) based off of
slim-mode.")
    (license #f)))

(define-public emacs-slim-mode
  (package
    (name "emacs-slim-mode")
    (version "20170728.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slim-template/emacs-slim.git")
               (commit "3636d18ab1c8b316eea71c4732eb44743e2ded87")))
        (sha256
          (base32 "1sqylm6ipmlh9249mmwfb16b4pv94cvzdwvi3zakdpz713phyjw5"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/slim-template/emacs-slim")
    (synopsis "Major mode for editing Slim files")
    (description
      "Because Slim's indentation schema is similar to that of YAML and Python, many
indentation-related functions are similar to those in yaml-mode and python-mode.

To install, save this on your load path and add the following to your .emacs
file:

\n(require 'slim-mode)")
    (license #f)))

(define-public emacs-web-completion-data
  (package
    (name "emacs-web-completion-data")
    (version "20160318.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/web-completion-data.git")
               (commit "c272c94e8a71b779c29653a532f619acad433a4f")))
        (sha256
          (base32 "19nzjgvd2i5745283ck3k2vylrr6lnk9h3ggzwrwdhyd3m9433vm"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^[^/]+.el$" "^html-stuff$") #:exclude '()))
    (home-page "https://github.com/osv/web-completion-data")
    (synopsis "Shared completion data for ac-html and company-web")
    (description
      "This is just dependency for ac-html, company-web

`web-completion-data-sources' is pair list of framework-name and directory of
completion data

This package provide default \"html\" completion data.

Completion data directory structure:

html-attributes-complete - attribute completion html-attributes-list -
attributes of tags-add-tables html-attributes-short-docs - attributes
documantation html-tag-short-docs  - tags documantation

If you decide extend with own completion data, let say \"Bootstrap\" data:

(unless (assoc \"Bootstrap\" web-completion-data-sources)   (setq
web-completion-data-sources         (cons (cons \"Bootstrap\"
\"/path/to/complete/data\")               web-completion-data-sources)))")
    (license #f)))

(define-public emacs-company-web
  (package
    (name "emacs-company-web")
    (version "20220115.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/company-web.git")
               (commit "863fb84b81ed283474e50330cd8d27b1ca0d74f1")))
        (sha256
          (base32 "0awl7b6p4vrxv0cy5xcxwihqzgk7kk6l7jsivyrj8s0f5jv2q71v"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-web-completion-data))
    (home-page "https://github.com/osv/company-web")
    (synopsis
      "Company version of ac-html, complete for web,html,emmet,jade,slim modes")
    (description
      "Same as ac-html, but for `company' completion framework.

Configuration:

  (add-to-list 'company-backends 'company-web-html)   (add-to-list
'company-backends 'company-web-jade)   (add-to-list 'company-backends
'company-web-slim)

or, for example, setup web-mode-hook:

  (define-key web-mode-map (kbd \"C-'\") 'company-web-html)   (add-hook
'web-mode-hook (lambda ()                             (set (make-local-variable
'company-backends) '(company-web-html company-files))
 (company-mode t)))

When you use `emmet-mode' (with `web-mode' and `html-mode') you may autocomplete
as well as regular html complete.

P.S: You may be interested in next packages:

`ac-html-bootstrap' - Twitter:Bootstrap completion data for company-web (and
ac-html as well) `ac-html-csswatcher' - Watch your project CSS/Less files for
classes and ids `ac-html-angular' - Angular 1.5 completion data;")
    (license #f)))

(define-public emacs-less-css-mode
  (package
    (name "emacs-less-css-mode")
    (version "20161001.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/less-css-mode.git")
               (commit "c7fa3d56d83206b28657f2e56439dc62280a2bf2")))
        (sha256
          (base32 "0nz2vhkpmishlx4gga6lljyjrz7lmnwj3vmvml9jykhiqgvnaf70"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/purcell/less-css-mode")
    (synopsis "Major mode for editing LESS CSS files (lesscss.org)")
    (description
      " This mode provides syntax highlighting for LESS CSS files, plus optional
support for compilation of .less files to .css files at the time they are saved:
use `less-css-compile-at-save' to enable this.

Command line utility \"lessc\" is required if setting `less-css-compile-at-save'
to t.  To install \"lessc\" using the Node.js package manager, run \"npm install
less\"

Also make sure the \"lessc\" executable is in Emacs' PATH, example: (setq
exec-path (cons (expand-file-name \"~/.gem/ruby/1.8/bin\") exec-path)) or
customize `less-css-lessc-command' to point to your \"lessc\" executable.

We target lessc >= 1.4.0, and thus use the `--no-color' flag by default.  You
may want to adjust `less-css-lessc-options' for compatibility with older
versions.

`less-css-mode' is derived from `css-mode', and indentation of nested blocks may
not work correctly with versions of `css-mode' other than that bundled with
recent Emacs.

You can specify per-file values for `less-css-compile-at-save',
`less-css-output-file-name' or `less-css-output-directory' using a variables
header at the top of your .less file, e.g.:

// -*- less-css-compile-at-save: t; less-css-output-directory: \"../css\" -*-

Alternatively, you can use directory local variables to set the default value of
`less-css-output-directory' for your project.

In the case of files which are included in other .less files, you may want to
trigger the compilation of a \"master\" .less file on save: you can accomplish
this with `less-css-input-file-name', which is probably best set using directory
local variables.

If you don't need CSS output but would like to be warned of any syntax errors in
your .less source, consider using `flymake-less':
https://github.com/purcell/flymake-less

; Credits

The original code for this mode was, in large part, written using Anton
Johansson's scss-mode as a template -- thanks Anton! https://github.com/antonj")
    (license #f)))

(define-public emacs-haml-mode
  (package
    (name "emacs-haml-mode")
    (version "20190219.2102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/haml-mode.git")
               (commit "bf5b6c11b1206759d2b28af48765e04882dd1fc4")))
        (sha256
          (base32 "1zh19b9az4ql87vjmjm0j7y6c4ir6w3rh0n4sxzqqpnv8xpd4b44"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/nex3/haml-mode")
    (synopsis "Major mode for editing Haml files")
    (description
      "Because Haml's indentation schema is similar to that of YAML and Python, many
indentation-related functions are similar to those in yaml-mode and python-mode.

To install, save this on your load path and add the following to your .emacs
file:

(require 'haml-mode)")
    (license #f)))

(define-public emacs-sass-mode
  (package
    (name "emacs-sass-mode")
    (version "20190502.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/sass-mode.git")
               (commit "247a0d4b509f10b28e4687cd8763492bca03599b")))
        (sha256
          (base32 "1nhk12lhvkwdk8s8fx33p6rssi0gcfx2zkanq23rz6k28v5zi5yp"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-haml-mode))
    (home-page "http://github.com/nex3/haml/tree/master")
    (synopsis "Major mode for editing Sass files")
    (description
      "Because Sass's indentation schema is similar to that of YAML and Python, many
indentation-related functions are similar to those in yaml-mode and python-mode.

To install, save this on your load path and add the following to your .emacs
file:

(require 'sass-mode)

sass-mode requires haml-mode, which can be found at
http://github.com/nex3/haml-mode.")
    (license #f)))

(define-public emacs-stylus-mode
  (package
    (name "emacs-stylus-mode")
    (version "20211019.2113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32 "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^stylus-mode.el$") #:exclude '()))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "Major mode for editing .styl files")
    (description
      "Major mode for the Stylus templating language (https://stylus-lang.com/).")
    (license #f)))

(define-public emacs-sws-mode
  (package
    (name "emacs-sws-mode")
    (version "20210908.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32 "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^sws-mode.el$") #:exclude '()))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "(S)ignificant (W)hite(S)pace mode")
    (description "Common code for the jade-mode and stylus-mode.")
    (license #f)))

(define-public emacs-calfw-org
  (package
    (name "emacs-calfw-org")
    (version "20160303.258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32 "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^calfw-org.el$") #:exclude '()))
    (home-page "unspecified")
    (synopsis "calendar view for org-agenda")
    (description
      "Display org-agenda items in the calfw buffer.  (Because I don't use the
org-agenda mainly, I hope someone continue integration with the org.)

(require 'calfw-org)

;; use org agenda buffer style keybinding.  ;; (setq
cfw:org-overwrite-default-keybinding t)

M-x cfw:open-org-calendar")
    (license #f)))

(define-public emacs-calfw-cal
  (package
    (name "emacs-calfw-cal")
    (version "20170320.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32 "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^calfw-cal.el$") #:exclude '()))
    (home-page "unspecified")
    (synopsis "calendar view for emacs diary")
    (description
      "Display diary items in the calfw buffer.

(require 'calfw-cal)

M-x cfw:open-diary-calendar

Key binding i : insert an entry on the date RET or Click : jump to the entry q :
kill-buffer


Thanks for furieux's initial code.")
    (license #f)))

(define-public emacs-calfw-ical
  (package
    (name "emacs-calfw-ical")
    (version "20150703.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32 "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^calfw-ical.el$") #:exclude '()))
    (home-page "unspecified")
    (synopsis "calendar view for ical format")
    (description
      "This package provides a bridge from ical to calfw.  The API and interfaces have
not been confirmed yet.

; Installation:

Here is a minimum sample code: (require 'calfw-ical) To open a calendar buffer,
execute the following function.  (cfw:open-ical-calendar
\"http://www.google.com/calendar/ical/.../basic.ics\")

Executing the following command, this program clears caches to refresh the ICS
data.  (cfw:ical-data-cache-clear-all)")
    (license #f)))

(define-public emacs-request-deferred
  (package
    (name "emacs-request-deferred")
    (version "20210214.37")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-request.git")
               (commit "c769cf33f2ac0a1a9798b508935c4b260e856ab5")))
        (sha256
          (base32 "0dqcg1dlzirmgsgg8ar2csn5mnlpr64y6n5skrqc6wcshzyzp038"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-deferred emacs-request))
    (arguments '(#:include '("^request-deferred.el$") #:exclude '()))
    (home-page "https://github.com/tkf/emacs-request")
    (synopsis "Wrap request.el by deferred")
    (description
      "Trivial wrapper to request library returing kiwanami deferred object.")
    (license #f)))

(define-public emacs-org-gcal
  (package
    (name "emacs-org-gcal")
    (version "20220324.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/org-gcal.el.git")
               (commit "554c48fb57dc46877202028019197b0699961ca0")))
        (sha256
          (base32 "1l48dgzwwh230l5kxd17jdmjwhbkaqzmj95znxzhs9jrfm7jixyb"))))
    (build-system emacs-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-request-deferred
            emacs-alert
            emacs-persist
            emacs-org))
    (home-page "https://github.com/kidd/org-gcal.el")
    (synopsis "Org sync with Google Calendar")
    (description
      " Put the org-gcal.el to your load-path.  Add to .emacs: (require 'org-gcal)")
    (license #f)))

(define-public emacs-drag-stuff
  (package
    (name "emacs-drag-stuff")
    (version "20161108.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/drag-stuff.el.git")
               (commit "6d06d846cd37c052d79acd0f372c13006aa7e7c8")))
        (sha256
          (base32 "1fsj88n1j50cxjzx62khzxrajsvf33si8iwgbaz6z7z8pwh91qcd"))))
    (build-system emacs-build-system)
    (home-page "http://github.com/rejeep/drag-stuff")
    (synopsis "Drag stuff (lines, words, region, etc...) around")
    (description
      "drag-stuff is a minor mode for dragging stuff around in Emacs.  You can drag
lines, words and region.

To use drag-stuff, make sure that this file is in Emacs load-path (add-to-list
'load-path \"/path/to/directory/or/file\")

Then require drag-stuff (require 'drag-stuff)

To start drag-stuff (drag-stuff-mode t) or M-x drag-stuff-mode

drag-stuff is buffer local, so hook it up (add-hook 'ruby-mode-hook
'drag-stuff-mode)

Or use the global mode to activate it in all buffers.  (drag-stuff-global-mode
t)

Drag Stuff stores a list (`drag-stuff-except-modes') of modes in which
`drag-stuff-mode' should not be activated in (note, only if you use the global
mode) because of conflicting use.

You can add new except modes:   (add-to-list 'drag-stuff-except-modes
'conflicting-mode)

Default modifier key is the meta-key.  This can be changed and is controlled by
the variable `drag-stuff-modifier'.

Control key as modifier:   (setq drag-stuff-modifier 'control)

Meta and Shift keys as modifier:   (setq drag-stuff-modifier '(meta shift))")
    (license #f)))

(define-public emacs-i3wm-config-mode
  (package
    (name "emacs-i3wm-config-mode")
    (version "20201105.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/i3wm-Config-Mode.git")
               (commit "c70bdc1367e461299e13a4797bc9d9d950184edd")))
        (sha256
          (base32 "1kpnm7ph0ydm0h5jxwff316yy4aff6ml9x7f4z5zgm4wmgn0bxc5"))))
    (build-system emacs-build-system)
    (home-page "https://github.com/Alexander-Miller/i3wm-Config-Mode")
    (synopsis "Better syntax highlighting for i3wm's config file")
    (description
      "Better syntax highlighting for i3wm's config.  Everything else is inherited from
`conf-space-mode.'")
    (license #f)))

(define-public emacs-0x0
  (package
    (name "emacs-0x0")
    (version "20210701.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/willvaughn/emacs-0x0.git")
               (commit "63cd5eccc85e527f28e1acc89502a53245000428")))
        (sha256
          (base32 "1cd0drlhi0lf1vmarcfl3vc7ldkymaj50dhqb1ajm7r0s5ps3asb"))))
    (build-system emacs-build-system)
    (home-page "https://gitlab.com/willvaughn/emacs-0x0")
    (synopsis "Upload sharing to 0x0.st")
    (description
      " Integration with https://0x0.st, envs.sh, ttm.sh, and self-hosted services

Upload whatever you need to a pastebin server.  The commands
`0x0-upload-file',`0x0-upload-text' and `0x0-upload-kill-ring', which
respectively upload (parts of) the current buffer, a file on your disk and a
string from the minibuffer can be used too.

The default host and the host this package is named after is https://0x0.st.
Consider donating to https://liberapay.com/mia/donate if you like the service.")
    (license #f)))
#+end_src
******** additional from straight build cache
#+begin_src scheme
(define-public emacs-bind-key
  (package
    (name "emacs-bind-key")
    (version "20210210.1609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit "a7422fb8ab1baee19adb2717b5b47b9c3812a84c")))
        (sha256
          (base32 "1zz2gg475254hbbxw4y82b2m2iy8cvx0phh030daax315hdbsaqb"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^bind-key.el$") #:exclude '()))
    (home-page "https://github.com/jwiegley/use-package")
    (synopsis "A simple way to manage personal keybindings")
    (description
      "If you have lots of keybindings set in your .emacs file, it can be hard to know
which ones you haven't set yet, and which may now be overriding some new default
in a new emacs version.  This module aims to solve that problem.

Bind keys as follows in your .emacs:

  (require 'bind-key)

  (bind-key \"C-c x\" 'my-ctrl-c-x-command)

If the keybinding argument is a vector, it is passed straight to `define-key',
so remapping a key with `[remap COMMAND]' works as expected:

  (bind-key [remap original-ctrl-c-x-command] 'my-ctrl-c-x-command)

If you want the keybinding to override all minor modes that may also bind the
same key, use the `bind-key*' form:

  (bind-key* \"<C-return>\" 'other-window)

If you want to rebind a key only in a particular keymap, use:

  (bind-key \"C-c x\" 'my-ctrl-c-x-command some-other-mode-map)

To unbind a key within a keymap (for example, to stop your favorite major mode
from changing a binding that you don't want to override everywhere), use\n`unbind-key':

  (unbind-key \"C-c x\" some-other-mode-map)

To bind multiple keys at once, or set up a prefix map, a `bind-keys' macro is
provided.  It accepts keyword arguments, please see its documentation for a
detailed description.

To add keys into a specific map, use :map argument

   (bind-keys :map dired-mode-map               (\"o\" .  dired-omit-mode)
      (\"a\" .  some-custom-dired-function))

To set up a prefix map, use `:prefix-map' and `:prefix' arguments (both are
required)

   (bind-keys :prefix-map my-customize-prefix-map               :prefix \"C-c c\"
             (\"f\" .  customize-face)               (\"v\" .  customize-variable))

You can combine all the keywords together.  Additionally, `:prefix-docstring'
can be specified to set documentation of created `:prefix-map' variable.

To bind multiple keys in a `bind-key*' way (to be sure that your bindings will
not be overridden by other modes), you may use `bind-keys*' macro:

   (bind-keys*     (\"C-o\" .  other-window)     (\"C-M-n\" .  forward-page)
(\"C-M-p\" .  backward-page))

After Emacs loads, you can see a summary of all your personal keybindings
currently in effect with this command:

  M-x describe-personal-keybindings

This display will tell you if you've overridden a default keybinding, and what
the default was.  Also, it will tell you if the key was rebound after your
binding it with `bind-key', and what it was rebound it to.")
    (license #f)))

(define-public emacs-lv
  (package
    (name "emacs-lv")
    (version "20200507.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/hydra.git")
               (commit "9e9e00cb240ea1903ffd36a54956b3902c379d29")))
        (sha256
          (base32 "11xlhm098gi6fnksnykciwdx5a46xmxwx9y8r6kjpb92vpjfak80"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^lv.el$") #:exclude '()))
    (home-page "unspecified")
    (synopsis "Other echo area")
    (description
      " This package provides `lv-message' intended to be used in place of `message'
when semi-permanent hints are needed, in order to not interfere with Echo Area.

   \"Я тихо-тихо пiдглядаю,     І тiшуся собi, як бачу то,     Шо страшить i не
пiдпускає,     А iншi п’ють тебе, як воду пiсок.\"     --  Андрій Кузьменко, L.V.")
    (license #f)))

(define-public emacs-cfrs
  (package
    (name "emacs-cfrs")
    (version "20220129.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/cfrs.git")
               (commit "f3a21f237b2a54e6b9f8a420a9da42b4f0a63121")))
        (sha256
          (base32 "1vf5zm82sx3m1yvq73km8ajapv6rnz41b1jrsif7kh0ijh9vk3qi"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash emacs-s emacs-posframe))
    (home-page "https://github.com/Alexander-Miller/cfrs")
    (synopsis "Child-frame based read-string")
    (description
      "; Simple implementation of reading a string with child-frames.  ; Synchronous
control is maintained by using `recursive-edit'.  When finished ; the entered
text is read from the input buffer and the child-frame is ; hidden.")
    (license #f)))

(define-public emacs-magit-section
  (package
    (name "emacs-magit-section")
    (version "20220329.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit "d1ad778280f651f0ab87ce191784b96b3ebe312a")))
        (sha256
          (base32 "0x09i80rrf2gji0igqvjirgdmpxfzfcaynfydbhdzrf56a6syzn5"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:include
        '("^lisp/magit-section.el$"
          "^lisp/magit-section-pkg.el$"
          "^docs/magit-section.texi$"
          "^Documentation/magit-section.texi$")
        #:exclude
        '()))
    (home-page "https://github.com/magit/magit")
    (synopsis "Sections for read-only buffers")
    (description
      "This package implements the main user interface of Magit — the collapsible
sections that make up its buffers.  This package used to be distributed as part
of Magit but now it can also be used by other packages that have nothing to do
with Magit or Git.")
    (license #f)))

(define-public emacs-emacsql-sqlite
  (package
    (name "emacs-emacsql-sqlite")
    (version "20220218.1543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacsql.git")
               (commit "374726060d74df0e2bcb9d0355ff41e2c400ed30")))
        (sha256
          (base32 "0z382qksrwhkv0ayjp8nays65c3xwd4kylj41k1pc3nnqg6b2k45"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments '(#:include '("^emacsql-sqlite.el$" "^sqlite$") #:exclude '()))
    (home-page "https://github.com/skeeto/emacsql")
    (synopsis "EmacSQL back-end for SQLite")
    (description
      "During package installation EmacSQL will attempt to compile a custom native
binary for communicating with a SQLite database.")
    (license #f)))
#+end_src
******** added myself
#+begin_src scheme
(define-public emacs-ligature
  (let ((commit "9357156a917a021a87b33ee391567a5d8e44794a")
        (revision "0"))
    (package
      (name "emacs-ligature")
      (version (git-version "1.0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://www.github.com/mickeynp/ligature.el")
               (commit commit)))
         (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
      (build-system emacs-build-system)
      (home-page "https://www.github.com/mickeynp/ligature.el")
      (synopsis "This package maps ordinary graphemes (characters) to fancy ligatures")
      (description "With this package you can control where Emacs must display
ligatures. That is useful if you only want a subset of the ligatures in certain
major modes, for instance, or if you want to ensure that some modes have no
ligatures at all.")
      (license license:gpl3+))))

;; No license, assumed nonfree.
(define-public emacs-evil-quick-diff
  (let ((commit "69c883720b30a892c63bc89f49d4f0e8b8028908")
        (revision "0"))
    (package
      (name "emacs-evil-quick-diff")
      (version (git-version "0.0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/rgrinberg/evil-quick-diff")
               (commit commit)))
         (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-evil))
      (home-page "https://github.com/rgrinberg/evil-quick-diff")
      (synopsis "Port of @code{linediff.vim}")
      (description "This is a replacement for the @code{linediff.vim} plugin.
It's not a faithful port, as it uses ediff for diffing, but the spirit is the
same. The implementation itself is heavily based on @code{evil-exchange}.")
      (license #f))))

;; No license, assumed nonfree.
(define-public emacs-org-yt
  (let ((commit "40cc1ac76d741055cbefa13860d9f070a7ade001")
        (revision "0"))
    (package
      (name "emacs-org-yt")
      (version (git-version "0" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/TobiasZawada/org-yt")
               (commit commit)))
         (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
      (build-system emacs-build-system)
      (propagated-inputs
       (list emacs-org))
      (home-page "https://github.com/TobiasZawada/org-yt")
      (synopsis "Youtube links in org-mode")
      (description "Idea from @url{https://emacs.stackexchange.com/questions/38098/org-mode-custom-youtube-link-syntax}")
      (license #f))))

;; No license, assumed nonfree.
(define-public emacs-guix-packaging
  (let ((commit "5bbd1f1a268b3dfd813a75125ca88cbf0bef6529")
        (revision "0"))
    (package
      (name "emacs-guix-packaging")
      (version (git-version "1.5" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/ryanprior/emacs-guix-packaging")
               (commit commit)))
         (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
      (build-system emacs-build-system)
      (arguments
       '(#:include (cons* "^snippets\\/" %default-include)))
      (propagated-inputs
       (list emacs-dash
             emacs-yasnippet))
      (home-page "https://github.com/ryanprior/emacs-guix-packaging")
      (synopsis "Tools to create and maintain Guix packages quickly and with confidence")
      (description "Writing and maintaining Guix packages in Emacs should be a
breeze. The information you need should be ready at your fingertips and any
chores or guesswork that can be reasonably automated should be. In particular,
maintainers of Emacs packages in Guix should be able to complete the entire cycle
of package creation, testing, installation, updates, maintenance and discovery
within Emacs.")
      (license #f))))

(define-public emacs-app-launcher
  (let ((commit "80a9ed37892ee6e21fe44487ed11f66a15e3f440")
        (revision "0"))
    (package
      (name "emacs-app-launcher")
      (version (git-version "0.1" revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url "https://github.com/SebastienWae/app-launcher")
               (commit commit)))
         (sha256
          (base32 "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
      (build-system emacs-build-system)
      (home-page "https://github.com/SebastienWae/app-launcher")
      (synopsis "Use the Emacs standard completion feature to select an
application installed on your machine and launch it")
      (description synopsis)
      (license license:gpl3+))))
#+end_src
******* all-the-icons fonts :package:version:
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "fonts.scm")
:END:
#+begin_src scheme
(define-module (ebullient home fonts)
  #:use-module (guix build-system font)
  #:use-module (guix git-download)
  #:use-module (guix packages)
  #:use-module ((gnu packages emacs-xyz) #:select (emacs-all-the-icons))
  #:use-module ((gnu packages fonts) #:select (font-awesome font-google-material-design-icons) #:prefix fonts:)
  #:use-module (mendicant utils))

(define-public all-the-icons-fonts
  (let ((base-pkg emacs-all-the-icons)
        (commit "2c963ebb75f211d2f7ac3d2db5f4a9ee2f3e27da")
        (revision "0"))
    (package
      (name "all-the-icons-fonts")
      (version (git-version (package-version base-pkg) revision commit))
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url (-> base-pkg package-source origin-uri git-reference-url))
               (commit commit)))
         (sha256
          (base32
           "1gn5nyyhrvz8w1y5m8lg2khwfir0czjizmdzinr70gd7n8g1xqk9"))
         (file-name (git-file-name name version))))
      (build-system font-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (add-before 'install 'remove-unbundled-fonts
             (lambda _
               (with-directory-excursion "fonts"
                 (for-each delete-file
                           (list "fontawesome.ttf"
                                 "material-design-icons.ttf"))))))))
      (propagated-inputs
       (list font-awesome
             fonts:font-google-material-design-icons))
      (home-page (package-home-page base-pkg))
      (synopsis (package-synopsis base-pkg))
      (description (package-description base-pkg))
      (license (package-license base-pkg)))))
#+end_src
******** Font Awesome :package:version:
#+begin_src scheme
(define-public font-awesome
  (let ((base-pkg fonts:font-awesome))
    (package (inherit base-pkg)
      (version "6.0.0")
      (source (origin
                (method git-fetch)
                (uri (git-reference
                      (url (-> base-pkg package-source origin-uri git-reference-url))
                      (commit version)))
                (file-name (git-file-name (package-name base-pkg) version))
                (sha256
                 (base32
                  "1zc4dzzcqg0xmykb4bbzcz4dxzr369k9lcx34s8yny0iakxg1xb8"))))
      (build-system font-build-system)
      (arguments '()))))
#+end_src
******* Patches
******** Change paths
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "change-paths.patch")
:END:
********* Core
#+begin_src diff
diff --git a/core/core.el b/core/core.el
index 493e9c0e6..344111bde 100644
--- a/core/core.el
+++ b/core/core.el
@@ -76,7 +76,9 @@ envvar will enable this at startup.")
 (defconst doom-local-dir
   (if-let (localdir (getenv-internal "DOOMLOCALDIR"))
       (expand-file-name (file-name-as-directory localdir))
-    (concat doom-emacs-dir ".local/"))
+    (expand-file-name "doom-local/"
+                      (or (getenv-internal "XDG_STATE_HOME")
+                          "~/.local/state")))
   "Root directory for local storage.
 
 Use this as a storage location for this system's installation of Doom Emacs.
@@ -84,13 +86,20 @@ Use this as a storage location for this system's installation of Doom Emacs.
 These files should not be shared across systems. By default, it is used by
 `doom-etc-dir' and `doom-cache-dir'. Must end with a slash.")
 
-(defconst doom-etc-dir (concat doom-local-dir "etc/")
+(defconst doom-state-dir
+  (if-let (localdir (getenv-internal "DOOMLOCALDIR"))
+      (concat (expand-file-name (file-name-as-directory localdir)) "state/")
+    (expand-file-name "doom/"
+                      (or (getenv-internal "XDG_STATE_HOME")
+                          "~/.local/state"))))
+
+(defconst doom-etc-dir (concat doom-state-dir "etc/")
   "Directory for non-volatile local storage.
 
 Use this for files that don't change much, like server binaries, external
 dependencies or long-term shared data. Must end with a slash.")
 
-(defconst doom-cache-dir (concat doom-local-dir "cache/")
+(defconst doom-cache-dir (concat doom-state-dir "cache/")
   "Directory for volatile local storage.
 
 Use this for files that change often, like cache files. Must end with a slash.")
@@ -167,7 +176,7 @@ users).")
 (when NATIVECOMP
   ;; Don't store eln files in ~/.emacs.d/eln-cache (they are likely to be purged
   ;; when upgrading Doom).
-  (add-to-list 'native-comp-eln-load-path (concat doom-cache-dir "eln/"))
+  (add-to-list 'native-comp-eln-load-path (concat doom-local-dir "eln/"))
 
   (with-eval-after-load 'comp
     ;; HACK Disable native-compilation for some troublesome packages
@@ -183,7 +192,7 @@ users).")
 
 ;; We avoid `no-littering' because it's a mote too opinionated for our needs.
 (setq async-byte-compile-log-file  (concat doom-etc-dir "async-bytecomp.log")
-      custom-file                  (concat doom-private-dir "custom.el")
+      custom-file                  (concat doom-state-dir "custom.el")
       desktop-dirname              (concat doom-etc-dir "desktop")
       desktop-base-file-name       "autosave"
       desktop-base-lock-name       "autosave-lock"
#+end_src
********* RSS module
#+begin_src diff
diff --git a/modules/app/rss/config.el b/modules/app/rss/config.el
index a8078d18f..075a5c8a7 100644
--- a/modules/app/rss/config.el
+++ b/modules/app/rss/config.el
@@ -20,8 +20,8 @@ easier to scroll through.")
 (use-package! elfeed
   :commands elfeed
   :init
-  (setq elfeed-db-directory (concat doom-local-dir "elfeed/db/")
-        elfeed-enclosure-default-dir (concat doom-local-dir "elfeed/enclosures/"))
+  (setq elfeed-db-directory (concat doom-cache-dir "elfeed/db/")
+        elfeed-enclosure-default-dir (concat doom-cache-dir "elfeed/enclosures/"))
   :config
   (setq elfeed-search-filter "@2-week-ago "
         elfeed-show-entry-switch #'pop-to-buffer
#+end_src
******** Ligatures
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "ligatures.patch")
:END:
Taken from this as-yet unmerged pull request: [[https://github.com/hlissner/doom-emacs/pull/5082][hlissner/doom-emacs#5082 feat(:ui ligatures): use ligature.el for Emacs28+ by...]]
********* README
#+begin_src diff
diff --git a/modules/ui/ligatures/README.org b/modules/ui/ligatures/README.org
index 66d969ff1..ed486dbf6 100644
--- a/modules/ui/ligatures/README.org
+++ b/modules/ui/ligatures/README.org
@@ -16,8 +16,10 @@
   - [[#mathematical-symbols-replacement][Mathematical symbols replacement]]
   - [[#coding-ligatures][Coding ligatures]]
 - [[#configuration][Configuration]]
-  - [[#setting-ligatures][Setting ligatures]]
-  - [[#changing-ligatures][Changing ligatures]]
+  - [[#setting-symbol-replacements][Setting symbol replacements]]
+  - [[#changing-symbol-replacements][Changing symbol replacements]]
+  - [[#setting-ligatures-for-specific-font-or-major-mode][Setting ligatures for specific font or major mode]]
+    - [[#overwriting-all-default-ligatures][Overwriting all default ligatures]]
 - [[#troubleshooting][Troubleshooting]]
 
 ,* Description
@@ -53,7 +55,7 @@ Harfbuzz support (which can compose ligatures natively), or b) Mitsuharu's
 ,#+end_quote
 
 ,** Plugins
-This module installs no packages.
+- [[https://github.com/mickeynp/ligature.el][ligature.el]] (on Emacs 28+ with Harfbuzz)
 
 ,* Prerequisites
 This module requires one of three setups for ligatures to work:
@@ -103,9 +105,9 @@ Even though harfbuzz has been included in emacs 27, there is currently a [[https
 emacs 27.
 
 ,* Configuration
-** Setting ligatures
-If you want to set ligatures for modules that don't have them by default you can
-use the ~set-ligatures!~ macro in your config el file
+** Setting symbol replacements
+If you want to set symbol replacements for modules that don't have them by
+default you can use the ~set-ligatures!~ macro in your config el file
 ,#+BEGIN_SRC emacs-lisp
 (after! PACKAGE
   (set-ligatures! 'MAJOR-MODE
@@ -167,7 +169,7 @@ If you have multiple versions of the same keyword you can set the symbol twice
   :null "none"
   :null "None")
 ,#+END_SRC
-** Changing ligatures
+** Changing symbol replacements
 if you don't like the symbols chosen you can change them by using...
 
 ,#+BEGIN_SRC emacs-lisp
@@ -212,5 +214,53 @@ if you don't like the symbols chosen you can change them by using...
   :dot           "•")  ;; you could also add your own if you want
 ,#+END_SRC
 
+** Setting ligatures for specific font or major mode
+#+begin_quote
+You need Emacs 28+ with (MacOS or Harfbuzz) for EmacsLisp in this section to work.
+#+end_quote
+
+As the [[https://github.com/mickeynp/ligature.el][README]] for ligature.el states, you can manipulate the ligatures that you
+want to enable, specific for your font, or specific for the major modes that you
+want to use.
+
+#+begin_src elisp
+(after! ligature
+  (ligature-set-ligatures '(haskell-mode clojure-mode) '(">>=")))
+
+;; Alternatively
+(set-ligatures! '(haskell-mode clojure-mode)
+  :font-ligatures '(">>="))
+#+end_src
+
+This call will:
+- overwrite all preceding calls to =ligature-set-ligatures= or =set-ligatures!=
+  for =haskell-mode= and =clojure-mode= specifically, but
+- keep the inheritance to ligatures set for all modes, or parent modes like =prog-mode=
+
+*** Overwriting all default ligatures
+If you want to "start from scratch" and get control over all ligatures that
+happen in all modes, you can use
+
+#+begin_src elisp
+;; Set all your custom ligatures for all prog-modes here
+;; This section is *out of* the after! block
+;; Example: only get ligatures for "==" and "===" in programming modes
+;; by default, and get only "www" in all buffers by default.
+(setq +ligatures-prog-mode-list '("==" "===")
+      +ligatures-all-modes-list '("www"))
+;; Set any of those variables to nil to wipe all defaults.
+
+;; All mode specific configuration go in the `after!' block
+(after! ligature
+  ;; Set all your additional custom ligatures for other major modes here.
+  ;; Example: enable traditional ligature support in eww-mode, if the
+  ;; `variable-pitch' face supports it
+  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi")))
+
+;; Alternatively
+(set-ligatures! 'eww-mode
+  :font-ligatures '("ff" "fi" "ffi"))
+#+end_src
+
 ,* TODO Troubleshooting
  If you have any problems with this module, do get in touch!
#+end_src
********* Autoload
#+begin_src diff
diff --git a/modules/ui/ligatures/autoload/ligatures.el b/modules/ui/ligatures/autoload/ligatures.el
index 7856ff7c1..06486a4ec 100644
--- a/modules/ui/ligatures/autoload/ligatures.el
+++ b/modules/ui/ligatures/autoload/ligatures.el
@@ -9,17 +9,24 @@
   "Associates string patterns with icons in certain major-modes.
 
   MODES is a major mode symbol or a list of them.
-  PLIST is a property list whose keys must match keys in
-`+ligatures-extra-symbols', and whose values are strings representing the text
-to be replaced with that symbol. If the car of PLIST is nil, then unset any
-pretty symbols previously defined for MODES.
+  PLIST is a property list whose keys must either:
 
-This function accepts one special property:
+  - match keys in
+`+ligatures-extra-symbols', and whose values are strings representing the text
+to be replaced with that symbol, or
+ - be one of two special properties:
 
   :alist ALIST
     Appends ALIST to `prettify-symbols-alist' literally, without mapping text to
     `+ligatures-extra-symbols'.
 
+  :font-ligatures LIST
+    Sets the list of strings that should get transformed by the font into ligatures,
+    like \"==\" or \"-->\". LIST is a list of strings.
+
+If the car of PLIST is nil, then unset any
+pretty symbols and ligatures previously defined for MODES.
+
 For example, the rule for emacs-lisp-mode is very simple:
 
   (set-ligatures! 'emacs-lisp-mode
@@ -30,18 +37,32 @@ assicated with :lambda in `+ligatures-extra-symbols'.
 
 Pretty symbols can be unset for emacs-lisp-mode with:
 
-  (set-ligatures! 'emacs-lisp-mode nil)"
+  (set-ligatures! 'emacs-lisp-mode nil)
+
+Note that this will keep all ligatures in `+ligatures-prog-mode-list' active, as
+`emacs-lisp-mode' is derived from `prog-mode'."
   (declare (indent defun))
   (if (null (car-safe plist))
       (dolist (mode (doom-enlist modes))
-        (delq! mode +ligatures-extra-alist 'assq))
-    (let (results)
+        (delq! mode +ligatures-extra-alist 'assq)
+        (add-to-list 'ligature-ignored-major-modes mode))
+    (let ((results)
+          (font-ligatures))
       (while plist
         (let ((key (pop plist)))
-          (if (eq key :alist)
-              (prependq! results (pop plist))
+          (cond
+           ((eq key :alist)
+            (prependq! results (pop plist)))
+           ((eq key :font-ligatures)
+            (setq font-ligatures (pop plist)))
+           (t
             (when-let (char (plist-get +ligatures-extra-symbols key))
-              (push (cons (pop plist) char) results)))))
+              (push (cons (pop plist) char) results))))))
+      (when font-ligatures
+        (with-eval-after-load 'ligature
+          (dolist (mode (doom-enlist modes))
+            (setq ligature-ignored-major-modes (delete mode ligature-ignored-major-modes)))
+          (ligature-set-ligatures (doom-enlist modes) font-ligatures)))
       (dolist (mode (doom-enlist modes))
         (setf (alist-get mode +ligatures-extra-alist)
               (if-let (old-results (alist-get mode +ligatures-extra-alist))
#+end_src
********* Config
#+begin_src diff
diff --git a/modules/ui/ligatures/config.el b/modules/ui/ligatures/config.el
index 484945ceb..3958aefbd 100644
--- a/modules/ui/ligatures/config.el
+++ b/modules/ui/ligatures/config.el
@@ -47,44 +47,25 @@ font.")
 (defvar +ligatures-extra-alist '((t))
   "A map of major modes to symbol lists (for `prettify-symbols-alist').")
 
-(defvar +ligatures-composition-alist
-  '((?!  . "\\(?:!\\(?:==\\|[!=]\\)\\)")                                      ; (regexp-opt '("!!" "!=" "!=="))
-    (?#  . "\\(?:#\\(?:###?\\|_(\\|[#(:=?[_{]\\)\\)")                         ; (regexp-opt '("##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{"))
-    (?$  . "\\(?:\\$>>?\\)")                                                  ; (regexp-opt '("$>" "$>>"))
-    (?%  . "\\(?:%%%?\\)")                                                    ; (regexp-opt '("%%" "%%%"))
-    (?&  . "\\(?:&&&?\\)")                                                    ; (regexp-opt '("&&" "&&&"))
-    (?*  . "\\(?:\\*\\(?:\\*[*/]\\|[)*/>]\\)?\\)")                            ; (regexp-opt '("*" "**" "***" "**/" "*/" "*>" "*)"))
-    (?+  . "\\(?:\\+\\(?:\\+\\+\\|[+:>]\\)?\\)")                              ; (regexp-opt '("+" "++" "+++" "+>" "+:"))
-    (?-  . "\\(?:-\\(?:-\\(?:->\\|[>-]\\)\\|<[<-]\\|>[>-]\\|[:<>|}~-]\\)\\)") ; (regexp-opt '("--" "---" "-->" "--->" "->-" "-<" "-<-" "-<<" "->" "->>" "-}" "-~" "-:" "-|"))
-    (?.  . "\\(?:\\.\\(?:\\.[.<]\\|[.=>-]\\)\\)")                             ; (regexp-opt '(".-" ".." "..." "..<" ".=" ".>"))
-    (?/  . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")                      ; (regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>"))
-    (?:  . "\\(?::\\(?:::\\|[+:<=>]\\)?\\)")                                  ; (regexp-opt '(":" "::" ":::" ":=" ":<" ":=" ":>" ":+"))
-    (?\; . ";;")                                                              ; (regexp-opt '(";;"))
-    (?0  . "0\\(?:\\(x[a-fA-F0-9]\\).?\\)") ; Tries to match the x in 0xDEADBEEF
-    ;; (?x . "x") ; Also tries to match the x in 0xDEADBEEF
-    ;; (regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<**>" "<+" "<+>" "<-" "<--" "<---" "<->" "<-->" "<--->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<=>" "<===>" "<>" "<|" "<|>" "<~" "<~~" "<." "<.>" "<..>"))
-    (?<  . "\\(?:<\\(?:!--\\|\\$>\\|\\*\\(?:\\*?>\\)\\|\\+>\\|-\\(?:-\\(?:->\\|[>-]\\)\\|[>-]\\)\\|\\.\\(?:\\.?>\\)\\|/>\\|<[<=-]\\|=\\(?:==>\\|[<=>]\\)\\||>\\|~~\\|[$*+./<=>|~-]\\)\\)")
-    (?=  . "\\(?:=\\(?:/=\\|:=\\|<[<=]\\|=[=>]\\|>[=>]\\|[=>]\\)\\)")         ; (regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>" "=>=" "=<="))
-    (?>  . "\\(?:>\\(?:->\\|=>\\|>[=>-]\\|[:=>-]\\)\\)")                      ; (regexp-opt '(">-" ">->" ">:" ">=" ">=>" ">>" ">>-" ">>=" ">>>"))
-    (??  . "\\(?:\\?[.:=?]\\)")                                               ; (regexp-opt '("??" "?." "?:" "?="))
-    (?\[ . "\\(?:\\[\\(?:|]\\|[]|]\\)\\)")                                    ; (regexp-opt '("[]" "[|]" "[|"))
-    (?\\ . "\\(?:\\\\\\\\[\\n]?\\)")                                          ; (regexp-opt '("\\\\" "\\\\\\" "\\\\n"))
-    (?^  . "\\(?:\\^==?\\)")                                                  ; (regexp-opt '("^=" "^=="))
-    (?w  . "\\(?:wwww?\\)")                                                   ; (regexp-opt '("www" "wwww"))
-    (?{  . "\\(?:{\\(?:|\\(?:|}\\|[|}]\\)\\|[|-]\\)\\)")                      ; (regexp-opt '("{-" "{|" "{||" "{|}" "{||}"))
-    (?|  . "\\(?:|\\(?:->\\|=>\\||=\\|[]=>|}-]\\)\\)")                        ; (regexp-opt '("|=" "|>" "||" "||=" "|->" "|=>" "|]" "|}" "|-"))
-    (?_  . "\\(?:_\\(?:|?_\\)\\)")                                            ; (regexp-opt '("_|_" "__"))
-    (?\( . "\\(?:(\\*\\)")                                                    ; (regexp-opt '("(*"))
-    (?~  . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))                                  ; (regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>"))
-  "An alist of all ligatures used by `+ligatures-extras-in-modes'.
-
-The car is the character ASCII number, cdr is a regex which will call
-`font-shape-gstring' when matched.
-
-Because of the underlying code in :ui ligatures module, the regex should match a
-string starting with the character contained in car.
-
-This variable is used only if you built Emacs with Harfbuzz on a version >= 28")
+(defvar +ligatures-prog-mode-list
+  '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
+    ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
+    "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
+    "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
+    "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
+    "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
+    "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
+    "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
+    ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
+    "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
+    "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
+    "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
+    "\\\\" "://")
+  "A list of ligatures to enable in all `prog-mode' buffers.")
+
+(defvar +ligatures-all-modes-list
+  '()
+  "A list of ligatures to enable in all buffers.")
 
 (defvar +ligatures-in-modes
   '(not special-mode comint-mode eshell-mode term-mode vterm-mode Info-mode
@@ -182,15 +163,19 @@ and cannot run in."
  ((and EMACS28+
        (or (featurep 'ns)
            (string-match-p "HARFBUZZ" system-configuration-features))
-       (featurep 'composite))  ; Emacs loads `composite' at startup
-  (defvar +ligature--composition-table (make-char-table nil))
+       (featurep 'composite))           ; Emacs loads `composite' at startup
+
+  (use-package! ligature
+    :config
+    ;; Enable all `+ligatures-prog-mode-list' ligatures in programming modes
+    (ligature-set-ligatures 'prog-mode +ligatures-prog-mode-list)
+    (ligature-set-ligatures 't +ligatures-all-modes-list))
+
   (add-hook! 'doom-init-ui-hook :append
-    (defun +ligature-init-composition-table-h ()
-      (dolist (char-regexp +ligatures-composition-alist)
-        (set-char-table-range
-         +ligature--composition-table
-         (car char-regexp) `([,(cdr char-regexp) 0 font-shape-gstring])))
-      (set-char-table-parent +ligature--composition-table composition-function-table))))
+    (defun +ligature-enable-globally-h ()
+      "Enables ligature checks globally in all buffers.
+You can also do it per mode with `ligature-mode'."
+      (global-ligature-mode t))))
 
  ;; Fallback ligature support for certain, patched fonts. Install them with
  ;; `+ligatures/install-patched-font'
#+end_src
********* Packages
#+begin_src diff :noweb yes
diff --git a/modules/ui/ligatures/packages.el b/modules/ui/ligatures/packages.el
new file mode 100644
index 000000000..c710f766c
--- /dev/null
+++ b/modules/ui/ligatures/packages.el
@@ -0,0 +1,<<ligature-package-num-lines(4)>> @@
+(when (and EMACS28+
+           (or (featurep 'ns)
+               (string-match-p "HARFBUZZ" system-configuration-features))
+           (featurep 'composite))
+  <<ligature-package>>)
#+end_src
********** ligature.el package :version:
:PROPERTIES:
:header-args+: :tangle no
:END:
#+name: ligature-package
#+begin_src elisp
(package! ligature
  :recipe (:host github
           :repo "mickeynp/ligature.el"
           :files ("*.el"))
  :pin "9357156a917a021a87b33ee391567a5d8e44794a")
#+end_src

#+name: ligature-package-num-lines
#+begin_src elisp :var initial=""
(let ((num-lines
       (-> (-second-item (org-babel-lob--src-info "ligature-package"))
           (split-string (rx "\n"))
           length)))
  (+ initial num-lines))
#+end_src
******* \
- TODO write a command that shows me the git diff like doom-upgrade does and use it in my eventual dotfiles upgrade script
  https://github.com/hlissner/doom-emacs/compare/fca8bd7f3fa697a91774c2ddedcd1a47cd7da01a...849672691dd5d1214d6c72167ae84c03e8d9c8e3
******* packaging doom WIP
Extremely WIP, basically just a scratchpad
******** first attempts
#+begin_src scheme :tangle (meta-in-dir "packaging-doom-wip.scm")
(define-module (ebullient home packaging-doom-wip)
  #:use-module (guix build-system trivial)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module (guix packages)
  #:use-module ((guix licenses) #:prefix license:)
  ;; #:use-module ((gnu packages emacs) #:select (emacs))
  #:use-module ((gnu packages version-control) #:select (git))
  #:use-module (ebullient home emacs)
  #:use-module (ebullient home doom-emacs)
  )

;; (define doom-inputs
;;   (computed-file
;;    "doom-inputs"
;;    (with-imported-modules '((guix build utils))
;;      #~(begin
;;          (use-modules (guix build utils))
;;          (invoke (string-append #+doom-emacs:bin "/bin/doom") "help")
;;          (copy-file #$(local-file "nixpkgs-config.nix") #$output)
;;          ;; `emacs-substitute-sexps' might be useful here if my needs get more sophisticated.
;;          ;; (substitute* #$output
;;          ;;   (("(dunstctl|dunst)" all) (case (string->symbol all)
;;          ;;                               ((dunst) (string-append #$(file-append dunst "/bin/dunst")
;;          ;;                                                       " -config " #$(local-file "dunstrc")))
;;          ;;                               ((dunstctl) #$(file-append dunst "/bin/dunstctl"))))
;;          ;;   (("nm-applet") #$(file-append network-manager-applet "/bin/nm-applet"))
;;          ;;   (("pasystray") #$(file-append pasystray "/bin/pasystray"))
;;          ;;   (("redshift-gtk") (string-append #$redshift:gtk "/bin/redshift-gtk"))
;;          ;;   (("udiskie") #$(file-append udiskie "/bin/udiskie")))
;;          ))))


(define-public temp-doom-emacs
  (package
    (name "doom-emacs")
    (version "0")
    (source
     (local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t))
    (build-system (@ (guix build-system copy) copy-build-system))
    (synopsis "")
    (description "")
    (home-page "")
    (license #f)))

(define-public doom-inputs
  (package
    (name "doom-inputs")
    (version "0")
    (source #f)
    (inputs
     (list emacs-29-pgtk+native-comp
           ;; doom-emacs
           temp-doom-emacs
           ;; (local-file "doom-private" #:recursive? #t)
           git
           ;; (local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/straight.el" #:recursive? #t)
           ;; (local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/use-package" #:recursive? #t)
           ))
    (build-system trivial-build-system)
    (arguments
     `(#:modules ((guix build utils))
       #:builder
       ,#~(begin
            (use-modules (guix build utils))
            (let ((doom-private #$(local-file "doom-private" #:recursive? #t))
                  (doom-local-dir (string-append #$output "/doom-local")))
              (mkdir-p doom-local-dir)

              ;; (mkdir-p (string-append #$output "/asdf"))
              ;; (with-output-to-file (string-append #$output "/asdf/asdf.txt")
              ;;   (lambda _
              ;;     (display "asdffffffffffff")))

              (setenv "PATH" (string-append (getenv "PATH")
                                            ":" (assoc-ref %build-inputs "emacs-29-pgtk+native-comp") "/bin"
                                            ":" (assoc-ref %build-inputs "git") "/bin"
                                            ))
              ;; (setenv "DOOMDIR" (assoc-ref %build-inputs "doom-private"))
              (setenv "DOOMDIR" doom-private)
              (setenv "DOOMLOCALDIR" doom-local-dir)

              ;; (chdir #$output)
              ;; (invoke "git" "clone" "https://github.com/dracula/gtk")

              ;; (display "hi!")
              ;; (display doom-private)
              ;; (display straight-el)

              (let ((repos-dir (string-append doom-local-dir "/straight/repos")))
                (mkdir-p repos-dir)
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/straight.el" #:recursive? #t)
                         (string-append repos-dir "/straight.el"))
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/use-package" #:recursive? #t)
                         (string-append repos-dir "/use-package"))
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/melpa" #:recursive? #t)
                         (string-append repos-dir "/melpa"))
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/gnu-elpa-mirror" #:recursive? #t)
                         (string-append repos-dir "/gnu-elpa-mirror"))
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/el-get" #:recursive? #t)
                         (string-append repos-dir "/el-get"))
                (symlink #$(local-file "/home/pharcosyle/.local/var/lib/doom-local/straight/repos/emacsmirror-mirror" #:recursive? #t)
                         (string-append repos-dir "/emacsmirror-mirror")))

              (setenv "HOME" "/tmp/asdfasdf")
              (mkdir-p "/tmp/asdfasdf")

              ;; (symlink #$(local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t)
              ;;            (string-append #$output "/temp-doom-emacs"))
              (let ((doom
                     ;; #$(local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t)
                     (assoc-ref %build-inputs "doom-emacs")
                     ;; (string-append #$output "/temp-doom-emacs")
                     ))
                ;; (invoke (string-append #$(@ (gnu packages base) coreutils) "/bin/echo") "asdfasdfsdf")
                ;; (invoke (string-append doom "/bin/doom") "help")
                (invoke (string-append doom "/bin/doom") "install" "--no-config" "--no-env" "--no-fonts" "--no-hooks")
                )

              ;; (copy-file #$(local-file "nixpkgs-config.nix") #$output)
              )


            #t)))

    ;; (arguments
    ;;  `(;; #:install-plan
    ;;    ;; '(("." "share/doom-emacs/"))
    ;;    ;; #:tests? #t
    ;;    ;; #:test-command '("./bin/doom" "test")
    ;;    #:phases
    ;;    ,#~(modify-phases %standard-phases
    ;;         (add-after 'install 'symlink-bin
    ;;           (lambda _
    ;;             (mkdir #$output:bin)
    ;;             (symlink (string-append #$output "/bin")
    ;;                      (string-append #$output:bin "/bin")))))))

    (synopsis "")
    (description "")
    (home-page "")
    (license #f)))





(use-modules ((guix packages) #:select (content-hash content-hash-algorithm content-hash-value)))

(define doom-build
  (computed-file
   "doom-build"
   (with-imported-modules '((guix build utils))
     #~(begin
         (use-modules (guix build utils))

         ;; (mkdir-p #$output)

         (setenv "GIT_SSL_NO_VERIFY" "true") ; do ssl if it's easy. Also if I'm using `(guix build git) git-fetch' consider if it setting this variable leaks out.

         ;; (invoke (string-append #+doom-emacs:bin "/bin/doom") "help")
         ;; (copy-file #$(local-file "nixpkgs-config.nix") #$output)
         ;; (invoke (string-append #$(@ (gnu packages wget) wget) "/bin/wget") "--no-check-certificate" "https://xkcd.com/")
         ;; (copy-file "index.html" #$output)

         ;; TODO Consider making e.g. emacs, git not ungexped in a let but instead everywhere they're used (and move this let outside of the gexp). Then I could use file-append instead of string-append in places I guess. Which is better practice?
         (let ((doom-private #+(file-union "doom-private"
                                           `(("init.el" ,(file-append (local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t)
                                                                      "/init.example.el"))
                                             ("config.el" ,(file-append (local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t)
                                                                        "/core/templates/config.example.el"))
                                             ("packages.el" ,(file-append (local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t)
                                                                          "/core/templates/packages.example.el")))))
               ;; (doom-private #$(local-file "doom-private" #:recursive? #t))
               (doom-local-dir (string-append #$output "/doom-local"))
               (emacs #+emacs-29-pgtk+native-comp)
               (git #+git)
               ;; (emacs (assoc-ref %build-inputs "emacs-29-pgtk+native-comp"))
               ;; (git (assoc-ref %build-inputs "git"))
               (doom-emacs #+temp-doom-emacs)
               ;; (doom-emacs #+doom-emacs)
               ;; (doom-emacs (assoc-ref %build-inputs "doom-emacs"))
               ;; (doom-emacs #$(local-file "/home/pharcosyle/projects/dotfiles/doom-emacs" #:recursive? #t))
               )
           (mkdir-p doom-local-dir)

           (setenv "PATH" (string-append (getenv "PATH")
                                         ":" emacs "/bin"
                                         ":" git "/bin"
                                         ":" #+(@ (gnu packages base) coreutils) "/bin" ; donno if this is necessary
                                         ":" #+(@ (gnu packages base) sed) "/bin"
                                         ))
           ;; Is this a better/cleaner way to do path-setting? Consider also the comment (from git-download.scm), should I add more stuff to the path?
           ;;
           ;; The 'git submodule' commands expects Coreutils, sed,
           ;; grep, etc. to be in $PATH.
           ;; (set-path-environment-variable "PATH" '("bin")
           ;;                                (match '#+inputs
           ;;                                  (((names dirs outputs ...) ...)
           ;;                                   dirs)))

           (setenv "DOOMDIR" doom-private)
           (setenv "DOOMLOCALDIR" doom-local-dir)

           ;; (chdir #$output)
           ;; (invoke "git" "clone" "https://github.com/dracula/gtk")

           ;; donno if this is necessary
           (setenv "HOME" "/tmp/asdfasdf")
           (mkdir-p "/tmp/asdfasdf")

           ;; temporary straight.el experimentation
           ;; (mkdir-p "/tmp/asdfasdf/123456")
           (mkdir-p (string-append doom-local-dir "/straight/repos"))
           (symlink #+(local-file "/home/pharcosyle/projects/dotfiles/straight.el" #:recursive? #t)
                    (string-append doom-local-dir "/straight/repos/straight.el"))

           ;; (copy-file #$(local-file "nixpkgs-config.nix") (string-append doom-local-dir "/asdf.txt"))
           ;; (invoke (string-append doom-emacs "/bin/doom") "help")
           (invoke (string-append doom-emacs "/bin/doom") "install" "--no-config" "--no-env" "--no-fonts" "--no-hooks")
           ;; (invoke (string-append doom-emacs "/bin/doom") "upgrade")
           ;; (invoke (string-append doom-emacs "/bin/doom") "build")
           ;; (invoke (string-append doom-emacs "/bin/doom") "sync")

           ;; (invoke (string-append emacs "/bin/emacs") "--batch" "--eval=\"(progn (load user-init-file) (straight-freeze-versions))\"")
           ;; (invoke (string-append emacs "/bin/emacs") "--batch" "--eval='(progn (message \"hello!\"))'")
           ;; (invoke "emacs" "--batch" "--eval='(message \"hello!\")'")
           ;; (chdir #$output)
           ;; (invoke "emacs" "--batch" "--eval='(with-temp-file \"asdf.txt\" (insert \"asdfasdf\"))'")
           ;; (invoke "emacs" "--batch" "--eval='(message \"hello!\")'")
           ;; (invoke "emacs" "--help")
           ;; (invoke "echo" (string-append (string-append emacs "/bin/emacs") "--batch" (string-append "--load=" doom-emacs "/init.el") "--eval=(progn (message \"hi\") (message \"yo\"))"))
           ;; (invoke (string-append emacs "/bin/emacs") "--batch" (string-append "--load=" doom-emacs "/init.el") "--eval=(progn (message \"hi\") (straight-freeze-versions) (message \"yo\"))")
           ;; (invoke "echo" "asdf")

           )))
   #:options (let ((ch (content-hash "1zcpkabkizadc3j9jqnnpyqm4d71bnvxz2x6as53f6wjwn82ahd9")))
               (list #:hash (content-hash-value ch)
                     #:hash-algo (content-hash-algorithm ch)
                     #:recursive? #t
                     ;; #:substitutable? #f ; This isn't appropriate, right?
                     ))))

;; (define-public doom-build-pkg
;;   (package
;;     (name "doom-build-pkg")
;;     (version "0")
;;     (source doom-build)
;;     (build-system (@ (guix build-system copy) copy-build-system))
;;     (synopsis "")
;;     (description "")
;;     (home-page "")
;;     (license #f)))
#+end_src
******** asdf
#+begin_src scheme :tangle (meta-in-dir "packaging-wip.scm")
(define-module (ebullient home packaging-wip)
  ;; #:use-module (guix build-system trivial)
  ;; #:use-module (guix gexp)
  ;; #:use-module (guix git-download)
  ;; #:use-module (guix packages)
  ;; #:use-module ((guix licenses) #:prefix license:)
  ;; ;; #:use-module ((gnu packages emacs) #:select (emacs))
  ;; #:use-module ((gnu packages version-control) #:select (git))
  ;; #:use-module (ebullient home emacs)
  ;; #:use-module (ebullient home doom-emacs)

  #:use-module ((guix packages) #:select (package-input-rewriting))
  #:use-module ((gnu packages emacs) #:select (emacs emacs-minimal emacs-no-x emacs-next emacs-next-pgtk emacs-xwidgets emacs-no-x-toolkit emacs-wide-int))

  )
(define emacs-variant (@ (ebullient home emacs) emacs-29-pgtk+native-comp))

;; TODO does this rewrite recursively?
;; package-input-rewriting/spec says it specifically does this while package-input-rewriting does not. And what about using `package-mapping'? I can check the final product for references to emacs/emacs-minimal but still read over the source code of each later. What about native-inputs, sometimes emacs(-minimal) is in there.
;; TODO do I need to specify all of the different emacs packages for rewriting?
;; Does it work without doing this already? Would package-input-rewriting/spec handle them somehow? Does `package/inherit' (in both the -spec and non-spec versions)?
(define with-emacs-variant
  (package-input-rewriting `((,emacs . ,emacs-variant)
                             (,emacs-minimal . ,emacs-variant)
                             (,emacs-no-x . ,emacs-variant)

                             ;; TODO maybe ths should be in a nested `package-input-rewriting' or having packages with themselves as input rewrites
                             ;; will cause problems, I donno. Putting this here for now.
                             (,(@ (gnu packages emacs-xyz) emacs-dash) . ,(@ (ebullient home emacs-xyz) emacs-dash)))))

;; (define-public test-reftex
;;   (with-emacs-variant (@ (gnu packages emacs-xyz) emacs-company-reftex)))
;; (define-public test-dash-existing
;;   (with-emacs-variant (@ (gnu packages emacs-xyz) emacs-dash)))
;; (define-public test-dash
;;   (with-emacs-variant (@ (ebullient home emacs-xyz) emacs-dash)))

;; (define orig-pkg (@ (gnu packages emacs-xyz) emacs-build-farm))
;; (define orig-pkg (@ (gnu packages emacs-xyz) emacs-cider))
(define orig-pkg (@ (gnu packages emacs-xyz) emacs-buttercup))

(define-public test-pkg
  (with-emacs-variant orig-pkg))





(use-modules (guix packages)
             (guix git-download))

(define (git-origin url commit hash recursive?)
  (origin
    (method git-fetch)
    (uri (git-reference
          (url url)
          (commit commit)
          (recursive? recursive?)))
    (sha256
     (base32
      hash))))



(use-modules (gnu packages)
             (guix profiles)
             ((srfi srfi-1) #:select (remove))
             (mendicant utils))

(define (asdf)
  (let ((emacs-ps
         (->> (call-with-input-file "../doom-packaging/guix-doom-emacs-packages-from-straight-build-cache.txt" read)
              (remove (lambda (dpns)
                        (member dpns (list "donnager"

                                           "straight"

                                           ;; TODO built-in, ignoring for now but handle this when grabbing from ~doom-packages~. It marks them as ~:ignored t~
                                           ;; - but what about built-in 'prefer, this isn't marked specially
                                           "hideshow"
                                           "vc"
                                           "vc-annotate"
                                           "smerge-mode"
                                           "elisp-mode"
                                           "css-mode"

                                           "org-elpa"
                                           "melpa"
                                           "gnu-elpa-mirror"
                                           "el-get"
                                           "emacsmirror-mirror"
                                           ))))
              (map (lambda (x)
                     (string-append "emacs-" x))))))
    ;; (display
    ;;  (map (lambda (x)
    ;;         (find-best-packages-by-name x #f))
    ;;       emacs-ps))

    ;; (display
    ;;  (->> emacs-ps
    ;;       (map (lambda (x)
    ;;              (let ((found (find-best-packages-by-name x #f)))
    ;;                (if (null? found)
    ;;                  x '()))))
    ;;       (remove null?)))

    (use-modules (gnu packages emacs-xyz)
                 (ebullient home emacs-xyz)
                 (ebullient home emacs-xyz-batch))
    (let ((the-manifest
           (packages->manifest
            (map (lambda (x)
                   (primitive-eval
                    (string->symbol
                     (if (equal? "emacs-git-modes" x)
                         "git-modes"
                         x))))
                 emacs-ps))))
      ;; (display the-manifest)
      #f
      )
    ))
;; (asdf)






(use-modules ((guix base32) #:select (bytevector->nix-base32-string))
             ((guix build git) #:select (git-fetch) #:prefix other:)
             (guix build utils)
             ((guix hash) #:select (file-hash*)))

(define (git-checkout-hash url commit recursive?)
  (let ((dir (string-append "/tmp" "/8888")))
    (mkdir-p dir)
    (other:git-fetch url commit dir
                     #:recursive? recursive?
                     ;; #:git-command (string-append #+git "/bin/git")
                     )
    (let ((hash (bytevector->nix-base32-string (file-hash* dir))))
      (delete-file-recursively dir)
      hash)))


(define (test-get-hash)
  (display
   (git-checkout-hash
    "https://github.com/emacs-evil/evil-surround"
    "282a975bda83310d20a2c536ac3cf95d2bf188a5"
    #t)))

;; (test-get-hash)
#+end_src

#+begin_src elisp :tangle (meta-in-dir "parse-doom-packages.el")
(defun m-slurp (f)
  (with-temp-buffer
    (insert-file-contents f)
    (buffer-string)))

(defun m-spit (f content)
  (with-temp-file f
    (insert content)))




(defun m-process ()
  (-as-> (m-slurp "~/projects/phrenetic/doom-packaging/my-doom-packages.el") $
         (read $)
         (-map #'-first-item $)
         (-map #'symbol-name $)))

(defun write-doom-pkgs-txt ()
  (m-spit "doom-packaging/guix-doom-emacs-packages.txt"
          (pp (m-process))))





(defun repo-commit (r)
  (let ((default-directory (concat "~/.local/var/lib/doom-local/straight/repos/" r)))
    (straight--process-output "git" "rev-parse" "HEAD")))

(defun write-current-commits ()
  (let ((pkgs-to-repos
         (-map
          (lambda (x)
            (cons
             (-first-item x)
             (-as-> x $
                    (-fourth-item $)
                    (plist-get $ :local-repo))))
          (map-into straight--build-cache 'list))))
    (-map (lambda (x)
            (cons (car x)
                  (if-let ((y (cdr x)))
                      (if (not (equal y "/home/pharcosyle/projects/dotfiles/donnager"))
                          (repo-commit y)
                        nil)
                    y)))
          pkgs-to-repos)))

;; (write-current-commits)
#+end_src
**** Direnv
#+begin_src scheme
(define* (he-direnv svcs #:key shell)
  (cons*
   (service
    (service-type
     (name 'he-zsh-direnv)
     (extensions
      (list
       ;; REVIEW This might not be necessary once I integrate emacs-envrc during my Doom/Straight/Guix integration.
       (service-extension
        home-profile-service-type
        (const (list direnv)))
       (case shell
         ;; ((#:shell/bash)
         ;;  (service-extension
         ;;   home-bash-service-type
         ;;   (const (home-bash-extension
         ;;           (bashrc
         ;;            (list (mixed-text-file
         ;;                   "direnv-hook"
         ;;                   "eval \"$(" (file-append direnv "/bin/direnv") "hook bash)\"")))))))
         ((#:shell/zsh)
          (service-extension
           home-zsh-service-type
           (const (home-zsh-extension
                   (zshrc
                    (list (mixed-text-file
                           "direnv-hook"
                           "eval \"$(" (file-append direnv "/bin/direnv") "hook zsh)\""))))))))))
     (default-value #f)))
   svcs))
#+end_src
**** Desktop
***** Pipewire
#+begin_src scheme
(define (he-pipewire svcs)
  (cons*
   (service
    (service-type
     (name 'he-pipewire)
     (extensions
      (list
       (service-extension
        home-profile-service-type
        (const (list pipewire-0.3
                     wireplumber)))
       (service-extension
        home-shepherd-service-type
        (const
         (list
          (shepherd-service
           (provision '(pipewire))
           (stop  #~(make-kill-destructor))
           (start #~(make-forkexec-constructor
                     (list #$(file-append pipewire-0.3 "/bin/pipewire"))
                     #:environment-variables
                     (append (list "DISABLE_RTKIT=1")
                             (default-environment-variables))))
           (auto-start? #f))
          (shepherd-service
           (requirement '(pipewire))
           (provision '(wireplumber))
           (stop  #~(make-kill-destructor))
           (start #~(make-forkexec-constructor
                     (list #$(file-append wireplumber "/bin/wireplumber"))
                     #:environment-variables
                     (append (list "DISABLE_RTKIT=1")
                             (default-environment-variables))))
           (auto-start? #f))
          (shepherd-service
           (requirement '(pipewire))
           (provision '(pipewire-pulse))
           (stop  #~(make-kill-destructor))
           (start #~(make-forkexec-constructor
                     (list #$(file-append pipewire-0.3 "/bin/pipewire-pulse"))
                     #:environment-variables
                     (append (list "DISABLE_RTKIT=1")
                             (default-environment-variables))))
           (auto-start? #f)))))
       (service-extension
        home-xdg-configuration-files-service-type
        (const
         `(("alsa/asoundrc"
            ,(mixed-text-file
              "asoundrc"
              #~(string-append
                 "<" #$(file-append pipewire-0.3 "/share/alsa/alsa.conf.d/50-pipewire.conf") ">" "\n"
                 "<" #$(file-append pipewire-0.3 "/share/alsa/alsa.conf.d/99-pipewire-default.conf") ">" "\n"
                 "\n"
                 "pcm_type.pipewire {" "\n"
                 "  lib " #$(file-append pipewire-0.3 "/lib/alsa-lib/libasound_module_pcm_pipewire.so") "\n"
                 "}" "\n"
                 "\n"
                 "ctl_type.pipewire {" "\n"
                 "  lib " #$(file-append pipewire-0.3 "/lib/alsa-lib/libasound_module_ctl_pipewire.so") "\n"
                 "}" "\n"))))))))
     (default-value #f)))
   svcs))
#+end_src
***** Flatpak
#+begin_src scheme
(define (he-flatpak svcs)
  (cons*
   (service
    (service-type
     (name 'he-flatpak)
     (extensions
      (list
       (service-extension
        home-profile-service-type
        (const (list flatpak
                     xdg-desktop-portal
                     xdg-desktop-portal-wlr)))))
     (default-value #f)))
   svcs))
#+end_src
****** Make Flatpak apps visible
#+begin_src sh
export XDG_DATA_DIRS=$HOME/.local/share/flatpak/exports/share:$XDG_DATA_DIRS
#+end_src
****** WIP Flatpak
Ran these manually
#+begin_src sh
flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

# flatpak install --user flathub com.spotify.Client
# flatpak install --user flathub us.zoom.Zoom
#+end_src
***** Window managers
****** Sway
#+begin_src scheme
(define-module (rde features wm)
  #:use-module (rde features)
  #:use-module (rde features predicates)
  #:use-module (rde features fontutils)
  #:use-module (gnu system)
  #:use-module (gnu system keyboard)
  #:use-module (rde packages)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages image)
  #:use-module (gnu packages web)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages xdisorg)
  #:use-module (gnu packages freedesktop)
  #:use-module (gnu packages terminals)
  #:use-module (gnu packages rust-apps)
  #:use-module (gnu services)
  #:use-module (gnu services xorg)
  #:use-module (gnu services shepherd)
  #:use-module (gnu home services)
  #:use-module (rde home services wm)
  #:use-module (gnu home services shells)

  #:use-module (guix gexp)
  #:use-module (guix packages)

  #:use-module (srfi srfi-1)

  #:export (feature-sway
            feature-sway-run-on-tty
            feature-sway-screenshot
            feature-sway-statusbar

            feature-swayidle
            feature-swaylock))

;; https://github.com/jjquin/dotfiles/tree/master/sway/.config/sway/config.d
;; https://nixos.wiki/wiki/Sway
;; https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

(define (keyboard-layout-to-sway-config keyboard-layout)
  (let ((kb-options (string-join
                     (keyboard-layout-options keyboard-layout) ",")))
    `((input *
             ((xkb_layout  ,(keyboard-layout-name keyboard-layout))
              (xkb_variant ,(keyboard-layout-variant keyboard-layout))
              (xkb_options ,kb-options))))))

(define* (feature-sway
          #:key
          (extra-config '())
          (sway sway)
          (foot foot)
          (bemenu bemenu)
          (xdg-desktop-portal xdg-desktop-portal)
          (xdg-desktop-portal-wlr xdg-desktop-portal-wlr)
          ;; Logo key. Use Mod1 for Alt.
          (sway-mod 'Mod4)
          (add-keyboard-layout-to-config? #t)
          (xwayland? #f))
  "Setup and configure sway."
  (ensure-pred sway-config? extra-config)
  (ensure-pred boolean? add-keyboard-layout-to-config?)
  (ensure-pred any-package? sway)
  (ensure-pred any-package? foot)
  (ensure-pred any-package? bemenu)
  (ensure-pred any-package? xdg-desktop-portal)
  (ensure-pred any-package? xdg-desktop-portal-wlr)

  (define (sway-home-services config)
    "Returns home services related to sway."
    (let* ((kb-layout      (get-value 'keyboard-layout config))
           (layout-config  (if (and add-keyboard-layout-to-config? kb-layout)
                               (keyboard-layout-to-sway-config kb-layout)
                               '()))

           (lock-cmd
            (get-value 'default-screen-locker config "loginctl lock-session"))

           (default-terminal
             (get-value-eval 'default-terminal config
                             (file-append foot "/bin/foot")))
           (backup-terminal
             (get-value 'backup-terminal config
                        (file-append foot "/bin/foot")))
           (default-application-launcher
             (get-value 'default-application-launcher config
                        (file-append bemenu "/bin/bemenu-run -l 20 -p run:"))))
      (list
       (service
        home-sway-service-type
        (home-sway-configuration
         (package sway)
         (config
          `((xwayland ,(if xwayland? 'enable 'disable))
            (,#~"")
            ,@layout-config

            (,#~"\n\n# General settings:")
            (set $mod ,sway-mod)
            (set $term ,default-terminal)
            (set $backup-term ,backup-terminal)
            (set $menu ,default-application-launcher)
            (set $lock ,lock-cmd)

            (floating_modifier $mod normal)

            (bindsym $mod+Shift+r reload)

            (,#~"\n\n# Launching external applications:")
            (bindsym $mod+Control+Shift+Return exec $backup-term)
            (bindsym $mod+Return exec $term)

            (bindsym $mod+Shift+d exec $menu)
            (bindsym $mod+Shift+l exec $lock)

            (,#~"\n\n# Manipulating windows:")
            (bindsym $mod+Shift+c kill)
            (bindsym $mod+Shift+f fullscreen)
            (bindsym $mod+Shift+space floating toggle)
            (bindsym $mod+Ctrl+space focus mode_toggle)

            (bindsym $mod+Left focus left)
            (bindsym $mod+Down focus down)
            (bindsym $mod+Up focus up)
            (bindsym $mod+Right focus right)

            (bindsym $mod+Shift+Left move left)
            (bindsym $mod+Shift+Down move down)
            (bindsym $mod+Shift+Up move up)
            (bindsym $mod+Shift+Right move right)

            (,#~"\n\n# Moving around workspaces:")
            (bindsym $mod+tab workspace back_and_forth)
            ,@(append-map
               (lambda (x)
                 `((bindsym ,(format #f "$mod+~a" (modulo x 10))
                            workspace number ,x)
                   (bindsym ,(format #f "$mod+Shift+~a" (modulo x 10))
                            move container to workspace number ,x)))
               (iota 10 1))

            (,#~"\n\n# Scratchpad settings:")
            (bindsym $mod+Shift+minus move scratchpad)
            (bindsym $mod+minus scratchpad show)

            (,#~"")
            (default_border pixel)
            (default_floating_border pixel)
            (gaps inner ,(get-value 'emacs-margin config 8))))))

       (when (get-value 'swayidle-cmd config)
         (simple-service
          'sway-enable-swayidle
          home-sway-service-type
          `((,#~"")
            (exec ,(get-value 'swayidle-cmd config)))))

       (when (get-value 'swayidle config)
         (let* ((swaymsg (file-append sway "/bin/swaymsg"))
                (swaymsg-cmd (lambda (cmd)
                               #~(format #f "'~a \"~a\"'" #$swaymsg #$cmd)))
                (idle-timeout (+ 30 (get-value 'lock-timeout config 120))))
           (simple-service
            'sway-add-dpms-to-swayidle
            home-swayidle-service-type
            `((timeout ,idle-timeout ,(swaymsg-cmd "output * dpms off")
               resume                ,(swaymsg-cmd "output * dpms on"))))))

       (simple-service
        'sway-configuration
        home-sway-service-type
        `(,@extra-config
          (,#~"")))

       (simple-service
        'sway-reload-config-on-change
        (@@ (gnu home services) home-run-on-change-service-type)
        `(("files/config/sway/config"
           ,#~(system* #$(file-append sway "/bin/swaymsg") "reload"))))

       (simple-service
        'packages-for-sway
        home-profile-service-type
        (append
         (if (and (get-value 'default-terminal config)
                  (get-value 'backup-terminal config))
             '() (list foot))
         (if (get-value 'default-application-launcher config) '() (list bemenu))
         (list qtwayland swayhide
               xdg-desktop-portal xdg-desktop-portal-wlr)))
       (simple-service 'set-wayland-specific-env-vars
                       home-environment-variables-service-type
                       ;; export NO_AT_BRIDGE=1
                       '(("XDG_CURRENT_DESKTOP" . "sway")
                         ("XDG_SESSION_TYPE" . "wayland")
                         ;; FIXME: Should be in feature-pipewire
                         ("RTC_USE_PIPEWIRE" . "true")
                         ("SDL_VIDEODRIVER" . "wayland")
                         ("MOZ_ENABLE_WAYLAND" . "1")
                         ("CLUTTER_BACKEND" . "wayland")
                         ("ELM_ENGINE" . "wayland_egl")
                         ("ECORE_EVAS_ENGINE" . "wayland-egl")
                         ("QT_QPA_PLATFORM" . "wayland-egl")
                         ("_JAVA_AWT_WM_NONREPARENTING" . "1"))))))

  (feature
   (name 'sway)
   (values `((sway . ,sway)
             (wl-clipboard . ,wl-clipboard)
             (wayland . #t)
             (xwayland? . ,xwayland?)))
   (home-services-getter sway-home-services)))


;;;
;;; sway-screenshot.
;;;

(define* (feature-sway-screenshot)
  "Configure slurp, grim and other tools for screenshot capabilities."

  (define sway-f-name 'screenshot)
  (define f-name (symbol-append 'sway- sway-f-name))

  (define (get-home-services config)
    (require-value 'sway config)
    (define subject-output
      #~(format #f "~a -t get_outputs | ~a -r '.[] | select(.focused) | .name'"
                #$(file-append (get-value 'sway config) "/bin/swaymsg")
                #$(file-append jq "/bin/jq")))
    (define subject-window-or-selection
      #~(format #f "~a -t get_tree | ~a -r '.. | select(.pid? and .visible?) \
| .rect | \"\\(.x),\\(.y) \\(.width)x\\(.height)\"' | ~a -b ~a -B ~a"
                #$(file-append (get-value 'sway config) "/bin/swaymsg")
                #$(file-append jq "/bin/jq")
                ;; TODO: Move to slurp-cmd
                #$(file-append slurp "/bin/slurp")
                "303030AA"
                "303030AA"))

    (define* (shot-script subject #:key output geom (file "-"))
      (program-file
       (string-append "sway-shot-" subject)
       #~(system
          (format #f "~a ~a~a~a | ~a"
                  #$(file-append grim "/bin/grim")
                  #$(if output #~(string-append "-o \"$(" #$output ")\" ") "")
                  #$(if geom #~(string-append "-g \"$(" #$geom ")\" ") "")
                  #$file
                  #$(file-append (get-value 'wl-clipboard config)
                                 "/bin/wl-copy")))))

    (define shot-output
      (shot-script "output" #:output subject-output))
    (define shot-window-or-selection
      (shot-script "window-or-selection" #:geom subject-window-or-selection))
    (list
     ;; (simple-service
     ;;  'sway-screenshot-packages
     ;;  home-profile-service-type
     ;;  (list slurp grim wl-clipboard jq))

     (simple-service
      'sway-screenshot
      home-sway-service-type
      `((bindsym $mod+Print exec ,shot-output)
        (bindsym $mod+Shift+Print exec ,shot-window-or-selection)))))

  (feature
   (name f-name)
   (values `((,f-name . #t)))
   (home-services-getter get-home-services)))




;;;
;;; swayidle.
;;;

(define* (feature-swayidle
          #:key
          (swayidle swayidle)
          (lock-timeout 120)
          (extra-config '()))
  "Configure swayidle."
  (ensure-pred any-package? swayidle)

  (define swayidle-cmd (file-append swayidle "/bin/swayidle -w"))

  (define (get-home-services config)
    (define lock-cmd (get-value 'default-screen-locker config))

    (list
     (service
      home-swayidle-service-type
      (home-swayidle-configuration
       (swayidle swayidle)
       (config
        `(,@(if lock-cmd
                (let ((lock-cmd-quoted (format #f "'~a'" lock-cmd)))
                  `((lock ,lock-cmd-quoted)
                    (before-sleep ,lock-cmd-quoted)
                    (timeout ,lock-timeout ,lock-cmd-quoted)))
                '())
          ,@extra-config))))))

  (feature
   (name 'swayidle)
   (values `((swayidle . ,swayidle)
             (swayidle-cmd . ,swayidle-cmd)
             (lock-timeout . ,lock-timeout)))
   (home-services-getter get-home-services)))


;;;
;;; swaylock.
;;;

(define* (feature-swaylock
          #:key
          (swaylock swaylock)
          (show-failed-attempts? #t)
          (show-keyboard-layout? #f)
          (daemonize? #t)
          (extra-config '())
          (default-screen-locker? #t))
  "Configure swaylock."
  (ensure-pred any-package? swaylock)

  (define (get-home-services config)
    (list
     (service
      home-swaylock-service-type
      (home-swaylock-configuration
       (swaylock swaylock)
       (config
        `((show-failed-attempts . ,show-failed-attempts?)
          (daemonize . ,daemonize?)
          (show-keyboard-layout . ,show-keyboard-layout?)
          ;; TODO: Source color from colorscheme
          (color . 3e3e3e)
          (indicator-caps-lock)
          ,@extra-config))))))

  (define (get-system-services _)
    (list
     (screen-locker-service swaylock "swaylock")
     ;; (simple-service
     ;;  'setuid-chkpwd
     ;;  setuid-program-service-type
     ;;  (list (file-like->setuid-program
     ;;         (file-append linux-pam "/sbin/unix_chkpwd"))))

     ;; (simple-service
     ;;  'sway-add-swaylock-pam
     ;;  pam-root-service-type
     ;;  (list
     ;;   (unix-pam-service "swaylock")))
     ))

  (feature
   (name 'swaylock)
   (values `((swaylock . ,swaylock)
             ,@(if default-screen-locker?
                   ;; TODO: Change it to path in the store, once
                   ;; https://issues.guix.gnu.org/53468 is resolved
                   `((default-screen-locker . "/run/setuid-programs/swaylock"))
                   '())))
   (home-services-getter get-home-services)
   (system-services-getter get-system-services)))
#+end_src
******* Sway old WIP
#+begin_src scheme
(define (sway-env-vars env-vars)
  (simple-service 'set-sway-env-vars
                  home-bash-service-type
                  (home-bash-extension
                   (bash-profile
                    (list (mixed-text-file
                           "sway-env-vars"
                           "if [[ \"$DESKTOP_SESSION\" = \"\" || \"$DESKTOP_SESSION\" = \"sway\" ]] ; then\n"
                           (serialize-posix-env-vars #f env-vars)
                           "fi"))))))

(define (conditionalize-sway-env-vars services)
  (define env-vars)
  (as-> services $
    (update-services*
     $
     (lambda (svc)
       (eq? (-> svc service-kind service-type-name) 'set-wayland-specific-env-vars))
     (lambda (vars)
       (set! env-vars vars)
       '()))
    (cons* (sway-env-vars env-vars) $)))

(define sway-services
  (conditionalize-sway-env-vars
   ((feature-home-services-getter
     (feature-sway #:xwayland? #t
                   #:sway-mod 'Mod1
                   #:extra-config
                   ;; `((include ,(file-append (@ (gnu packages wm) sway) "/etc/sway/config")))
                   ;; `((include ,(local-file "./config/sway/config")))
                   `((include "/home/pharcosyle/projects/phrenetic/config"))))
    (rde-config))))
#+end_src
***** Screen lockers
****** Swaylock
***** Idle management
****** Swayidle
***** Status bars
****** Waybar
***** Applets
****** Gammastep
- TODO broken tray icon. Probably I need to have some part of the =gammastep= package on the path so it can find the icon. Don't worry about this for now, maybe there will be some way to tell =papirus-icon-theme= to use a different icon or something.
#+begin_src scheme
(define (gammastep-shepherd-service _)
  (list
   (shepherd-service
    (provision '(gammastep))
    (start #~(lambda (wayland-display . _)
               ((make-forkexec-constructor
                 (list #$(file-append gammastep "/bin/gammastep-indicator") "-l 44:-123")
                 #:environment-variables
                 ;; (list (string-append "WAYLAND_DISPLAY=" wayland-display))
                 (call-with-input-file "/tmp/env-for-applets" read)))))
    (stop #~(make-kill-destructor))
    (respawn? #f)
    (auto-start? #f))))

(define gammastep-service-type
  (service-type (name 'he-gammastep)
                (extensions
                 (list (service-extension
                        home-shepherd-service-type
                        gammastep-shepherd-service)))
                (default-value #f)))
#+end_src
****** Network Manager
#+begin_src scheme
(define (network-manager-shepherd-service _)
  (list
   (shepherd-service
    (provision '(nm))
    (start #~(lambda (wayland-display . _)
               ((make-forkexec-constructor
                 (list #$(file-append network-manager-applet "/bin/nm-applet") "--indicator")
                 #:environment-variables
                 ;; (list (string-append "WAYLAND_DISPLAY=" wayland-display))
                 (call-with-input-file "/tmp/env-for-applets" read)))))
    (stop #~(make-kill-destructor))
    (respawn? #f)
    (auto-start? #f))))

(define network-manager-service-type
  (service-type (name 'he-network-manager)
                (extensions
                 (list (service-extension
                        home-shepherd-service-type
                        network-manager-shepherd-service)))
                (default-value #f)))
#+end_src
****** Udiskie
#+begin_src scheme
(define (udiskie-shepherd-service _)
  (list
   (shepherd-service
    (provision '(udiskie))
    (start #~(lambda (wayland-display . _)
               ((make-forkexec-constructor
                 (list #$(file-append udiskie "/bin/udiskie")
                       "--tray"
                       ;; (string-append "--file-manager="
                       ;;                #$(file-append xdg-utils "/bin/xdg-open"))
                       )
                 #:environment-variables
                 ;; (list (string-append "WAYLAND_DISPLAY=" wayland-display))
                 (call-with-input-file "/tmp/env-for-applets" read)))))
    (stop #~(make-kill-destructor))
    (respawn? #f)
    (auto-start? #f))))

(define udiskie-service-type
  (service-type (name 'he-udiskie)
                (extensions
                 (list (service-extension
                        home-shepherd-service-type
                        udiskie-shepherd-service)))
                (default-value #f)))
#+end_src
*** Base HE
#+begin_src scheme :tangle (meta-in-dir "base-he.scm")
(define-module (ebullient home base-he)
  #:use-module (gnu home)
  #:use-module ((donnager client) #:prefix d:)
  #:use-module (ebullient)
  #:use-module (ebullient home components)
  #:use-module (mendicant utils)
  #:export (base-he))

(define* (base-he #:key
                  system
                  account
                  developer?)
  (let* ((login-shell
          (let ((shell (get (d:pull '(#:user/login-shell) user) #:user/login-shell)))
            (if (equal? shell #:shell/default)
                default-login-shell shell)))
         (interactive-shell (if developer?
                                #:shell/zsh login-shell))
         (feature?
          (let ((features (get (d:pull '(#:system/features) system) #:system/features)))
            (lambda (feat)
              (member feat features))))
         (nix? (feature? #:feature/nix))
         (desktop? (feature? #:feature/desktop))
         (pipewire? (feature? #:feature/pipewire))
         (session?
          (lambda (s)
            (member s (get (d:pull '(#:user/sessions) account) #:user/sessions))))
         (sway? (session? :session/sway)))
    (home-environment
     (services
      (-> '()
          (he-shells #:login-shell login-shell
                     #:interactive-shell interactive-shell)
          he-extra-profiles
          (as-> $
            (if nix?
                (he-nix $) $)
            (if developer?
                (-> $
                    (he-emacs #:zsh-vterm? (eq? interactive-shell #:shell/zsh)
                              ;; #:config (kvm #:emacs ...)
                              )
                    he-doom
                    (he-direnv #:shell interactive-shell)))
            (if desktop?
                (-> $
                    (as->$
                      (if pipewire?
                          (he-pipewire $) $))
                    he-flatpak
                    (as->$
                      (if sway?
                          (he-sway $) $)))
                $)))))))
#+end_src
*** \
#+begin_src sh :var he_name="" he_dir=(meta-get-dir)
guix pull --channels="$he_dir"/$he_name-channels-lock
#+end_src
- TODO expression shouldn't reference "exhuberant"
#+begin_src sh :var he_name=""
guix home \
	--load-path=. \
	--expression="(@ (exuberant he $he_name) he)" \
	reconfigure
#+end_src
*** Guix extra profiles
:PROPERTIES:
:meta-dir+: /manifests
:END:
**** Manifests
#+name: guix-extra-profile-path
#+begin_src sh :var profileName="" :noweb yes
echo "<<guix-extra-profiles-path>>/$profileName/$profileName"
#+end_src
***** Multiverse :manifest:
#+begin_src scheme :tangle (meta-in-dir "multiverse")
(specifications->manifest
 '("btrfs-progs" ; TODO "depends on"/"exists because of" the stateless module. Maybe it should be in some "system administration" section of Home config

   ;; "protonvpn-cli" ; REVIEW Appears to be broken after the big Guix frozen-updates upgrade.

   ;; General
   "xdg-utils"
   "gtk+:bin" ; TODO Gate this with `desktop?`
   "curl"
   "zip"
   "unzip"

   ;; Nice-to-have ; TODO might get rid of these and just `guix shell' or install as-needed
   "tree"
   "woof"


   ;;; Apps

   ;; Nyxt
   "nyxt"
   "gst-libav"
   "gst-plugins-bad"
   "gst-plugins-base"
   "gst-plugins-good"
   "gst-plugins-ugly"

   ;; "gimp" ; TODO maybe. Or just install as-needed with `guix shell`
   ))
#+end_src
#+begin_src elisp :noweb-ref guix-extra-profiles :noweb-sep " " :noweb yes
"<<guix-extra-profile-path("multiverse")>>"
#+end_src
**** \
#+name: install-profiles
#+begin_src sh :results output silent :dir (meta-get-dir) :noweb yes :async
gepp="<<guix-extra-profiles-path>>"
GUIX_EXTRA_PROFILES="${gepp/#\~/$HOME}"

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="*";
fi

for profile in $profiles; do
  profileName=$(basename $profile .scm)
  profilePath="$GUIX_EXTRA_PROFILES/$profileName"
  mkdir -p $profilePath
  guix package --profile="$profilePath/$profileName" --manifest="$profileName"
done
#+end_src
#+call: install-profiles[:cmdline ...]()

#+name: upgrade-profiles
#+begin_src sh :results output silent :noweb yes :async
gepp="<<guix-extra-profiles-path>>"
GUIX_EXTRA_PROFILES="${gepp/#\~/$HOME}"

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$GUIX_EXTRA_PROFILES/*";
fi

for profile in $profiles; do
  profileName=$(basename $profile)
  profilePath="$GUIX_EXTRA_PROFILES/$profileName"
  guix package --profile="$profilePath/$profileName" --manifest="$profileName"
done
#+end_src
#+call: upgrade-profiles[:cmdline ...]()
** \
#+begin_src sh :var name="" dir=""
guix time-machine \
	--load-path=. \
	--channels="$dir"/$name-channels \
	-- \
	describe --format=channels > "$dir"/$name-channels-lock
#+end_src
** Dev
*** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
,*
#+end_src
* Projects
:PROPERTIES:
:meta-dir+: /penitent
:END:
- TODO call this something different? Maybe it'll end up being just a container for Guix packages shared across projects and should just be called "Packages" or "Auxillary" or something.
** Packages
:PROPERTIES:
:meta-dir+: /penitent/packages
:END:
*** AWS CLI :package:version:
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "aws.scm")
:END:
- TODO
  - generate the autocompletion index
    As described here:
    [[https://github.com/aws/aws-cli/tree/v2#cli-dev-version][GitHub - aws/aws-cli at v2 (cli dev version)]]
    [[https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/tools/admin/awscli2/default.nix#L95][nixpkgs/default.nix at nixos-unstable · NixOS/nixpkgs · GitHub]]
  - set up command completion
    [[https://github.com/aws/aws-cli/tree/v2#command-completion][GitHub - aws/aws-cli at v2 (command completion)]]
#+begin_src scheme
(define-module (penitent packages aws)
  #:use-module (guix build-system python)
  #:use-module (guix download)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module ((guix utils) #:select (substitute-keyword-arguments))
  #:use-module ((gnu packages check) #:select (python-mock python-pytest python-coverage python-pytest-cov python-pytest-xdist))
  #:use-module ((gnu packages cmake) #:select (cmake))
  #:use-module ((gnu packages groff) #:select (groff))
  #:use-module ((gnu packages python-web) #:select (awscli) #:prefix python-web:)
  #:use-module ((gnu packages python-web) #:select (python-urllib3))
  #:use-module ((gnu packages python-xyz) #:select (python-prompt-toolkit) #:prefix python:)
  #:use-module ((gnu packages python-xyz) #:select (python-colorama-for-awscli python-docutils-0.15 python-wcwidth python-distro python-jmespath python-boto3 python-botocore python-six python-jsonschema))
  #:use-module ((gnu packages python-crypto) #:select (python-cryptography) #:prefix python-crypto:)
  #:use-module ((gnu packages serialization) #:select (python-ruamel.yaml))
  #:use-module ((gnu packages time) #:select (python-dateutil)))

(define-public awscli
  (package
    (inherit python-web:awscli)
    (version "2.4.23")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/aws/aws-cli")
             (commit version)))
       (sha256
        (base32
         "1xdgj6w6ibfiwpzd85g9lhk106nxrw06c9bdcrmfr68zaa32k6ff"))
       (file-name (git-file-name (package-name python-web:awscli) version))))
    (arguments
     (substitute-keyword-arguments (package-arguments python-web:awscli)
       ;; A few tests fail at present but I'm not gonna sweat it. A number more error but I think that's mostly due to the lack of network access. The vast majority pass:
       ;; Total tests ~7000 (failures=3, errors=222, skipped=6)
       ((#:tests? _) #f)))
    (propagated-inputs
     (list python-colorama-for-awscli
           python-docutils-0.15
           python-cryptography
           python-ruamel.yaml-0.15
           python-wcwidth
           python-prompt-toolkit
           python-distro-1.5
           python-awscrt
           python-dateutil
           python-jmespath
           python-urllib3))
    (native-inputs
     (list groff
           ;; For tests.
           python-jsonschema
           python-mock
           python-pytest
           python-coverage
           python-pytest-cov
           python-pytest-xdist))))
#+end_src
**** Deps :package:version:
#+begin_src scheme
(define python-awscrt
  (package
    (name "python-awscrt")
    (version "0.12.4")
    (source
      (origin
        (method url-fetch)
        (uri (pypi-uri "awscrt" version))
        (sha256
          (base32 "1cmfkcv2zzirxsb989vx1hvna9nv24pghcvypl0zaxsjphv97mka"))))
    (build-system python-build-system)
    (native-inputs
     (list
      cmake
      ;; For tests.
      python-boto3))
    (home-page "https://github.com/awslabs/aws-crt-python")
    (synopsis "A common runtime for AWS Python projects")
    (description "This package provides a common runtime for AWS Python projects")
    (license license:asl2.0)))

(define python-cryptography
  (package
    (inherit python-crypto:python-cryptography)
    (version "3.3.2")
    (source (origin
              (method url-fetch)
              (uri (pypi-uri "cryptography" version))
              (sha256
               (base32
                "1vcvw4lkw1spiq322pm1256kail8nck6bbgpdxx3pqa905wd6q2s"))))))

(define python-ruamel.yaml-0.15
  (package
    (inherit python-ruamel.yaml)
    (version "0.15.100")
    (source (origin
              (method url-fetch)
              (uri (pypi-uri "ruamel.yaml" version))
              (sha256
               (base32
                "1r5j9n2jdq48z0k4bdia1f7krn8f2x3y49i9ba9iks2rg83g6hlf"))))))

(define python-prompt-toolkit
  (package
    (inherit python:python-prompt-toolkit)
    (version "3.0.28")
    (source (origin
              (method url-fetch)
              (uri (pypi-uri "prompt_toolkit" version))
              (sha256
               (base32
                "0l0nnm9fvs8lklk2qq8mylb9jrlxvlqzpmqr4n7rdhl63rmx274z"))))))

(define python-distro-1.5
  (package
    (inherit python-distro)
    (version "1.5.0")
    (source (origin
              (method url-fetch)
              (uri (pypi-uri "distro" version))
              (sha256
               (base32
                "14nz51cqlnxmgfqqilxyvjwwa5xfivdvlm0d0b1qzgcgwdm7an0f"))))))
#+end_src
*** Datomic CLI tools :package:version:
- TODO =bin/datomic= introduces a dependency (~com.datomic/tools.ops~)
  Is that something I'd want to include in the package or whatever?
#+begin_src scheme :tangle (meta-in-dir "datomic.scm")
(define-module (penitent packages datomic)
  #:use-module (guix build-system copy)
  #:use-module (guix download)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module ((gnu packages compression) #:select (unzip))
  #:use-module ((nonguix licenses) #:prefix license:))

(define-public datomic-cli-tools
  (package
    (name "datomic-cli-tools")
    (version "1.0.91")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "https://datomic-releases-1fc2183a.s3.amazonaws.com/tools/datomic-cli/datomic-cli-" version ".zip"))
       (sha256
        (base32
         "1xicmbsig8f1p5r9rxkhndi0f9l9w421zf49rbx44yc6v0db523b"))))
    (build-system copy-build-system)
    (arguments
     `(#:install-plan
       '(("." "bin" #:include-regexp ("^\\./datomic")) ; Files that start with "datomic" are the scripts. Restrict to this subset to automatically pick up any added in the future without being too inclusive about what we add to bin.
         ("README.txt" "share/doc/datomic/"))
       #:phases
       ,#~(modify-phases %standard-phases
            (add-after 'install 'make-scripts-executable
              (lambda _
                (for-each (lambda (f) (chmod f #o555))
                          (find-files (string-append #$output "/bin"))))))))
    (native-inputs
     (list unzip))
    (home-page "https://docs.datomic.com/cloud/index.html")
    (synopsis "CLI tools for Datomic")
    (description synopsis)
    (license (license:nonfree "https://www.datomic.com/cloud-eula.html"))))
#+end_src
** Clojure manifest WIP :manifest:
- TODO =clojure-tools= has, at the time of this writing, just been upstreamed from nonguix to guix. However the guix package depends on the guix =clojure= package (presumably instead of just using the one included in the downloaded clojure-tools) which is currently on version 1.10.0 (I'll definitely want a newer version) and has a dependency on icedtea (which is jdk version 8 even though now I'll want openjdk version 11 to match datomic or version 17 because it's the newest one supported by clojure). Rewrite the =clojure= package =jre= dependency to use a newer version and bump clojure somehow? What does the =clojure= package being old mean for me, if anything, since projects definte their own clojure versions (perhaps just that version of clojure will be used when invoking tools outside a project, and even then I could just specify a higher clojure version in my home directory =deps.edn=, no?) Just resurrect the nonguix clojure-tools packge in my own dotfiles? If I keep using the guix clojure-tools package that depends on =clojure= does it having its own non-propagated java dependency mean I don't have to install one in my profile any more?
  - [2022-02-26 Sat] Andrew tropin says it's important to use the =jdk= output of openjdk (like ~(list openjdk16 "jdk")~) since the default output is the jre
#+begin_src scheme
(specifications->manifest
 '("clojure-tools" ; TODO comes from nonguix channel, I might be making that explicit later
   "icedtea" ; For clojure-tools ; TODO can I make this a non-propagated input to "clojure-tools" (`substitute*' or `wrap-program'? Automatic in some way?) or is that a bad idea / a pain?
   "clj-kondo")) ; TODO comes from nonguix channel, I might be making that explicit later
#+end_src
** Dev
*** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
,*
#+end_src
* DB
:PROPERTIES:
:meta-dir+: /donnager
:END:
** Core
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "donnager-core.el")
:END:
#+begin_src elisp
;;; -*- lexical-binding: t; -*-

(require 'dash)
(require 'tangential)
#+end_src




#+begin_src elisp
(defun db--entity->datoms (entity)
  (->> entity
       ;; FIXME what was `map-pairs' for?
       map-pairs
       (map-remove (lambda (k _)
                     (equal k :db/id)))
       (-mapcat (-lambda ((a . v))
                  (let ((avs (if (listp v)
                                 (-map (lambda (i) `(,a ,i)) v)
                               `((,a ,v)))))
                    (-map (-lambda ((attr value))
                            (db--datom (map-elt entity :db/id) attr value))
                          avs))))))
#+end_src

#+name: base-schema
| =:db/id=        | =:db/valueType=  | =:db/cardinality=   |
|-----------------+------------------+---------------------|
| :db/id          | :db.type/keyword | :db.cardinality/one |
| :db/valueType   | :db.type/keyword | :db.cardinality/one |
| :db/cardinality | :db.type/keyword | :db.cardinality/one |

#+begin_src elisp
(defun db--parse-schema-entity (entity)
  (map-apply (lambda (a b)
               (cons (intern a) (intern b)))
             entity))
#+end_src

#+begin_src elisp :var base-schema-table=base-schema
(defun db--parse-base-schema ()
  (->> base-schema-table
       db--parse-org-table
       (-map #'db--parse-schema-entity)
       (-mapcat #'db--entity->datoms)))
#+end_src
#+begin_src elisp
(setq db--base-schema-memo nil)

(defun db--base-schema ()
  (if db--base-schema-memo
      db--base-schema-memo
    (setq db--base-schema-memo db--parse-base-schema)))


(defun db--with-base-schema (db)
  (-concat (db--base-schema) db))
#+end_src



#+begin_src elisp
(setq db--schema-defaults
      (kvm :db.valueType :db.type/string
           :db.cardinality :db.cardinality/one))

(defun db--get-schema (db attr schema-attr)
  (-as-> db $
         (db--with-base-schema $)
         (-first (lambda (datom)
                   (db--datom-match-e+a datom attr schema-attr))
                 $)
         (if $
             (db--dget $ :datom/v)
           (map-elt db--schema-defaults schema-attr))))
#+end_src




#+begin_src elisp
(defun db--datom (e a v)
  (list e a v))

(defun db--dget (datom component)
  ((pcase component
     (:datom/e #'-first-item)
     (:datom/a #'-second-item)
     (:datom/v #'-third-item))
   datom))

(defun db--datom-match-e+a (datom e a)
  (and (equal (db--dget datom :datom/e) e)
       (equal (db--dget datom :datom/a) a)))

(defun db--assert (db datom)
  (cons datom))
#+end_src
*** \
#+begin_src elisp
(provide 'donnager-core)
#+end_src
** Client API
*** Elisp
*** Scheme
#+begin_src scheme :tangle (meta-in-dir "donnager/client.scm")
(define-module (donnager client)
  #:export (q
            q-many
            pull
            pull-many))

(define (q)
  #f)
(define (q-many)
  #f)
(define (pull)
  #f)
(define (pull-many)
  #f)
#+end_src
** Org API
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "donnager-org.el")
:END:
#+begin_src elisp
;;; -*- lexical-binding: t; -*-

(require 'donnager-core)

(setq db--empty-db '())
#+end_src
*** Data
#+begin_src elisp
(setq db--parse-keyword #'intern)

(defun match-string-one (regex s)
  (save-match-data
    (when (string-match regex s)
      (match-string 1 string))))

(setq db--parsers
      (kvm :db.type/keyword db--parse-keyword
           :db.type/string #'identity
           :db.type/boolean (lambda (s)
                              (pcase s
                                ("true" t)
                                ("false" nil)))
           :db.type/symbol (lambda (s)
                             (intern (match-string-one (rx "'" (group (* anything))) s)))))

(defalias 'db--parse-attr #'db--parse-keyword)

(defun db--parse-value (db a raw-v)
  (let* ((type (db--get-schema db a :db/valueType))
         (parser (map-elt db--parsers type))
         (cardinality (db--get-schema db a :db/cardinality)))
    (if (equal cardinality :db.cardinality/many)
        (-as-> raw-v $
               (split-string $ (rx (+ whitespace)))
               (-map (lambda (raw-item)
                       (funcall parser raw-item))))
      (funcall parser raw-v))))

(defun db--parse-entity (db raw-entity)
  (map-apply (lambda (raw-a raw-v)
               (let ((a (db--parse-attr raw-a)))
                 (cons a
                       (db--parse-value db a raw-v))))
             raw-entity))
#+end_src
*** Tables
#+begin_src elisp
(defun db--normalize-org-table (table)
  (-remove (-partial #'equal 'hline) table))

(defun db--strip-org-emphasis (s)
  (if (and (< 2 (length s))
           (let ((first (substring s 0 1))
                 (last (substring s -1)))
             (and (equal first last)
                  (member first (map-keys org-emphasis-alist)))))
      (substring s 1 -1)
    s))

(defun db--parse-org-table (table)
  (let* ((table (db--normalize-org-table table))
         (attrs (-map #'db--strip-org-emphasis (car table)))
         (rows (cdr table)))
    (-map (lambda (row)
            (->> row
                 (-zip-pair attrs)
                 (map-remove (lambda (_ v)
                               (equal v "")))))
          rows)))
#+end_src
*** Injest
#+begin_src elisp
(defun db--raw-entity-into-db (db raw-entity)
  (->> raw-entity
       (db--parse-entity db)
       db--entity->datoms
       (-reduce-from #'db--assert db)))

(defun db--tables-into-db (tables)
  (->> tables
       (-mapcat #'db--parse-org-table)
       (-reduce-from #'db--raw-entity-into-db db--empty-db)))

(defun db--load (table-refs)
  (require 'ob-ref)
  (db--tables-into-db
   (-map #'org-babel-ref-resolve table-refs)))
#+end_src
*** Serialize
#+begin_src elisp
(setq db--tokenize-keyword #'identity)

(setq db--tokenizers
      (kvm :db.type/keyword db--tokenize-keyword
           :db.type/string #'identity
           :db.type/boolean (lambda (v)
                              (if v 'true 'false))
           :db.type/symbol #'identity))

(defalias 'db--tokenize-attr #'db--tokenize-keyword)

(defun db--tokenize-value (db a v)
  (let* ((type (db--get-schema db a :db/valueType))
         (tokenizer (map-elt db--tokenizers type)))
    (funcall tokenizer v)))

(defun db--tokenize-datom (db datom)
  (let ((e (db--dget datom :datom/e))
        (a (db--dget datom :datom/a))
        (v (db--dget datom :datom/v)))
    (db--datom
     (db--tokenize-value db :db/id e)
     (db--tokenize-attr a)
     (db--tokenize-value db a v))))

(defalias 'db--serialize-fn (-partial #'format "%S"))

(defun db--spit (f content)
  (with-temp-file f
    (insert content)))

(defun db--serialize (file datoms)
  (with-temp-file file
    (->> datoms
         (-map (-partial #'tokenize-datom datoms))
         db--serialize-fn
         ;; db--pretty-print-db
         db--spit)))

;; TODO pretty-printing
;; https://emacs.stackexchange.com/questions/10382/perform-function-until-it-returns-user-error

;; (defmacro db--buffer->string (&rest body)
;;   `(with-temp-buffer
;;      ,@body
;;      (buffer-string)))

;; (defun db--pretty-print-db (s)
;;   (let ((delim "\n "))
;;     (dt--buffer->string
;;      (insert s)
;;      (goto-char (point-min))
;;      (forward-char)
;;      (condition-case _
;;          (while t
;;            (forward-sexp)
;;            (insert delim))
;;        (scan-error nil))
;;      (dotimes (_ (length delim))
;;        (backward-delete-char)))))
#+end_src
*** Deserialize
#+begin_src elisp
(setq db--marshall-keyword #'identity)

(setq db--marshallers
      (kvm :db.type/keyword db--marshall-keyword
           :db.type/string #'identity
           :db.type/boolean (lambda (token)
                              (pcase s
                                ('true t)
                                ('false nil)))
           :db.type/symbol #'identity))

(defalias 'db--marshall-attr #'db--marshall-keyword)

(defun db--marshall-value (db a v)
  (let* ((type (db--get-schema db a :db/valueType))
         (marshaller (map-elt db--marshallers type)))
    (funcall marshaller v)))

(defun db--marshall-datom (db tokenized-datom)
  (let ((e (db--dget tokenized-datom :datom/e))
        (a (db--dget tokenized-datom :datom/a))
        (v (db--dget tokenized-datom :datom/v)))
    (db--datom
     (db--marshall-value db :db/id e)
     (db--marshall-attr a)
     (db--marshall-value db a v))))

(defalias 'db--deserialize-fn #'read)

(defun db--slurp (f)
  (with-temp-buffer
    (insert-file-contents f)
    (buffer-string)))

(defun db--deserialize (file)
  (->> (db--slurp file)
       db--deserialize-fn
       (-map #'marshall-datom)))
#+end_src
*** \
#+begin_src elisp
(provide 'donnager-org)
#+end_src
** Dev
*** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
,*
#+end_src
* Utils
** Scheme
:PROPERTIES:
:meta-dir+: /mendicant
:END:
*** Utils
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "mendicant/utils.scm")
:END:
#+begin_src scheme
(define-module (mendicant utils)
  #:use-module ((guix inferior) #:select (inferior-for-channels lookup-inferior-packages))
  #:use-module (gnu services)
  #:use-module ((ice-9 match) #:select (match-lambda))
  #:use-module ((srfi srfi-1) #:select (take drop remove fold first))
  #:export (update-list
            when-let
            if-let
            when-not
            if-not
            partial
            ->
            ->>
            as->
            kvm
            get
            keys
            massoc
            merge
            keyvals
            update-services*
            update-services))

(define (update-list l pred f)
  (map (lambda (x)
         (if (pred x) (f x) x))
       l))
#+end_src
**** Branching
#+begin_src scheme
(define-syntax when-let
  (syntax-rules ()
    ((_ ((var expr)) body ...)
     (let ((var expr))
       (when var body ...)))))

(define-syntax if-let
  (syntax-rules ()
    ((_ ((var expr)) then else)
     (let ((var expr))
       (if var then else)))))

(define-syntax when-not
  (syntax-rules ()
    ((_ test body ...)
     (when (not test) body ...))))

(define-syntax if-not
  (syntax-rules ()
    ((_ test then else)
     (if (not test) then else))))
#+end_src
**** Functions
#+begin_src scheme
(define* (partial f #:rest args)
  (lambda* (#:rest more)
    (apply f (append args more))))

(define* (rpartial f #:rest args)
  (lambda* (#:rest more)
    (apply f (append more args))))

(define-syntax ->
  (syntax-rules ()
    ((_ value) value)
    ((_ value (f . body) next ...) (-> (f value . body) next ...))
    ((_ value f next ...) (-> (f value) next ...))))

(define (thread-last-helper f value . body)
  (apply f (append body (list value))))

(define-syntax ->>
  (syntax-rules ()
    ((_ value) value)
    ((_ value (f . body) next ...) (->> (thread-last-helper f value . body) next ...))
    ((_ value f next ...) (-> (f value) next ...))))

(define-syntax as->
  (syntax-rules ()
    ((_ expr name) expr)
    ((_ expr name form form* ...)
     (let ((name expr))
       (as-> form name form* ...)))))
#+end_src
**** Maps
#+begin_src scheme
(define* (kvm #:rest keyvals)
  (let loop ((m '())
             (more keyvals))
    (if (null? more)
        m
        (loop (cons (as-> more $
                          (take $ 2)
                          (apply cons $))
                    m)
              (drop more 2)))))

(define get assoc-ref)

(define (keys m)
  (map car m))

(define (massoc m k v)
  (->> m
       (remove (match-lambda
                 ((k1 . _)
                  (equal? k k1))))
       (cons '(k . v))))

(define* (merge #:rest maps)
  (fold
   (lambda (m1 m2)
     (fold
      (match-lambda
        (((k . v) res)
         (massoc res k v)))
      m1 m2))
   (kvm)
   maps))

(define (keyvals m)
  (->> m
       (map (match-lambda
              ((k . v)
               (list k v))))
       (apply append)))
#+end_src
**** Guix
#+begin_src scheme
(define (update-services* services pred update-fn)
  (update-list
   services
   pred
   (lambda (svc)
     (service (service-kind svc)
              (update-fn (service-value svc))))))

(define (update-services services kind update-fn)
  (update-services*
   services
   (lambda (svc)
     (eq? (service-kind svc) kind))
   update-fn))

(define (get-inferior-package channels package)
  (-> (inferior-for-channels channels)
      (lookup-inferior-packages package)
      first))
#+end_src
*** Dev
**** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
,*
#+end_src
** Emacs Lisp
:PROPERTIES:
:meta-dir+: /tangential
:END:
*** Utils
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "utils.el")
:END:
#+begin_src elisp
(defun kvm (&rest keyvals)
  (->> keyvals
       (-partition 2)
       (-map (-lambda ((a b))
               (cons a b)))))

(provide 'tangential)
#+end_src
*** Dev
**** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
,*
#+end_src
* Configurations
:PROPERTIES:
:meta-dir+: /exuberant
:END:
#+name: db/systems-common
| =:db/id=          | =:system/features=                              |
|-------------------+-------------------------------------------------|
| :system/frostfire | :feature/nix :feature/desktop :feature/pipewire |

#+name: db/users-common
| =:db/id=      | =:entity/channel-deps= | =:user/full-name=      | =:user/login-shell= | =:user/sessions=             |
|---------------+------------------------+------------------------+---------------------+------------------------------|
| :user/primary | :channel/nonguix       | Krzysztof Baranowski   | :shell/default      | :session/gnome :session/sway |
| :user/aux     | :channel/nonguix       | Phil Coulson           | :shell/default      | :session/gnome :session/sway |
| :user/guest   | :channel/nonguix       | Speak Friend and Enter | :shell/default      | :session/gnome               |

** Operating systems
:PROPERTIES:
:meta-dir+: /exuberant/os
:END:
#+name: db/users-system
| =:db/id=      | =:user/username= | =:user/admin?= | =:user/password= |
|---------------+------------------+----------------+------------------|
| :user/primary | pharcosyle       | true           |                  |
| :user/aux     | pcoulson         | true           |                  |
| :user/guest   | gandalf          |                | mellon           |

*** Frostfire
#+name: db/systems-frostfire
| =:db/id=          | =:system/features=                                                                  |
|-------------------+-------------------------------------------------------------------------------------|
| :system/frostfire | :feature/linux-nonfree :feature/disk-encryption :feature/stateless :feature/macbook |

#+begin_src scheme :tangle (meta-in-dir "frostfire.scm") :noweb yes
(define-module (exuberant os frostfire)
  #:use-module (ebullient system base-os))

(define-public os
  (base-os #:system #:system/frostfire
           #:host-name "frostfire"
           #:timezone "America/Los_Angeles"
           #:accounts '(#:user/primary
                        #:user/aux
                        #:user/guest)
           #:luks-uuid "<<frostfire-luks-uuid>>"
           ;; #:auto-login-account #:user/primary ; REVIEW Enable this later.
           #:console? #t
           #:laptop? #t
           #:bluetooth? #t))
#+end_src
**** Channel deps
#+begin_src scheme :tangle (meta-in-dir "frostfire-channels")
(use-modules (ebullient system channels))

(get-system-channels
 (system-channel-deps #:system/frostfire))
#+end_src
**** Channels lock :version:
#+begin_src scheme :tangle (meta-in-dir "frostfire-channels-lock")
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "85f026f36ae93ac3ce3fa50150848eab9b31b69f")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (branch "master")
        (commit
          "35533c763a81365e14d0b58ad262e8f88c82872c")
        (introduction
          (make-channel-introduction
            "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
            (openpgp-fingerprint
              "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))
#+end_src
**** LUKS UUID :external_state:
#+name: frostfire-luks-uuid
#+begin_src org
bdda56af-6ca0-4953-bc13-d5af8715e0e5
#+end_src
** Home environments
:PROPERTIES:
:meta-dir+: /exuberant/he
:END:
#+name: db/users-home
| =:db/id=      | =:entity/channel-deps= | =:user/email=            |
|---------------+------------------------+--------------------------|
| :user/primary | :channel/flat          | pharcosyle@gmail.com     |
| :user/aux     | :channel/flat          | pharcosyle+aux@gmail.com |

*** Solitude
#+begin_src scheme :tangle (meta-in-dir "solitude.scm")
(define-module (exuberant he solitude)
  #:use-module (ebullient home base-he)
  #:export (he))

(define-public he
  (base-he #:system #:system/frostfire
           #:account #:user/primary
           #:developer? #t))
#+end_src
**** Solitude old WIP
#+begin_src scheme
(define-module (exuberant he solitude)
  #:use-module (ebullient home base-he)
  #:export (he))

(define he
  (home-environment
   (packages (list ;; (specification->package "font-adobe-source-code-pro")
                   (specification->package "font-awesome") ; TODO for waybar, move this somewhere later
                   (specification->package "font-google-noto") ; TODO for sway (or any non-DE probably)
                   ))
   (services
    (list
     (service gammastep-service-type)
     (service network-manager-service-type)
     (service udiskie-service-type)

     (service home-xdg-user-directories-service-type
              (let* ((xdg-user-subdir "/files")
                     (xdg-dir (lambda (path)
                                (string-append "$HOME" xdg-user-subdir path))))
                (home-xdg-user-directories-configuration
                 (desktop "$HOME/desktop")
                 (documents (xdg-dir "/docs"))
                 (download "$HOME/dl")
                 (music (xdg-dir "/music"))
                 (pictures (xdg-dir "/pics"))
                 (publicshare (xdg-dir "/public"))
                 (templates (xdg-dir "/templates"))
                 (videos (xdg-dir "/vids")))))

     (service home-mcron-service-type
              (home-mcron-configuration
               (jobs
                (list
                 #~(job '(next-hour)
                        (lambda ()
                          (call-with-output-file "/tmp/test-mcron-file"
                            (lambda (port)
                              (display "Output!" port))))
                        "Test mcron output")))))
     (service home-git-service-type
              (home-git-configuration
               (config
                `((user
                   ((name . "Krzysztof Baranowski") ; FIXME <user-full-name>>
                    (email . "pharcosyle@gmail.com"))) ; FIXME <user-email>>
                  ;; (http "https://weak.example.com"
                  ;;   ((ssl-verify . #f)))
                  ;; (gpg
                  ;;  ((program . ,(file-append gnupg "/bin/gpg"))))
                  ;; (sendmail
                  ;;  ((annotate . #t)))
                  ))))
     (service home-ssh-service-type
              ;; (home-ssh-configuration
              ;;  (extra-config
              ;;   (list
              ;;    (ssh-host "savannah"
              ;;              '((compression . #f))))))
              )


     ;; TODO Examples from RDE I may want to make use of.
     ;; (service home-keyboard-service-type
     ;;          (keyboard-layout "us,ru" "dvorak,"
     ;;                           #:options '("grp:win_space_toggle" "ctrl:nocaps")))
     ;; (service home-gnupg-service-type
     ;;          (home-gnupg-configuration
     ;;           (gpg-agent-config
     ;;            (home-gpg-agent-configuration
     ;;             (ssh-agent? #t)))))
     ;; (service home-state-service-type
     ;;          (append
     ;;           (list
     ;;            (state-rsync "/home/bob/tmp/example-rsync-state/"
     ;;                         "abcdw@olorin.lan:/var/services/homes/abcdw/tmp-state/")
     ;;            (state-git "/home/bob/tmp/talkes/"
     ;;                       "git@git.sr.ht:~abcdw/rde"))))
     ))))
#+end_src
**** Channel deps
#+begin_src scheme :tangle (meta-in-dir "solitude-channels")
(use-modules (ebullient home channels))

(get-home-channels
 (user-channel-deps #:user/primary))
#+end_src
**** Channels lock
#+begin_src scheme :tangle (meta-in-dir "solitude-channels-lock")
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (branch "master")
        (commit
          "04ac1a248c188e4e49e6372e8336c31d32d1c96e")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
        (name 'flat)
        (url "https://github.com/flatwhatson/guix-channel.git")
        (branch "master")
        (commit
          "ece373bcd1e00ef746fb7b104e56ab610cc4af2a")
        (introduction
          (make-channel-introduction
            "33f86a4b48205c0dc19d7c036c85393f0766f806"
            (openpgp-fingerprint
              "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
      (channel
        (name 'rde)
        (url "https://git.sr.ht/~abcdw/rde")
        (branch "master")
        (commit
          "520e1429593c2daf4a296a9ea55c4aa32848b491")
        (introduction
          (make-channel-introduction
            "257cebd587b66e4d865b3537a9a88cccd7107c95"
            (openpgp-fingerprint
              "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
      (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (branch "master")
        (commit
          "35533c763a81365e14d0b58ad262e8f88c82872c")
        (introduction
          (make-channel-introduction
            "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
            (openpgp-fingerprint
              "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))
#+end_src
**** Dotfiles
- TODO move the "Dotfiles" headline somewhere better later?

#+name: db/palette
| =:db/id=                 | =:color/hex= |
|--------------------------+--------------|
| :color/fg                | #dee2f8      |
| :color/highlight         | #8496ff      |
| :color/comments          | #63677f      |
| :color/comment-delimiter | #939abd      |
| :color/red               | #fb8578      |
| :color/orange            | #fdce5f      |
| :color/green             | #9fed9c      |
| :color/yellow            | #eddc91      |
| :color/blue              | #7db9fe      |
| :color/dark-blue         | #5f68de      |
| :color/magenta           | #e29bf7      |
| :color/violet            | #aeb9f3      |
| :color/cyan              | #75e0f9      |
| :color/gold              | #fdd94a      |
| :color/pink              | #ff9999      |

- FIXME remove this
#+name: palette
| Name              | Color   |
|-------------------+---------|
| fg                | #dee2f8 |
| highlight         | #8496ff |
| comments          | #63677f |
| comment-delimiter | #939abd |
| red               | #fb8578 |
| orange            | #fdce5f |
| green             | #9fed9c |
| yellow            | #eddc91 |
| blue              | #7db9fe |
| dark-blue         | #5f68de |
| magenta           | #e29bf7 |
| violet            | #aeb9f3 |
| cyan              | #75e0f9 |
| gold              | #fdd94a |
| pink              | #ff9999 |

***** Doom private
:PROPERTIES:
:meta-dir+: /doom-private
:END:
****** Init
#+begin_src elisp :tangle (meta-in-dir "init.el")
;;; -*- lexical-binding: t; -*-

(doom! :completion
       (company +childframe)
       (vertico +icons)

       :ui
       doom
       doom-dashboard
       (emoji +unicode)
       hl-todo
       hydra
       indent-guides
       (ligatures +extra)
       modeline
       nav-flash
       ophints
       (popup +defaults +all)
       tabs
       treemacs
       vc-gutter
       vi-tilde-fringe
       window-select
       workspaces

       :editor
       (evil +everywhere)
       file-templates
       fold
       format
       lispy
       multiple-cursors
       rotate-text
       snippets
       word-wrap

       :emacs
       (dired +icons)
       electric
       (ibuffer +icons)
       undo
       vc

       :term
       eshell
       vterm

       :checkers
       (syntax +childframe)

       :tools
       direnv ; TODO should be contributed by direnv component
       (eval +overlay)
       lookup
       (magit +forge)
       (pass +auth)
       pdf
       prodigy ; TODO dependency of hyperdrive. Keep it enabled by default too.
       rgb
       taskrunner

       :lang
       clojure ; TODO contribute this with some Clojure module/compnent /if I end up having one/ (maybe along with the WIP clojure manifest)
       common-lisp ; TODO this should be contributed by Nyxt / my eventual nyxt project
       data
       emacs-lisp
       json
       javascript
       markdown
       nix ; TODO this should be gated by Nix inclusion like system components do.
       (org +journal)
       rest
       (scheme +guile) ; TODO Should be contributed by some Guix component (also the guix-related packages.el entries and stuff in config)
       sh
       web
       yaml ; TODO this should probably be specific to the krush/hyperdrive/afterburner(?) project

       :app
       calendar

       :config
       (default +bindings +smartparens))
#+end_src
****** Config
:PROPERTIES:
:header-args+: :tangle (meta-in-dir "config.el")
:END:
#+begin_src elisp
;;; -*- lexical-binding: t; -*-

(use-package! dash)
(use-package! s)
#+end_src
******* Personal Info :user:
#+begin_src elisp :noweb yes
(setq user-full-name "Krzysztof Baranowski" ; FIXME <user-full-name>>
      user-mail-address "pharcosyle@gmail.com") ; FIXME <user-email>>
#+end_src
******* Locals :path:
#+begin_src elisp
(defconst biome--org-dir (concat org-directory "~/org"))
(defconst biome--org-gcal-dir (concat biome--org-dir "/gcal"))

(defconst biome--very-big 1000000)

(defconst biome--theme 'doom-nuclear)
#+end_src
#+begin_src elisp :var palette=palette
(defun biome--color (color)
  (let ((k (-> color symbol-name (substring 1))))
    (cadr (assoc k palette))))
#+end_src
******* General :UI:path:
#+begin_src elisp
;; hlissner says this must be set before org loads. I'm not sure if this is a requirement of org-mode but the Doom org config certainly does a lot of gymnastics with this variable so I'll just set this exactly like the example config does.
(setq org-directory biome--org-dir)

(setq scroll-margin 10
      save-interprogram-paste-before-kill t)

;; I like having line numbers on but hlissner says they're slow so I might want to disable them at some point. Keep in mind I use them to determine what lines are continuation lines so I might have to make the right fringe bigger if I do this and set visual-line-fringe-indicators.
;; (setq display-line-numbers-type nil)
#+end_src
******** Doom resets
#+begin_src elisp
(setq-default indent-tabs-mode t)

;; I'd like to have this on but in the Doom code it says it's more efficient not to.
;; (setq-default cursor-in-non-selected-windows t)
#+end_src
******** Doom
#+begin_src elisp
;; REVIEW Might be useful if there end up being a lot more of these and they have a lot of similarities: https://www.gnu.org/software/emacs/manual/html_node/elisp/Extending-Rx.html
(add-hook! 'doom-real-buffer-functions
  ;; (defun biome-new-buffer-p (buf)
  ;;   (s-matches?
  ;;    (rx bol "*new*"
  ;;        (* "<" (+ digit) ">")
  ;;        eol)
  ;;    (buffer-name buf)))
  ;; TODO This should be in my Org config section / module but wait to move it until I'm confident I'll be continuing with this marking-buffers-as-real approach.
  (defun biome-org-src-edit-buffer-p (buf)
    (s-matches?
     (rx bol "*Org Src " (+ anything) "*"
         (* "<" (+ digit) ">")
         eol)
     (buffer-name buf))))
#+end_src
******* Keybindings :bindings:
#+begin_src elisp
(setq help-char (string-to-char "\C-_"))
#+end_src
******** Translations
#+begin_src elisp
(defun biome--trans (&rest rest)
  (-each (-partition 2 rest)
    (-lambda ((to from))
      (define-key key-translation-map (kbd to) (kbd from)))))

(biome--trans "C-h" "DEL"
              "C-?" "C-h"

              "s-h" "<left>"
              "s-j" "<down>"
              "s-k" "<up>"
              "s-l" "<right>")
#+end_src
******** Leader/localleader
#+begin_src elisp
(setq doom-leader-alt-key "s-SPC"
      doom-localleader-key "s-m"
      doom-localleader-alt-key "s-m")
#+end_src
******** General
#+begin_src elisp
(defalias 'original-yank-pop #'yank-pop)

;; REVIEW Some of these should be in `:after' (or their respective package) sections but I'm not totally certain where I want to put bindings yet and I'm lazy.
(map! "s-V" #'original-yank-pop

      "s-SPC" doom-leader-map

      ;; Adapted from Doom macOS bindings: ~/.config/emacs/modules/config/default/config.el:263
      "s-`" #'other-frame
      "s-n" #'+default/new-buffer
      "s-z" #'undo
      "s-Z" #'redo
      "s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
      "s-v" #'yank
      "s-s" #'save-buffer
      "s-x" #'execute-extended-command
      ;; REVIEW I don't think I need this, any time I'm in visual mode I can use `evil-delete` ("d")
      ;; :v "s-x" #'kill-region
      "s-/" (cmd! (save-excursion (comment-line 1)))
      :n "s-/" #'evilnc-comment-or-uncomment-lines
      :v "s-/" #'evilnc-comment-operator

      "s-t" (lookup-key doom-leader-map (kbd "`"))
      "s-f" (lookup-key doom-leader-map (kbd "s b"))
      "s-r" (lookup-key doom-leader-map (kbd "f r"))
      "s-w" (lookup-key doom-leader-map (kbd "b k"))
      "s-d w" (lookup-key doom-leader-map (kbd "w d"))
      "s-d s-w" (cmd! (kill-current-buffer)
                      (+workspace/close-window-or-workspace))
      "s-g" (lookup-key doom-leader-map (kbd "g g"))
      "s-," (lookup-key doom-leader-map (kbd "w w"))
      "s-<" (lookup-key doom-leader-map (kbd "w W"))
      "s-y" (lookup-key doom-leader-map (kbd "i y"))
      "s-{" (lookup-key doom-leader-map (kbd "b p"))
      "s-}" (lookup-key doom-leader-map (kbd "b n"))
      "s-p" (lookup-key global-map (kbd "C-~")) ; TODO if I'm keeping this, improve it to first switch focus to a/the popup window if one isn't focused already

      "s-u" (lookup-key doom-leader-map (kbd "u"))
      "s-U" #'negative-argument         ; Trying this out.
      (:map universal-argument-map
       "s-u" #'universal-argument-more)

      (:after evil-easymotion
       "s-a" (lookup-key evilem-map (kbd "SPC")))

      "s-." #'repeat

      "s-J" #'evil-scroll-down
      "s-K" #'evil-scroll-up

      (:prefix "s-d"
       "." #'repeat-complex-command

       "h" #'git-gutter:popup-hunk
       ;; "o" #'+macos/open-in-default-program ;; TODO consider a Guix alternative? Meh.
       "r" #'projectile-replace
       "t" #'tldr
       "s" #'org-save-all-org-buffers
       "a" #'link-hint-open-multiple-links
       ;; "b" (cmd! (evil-local-mode 'toggle)
       ;;           (when evil-local-mode (evil-normal-state)))
       (:prefix "c"
        "f" #'org-gcal-fetch
        "s" #'org-gcal-sync
        "p" #'org-gcal-post-at-point)))
#+end_src
******* Modules
******** Completion
********* Vertico
********** vertico
#+begin_src elisp
(after! vertico
  (map! :map vertico-map
        "DEL" #'vertico-directory-delete-char))
#+end_src
******** UI
********* Doom
********** doom-themes
- TODO get rid of this if I'm not going to try it out again
#+begin_src elisp
;; (after! doom-themes
;;   (doom-themes-visual-bell-config))
#+end_src
********* Modeline
********** doom-modeline
#+begin_src elisp
(after! doom-modeline
  ;; (setq doom-modeline-checker-simple-format nil)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-persp-name t))
#+end_src
********* Indent Guides
********** highlight-indent-guides :prog_mode:
#+begin_src elisp
(use-package! highlight-indent-guides
  :defer t
  :init
  ;; I don't want indent guides on by default, remove all the Doom module's hooks.
  (remove-hook! '(prog-mode-hook
                  text-mode-hook
                  conf-mode-hook)
    #'highlight-indent-guides-mode))
#+end_src
********* Ligatures
********** ligature
#+begin_src elisp :tangle (meta-in-dir "init.el")
(use-package-hook! ligature
  :pre-config
  (setq +ligatures-all-modes-list
        '("www")
        +ligatures-prog-mode-list
        '(;; Fira Code (from https://github.com/tonsky/FiraCode/wiki/Emacs-instructions#using-ligatureel)
          "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
          ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
          "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
          "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
          "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
          "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
          "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
          "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
          "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
          "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"
          ;; Doom defaults (just the ones not already present in Fira Code)
          "|||>" "<|||" "<==>" "||>" "::=" "=!=" "!!." ">->" "---" "<~>"
          "<||" "<-<" "_|_" "~=" "|}" "|]" "|-" "{|" "[|" "]#" ":>" ":<"
          ">:" "-|" "--" "<:" "#:" "#=" "#!" ".?" "?:" "?." "__" "(*"
          "*)" "://"))
  t)
#+end_src
******** Editor
********* Evil
********** evil :bindings:theming:
#+begin_src elisp
(after! evil
  (defun biome--set-theme-cursor-color-symbols ()
    (put 'cursor 'evil-normal-color (biome--color :gold))
    (put 'cursor 'evil-emacs-color  (biome--color :pink)))

  (defadvice! biome-update-cursor-color-a (&rest _)
    :after #'+evil-update-cursor-color-h
    (when (memq biome--theme custom-enabled-themes)
      (biome--set-theme-cursor-color-symbols)))

  (map! :m [C-i] nil)) ; Remove Doom's binding for `evil-jump-forward'.
#+end_src
********* Multiple Cursors
********** evil-multiedit :evil:
#+begin_src elisp
(after! evil-multiedit
  (setq evil-multiedit-follow-matches t))
#+end_src
********* Lisp
********** lispy
#+begin_src elisp
(use-package! lispy
  :defer t
  :init
  ;; Not using lispy, remove all the Doom module's hooks.
  (remove-hook! '(lisp-mode-hook
                  emacs-lisp-mode-hook
                  ielm-mode-hook
                  scheme-mode-hook
                  racket-mode-hook
                  hy-mode-hook
                  lfe-mode-hook
                  dune-mode-hook
                  clojure-mode-hook
                  fennel-mode-hook)
    #'lispy-mode)
  (remove-hook! 'eval-expression-minibuffer-setup-hook #'doom-init-lispy-in-eval-expression-h))
#+end_src
********** lispyville :prog_mode:bindings:
#+begin_src elisp
(use-package! lispyville
  :hook (prog-mode . lispyville-mode)
  :init
  (setq lispyville-key-theme nil) ; Prevent Doom module's invocation of `lispyville-set-key-theme' from doing anything.
  :config
  (lispyville-set-key-theme
   '(operators
     c-w
     c-u
     commentary))
  (map! :map lispyville-mode-map
        "C-s-j" #'lispyville-beginning-of-next-defun
        "C-s-k" #'lispyville-beginning-of-defun
        "C-s-," #'lispyville-end-of-defun
        "C-s-a" #'lispyville-drag-backward
        "C-s-g" #'lispyville-drag-forward
        "C-s-p" #'lispyville-prettify
        (:prefix "C-s-;"
         "R" #'lispyville-raise-list)))
#+end_src
******** Emacs
********* Dired
********** dired-x :UI:hidden:
Don't hide files in dired, remove the Doom module's hook. However, via the Doom config dired-x is only loaded when ~dired-omit-mode~ is triggered so add another hook that mimics this (loads dired-x after the first use of dired). A simple =:after= would probably be fine too (and less odd) but this is lazier.
- TODO dired buffers always marked modified
  *wait to do this until I do my dired project*
  Removing the ~dired-omit-mode~ hook causes dired buffers to start off marked as modified. I don't think this was happening until I upgraded to Emacs 29 so maybe this will resolve itself on a later Emacs upgrade.
  - although even before this started happenning I recall dired buffers being marked modified and annoying to close irritating me. I don't know why I'd want that behavior to begin with but I suspect there are good reasons.
    Some remarks on modified dired buffers: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Reverting-Dired.html]]
#+begin_src elisp
(use-package! dired-x
  :defer t
  :init
  (remove-hook! 'dired-mode-hook #'dired-omit-mode)
  (add-hook! 'dired-mode-hook
    (defun require-dired-x-h ()
      (require 'dired-x))))
#+end_src
******** Term
********* eshell :persistence:
#+begin_src elisp
(after! eshell
  (setq eshell-history-size biome--very-big)) ; Setting this to `nil' to inherit envvar HISTSIZE is another option.
#+end_src
******** Tools
********* Magit
********** magit :UI:
#+begin_src elisp
(after! magit
  (setq git-commit-style-convention-checks '(non-empty-second-line))
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))
#+end_src
******** Lang
********* Clojure
********** clojure :bindings:theming:
#+begin_src elisp
(use-package! clojure-mode
  :defer t
  :init
  (setq clojure-refactor-map-prefix (kbd "s-M r")) ; Has to be set before clojure-mode loads. ; REVIEW temporary binding
  :config
  (set-ligatures! 'clojure-mode :lambda "fn")
  (custom-theme-set-faces! biome--theme
    `(clojure-character-face :foreground ,(doom-color 'violet) :weight bold)))
#+end_src
********** cider :persistence:
#+begin_src elisp
(after! cider
  (setq cider-repl-history-size biome--very-big
        cider-print-options '(("length" 100))))

;; REVIEW make sure this is still working after nesting in `after!'
(after! cider-repl
  (add-hook! 'cider-repl-mode-hook
             #'goto-address-prog-mode
             #'highlight-numbers-mode
             #'rainbow-delimiters-mode
             #'yas-minor-mode-on
             #'biome-sp-strict-h))
#+end_src
********** clj-refactor :bindings:
#+begin_src elisp
(after! clj-refactor
  (cljr-add-keybindings-with-prefix "s-M R")) ; REVIEW temporary binding
#+end_src
********* Emacs Lisp
********** emacs-lisp
#+begin_src elisp
(after! elisp-mode
  (setq-hook! 'emacs-lisp-mode-hook indent-tabs-mode nil))
#+end_src
********* Org
********** org :UI:path:theming:
#+begin_src elisp
(after! org
  (setq org-agenda-files `(,biome--org-dir
                           ,biome--org-gcal-dir
                           ,(concat biome--org-dir "/projects"))
        org-log-done 'time
        org-priority-lowest ?E
        org-priority-default ?C
        org-priority-faces `((?A . ,(doom-color 'red))
                             (?B . ,(doom-color 'orange))
                             (?C . ,(doom-color 'blue))
                             (?D . ,(doom-color 'yellow))
                             (?E . ,(doom-color 'green)))))
#+end_src
********** ob
#+begin_src elisp
(after! ob
  (setq org-babel-noweb-error-all-langs t))
#+end_src
********** evil-org :evil:bindings:
#+begin_src elisp
(after! evil-org
  (map! :map evil-org-mode-map
        :nv "C-j" #'outline-forward-same-level
        :nv "C-k" #'outline-backward-same-level))
#+end_src
********* Scheme
********** scheme
#+begin_src elisp
(after! scheme
  (setq-hook! 'scheme-mode-hook indent-tabs-mode nil))
#+end_src
********** geiser :persistence:path:guix:
Use ~:init~ to configure variables (as opposed to ~:config~, which seems like it'd be fine) because hlissner does it this way for the Geiser package so I will too.
#+begin_src elisp
(use-package! geiser
  :defer t
  :init
  (setq geiser-repl-current-project-function #'ignore) ; Reset this back to its default (don't have separate REPLs for projects) because it doesn't play nice with the Guix store.
  (setq geiser-repl-history-filename (concat doom-cache-dir "geiser-history")))
#+end_src
******** App
********* Calendar
********** org-gcal :org:user:secret:persistence:path:
#+begin_src elisp
(after! org-gcal
  (setq org-gcal-client-id "446729771716-pp79934q99aro2h8v3iki1fejcodbdoo.apps.googleusercontent.com"
        org-gcal-client-secret (-> (auth-source-search :host org-gcal-client-id) car (plist-get :secret) funcall)
        org-gcal-fetch-file-alist `((user-mail-address . ,(concat biome--org-gcal-dir "/" user-mail-address ".org"))
                                    ("addressbook%23contacts@group.v.calendar.google.com" . ,(concat biome--org-gcal-dir "/contacts.org"))
                                    ("en.usa%23holiday@group.v.calendar.google.com" . ,(concat biome--org-gcal-dir "/holidays.org")))
        org-gcal-recurring-events-mode 'nested))
#+end_src
******** Config
********* expand-region :bindings:
#+begin_src elisp
(use-package! expand-region
  :defer t
  :init
  (map! :nv "s-e" #'er/expand-region
        :nv "s-E" #'er/contract-region)
  :config
  (setq expand-region-fast-keys-enabled nil) ; My mapping is conventient enough and I don't want the repeat key to conflict with anything.
  ;; Copied from Doom config: ~/.config/emacs/modules/config/default/+emacs.el:12
  (defadvice! biome--quit-expand-region-a (&rest _)
    "Properly abort an expand-region region."
    :before '(evil-escape doom/escape)
    (when (memq last-command '(er/expand-region er/contract-region))
      (er/contract-region 0))))
#+end_src
******** Guix
********* Emacs integration
- TODO if I can somehow get the profile paths generic perhaps these should be in a patch phase of my emacs package. Also since I'm getting rid of my extra profiles (I think?) I can just patch in =~/.guix-home=.
  Check out the Guix emacs package's patching of man and tramp (in the source snippets), I think those files have moved since Emacs 27, check
********** man :path:
#+begin_src elisp :noweb yes
(after! man
  (prependq! Man-header-file-path
             (-concat (-map (lambda (p)
                              (concat p "/include"))
                            '(<<guix-extra-profiles>>))
                      '("<<guix-home-profile>>/include"))))
#+end_src
********** tramp :path:
Make tramp work on Guix. Tramp is used locally to do sudo from inside Emacs so include my user-specific paths too.
#+begin_src elisp :noweb yes
(after! tramp
  (prependq! tramp-remote-path
             (-concat (-map (lambda (p)
                              (concat p "/bin"))
                            '(<<guix-extra-profiles>>))
                      '("<<guix-home-profile>>/bin"
                        "~/.config/guix/current/bin"
                        "~/.guix-profile/bin"
                        "~/.guix-profile/sbin"
                        "/run/current-system/profile/bin"
                        "/run/current-system/profile/sbin"))))
#+end_src
********* guix.el
********** guix :UI:
#+begin_src elisp
(after! guix
  (set-popup-rules!
    '(("^\\*Guix" :height 0.5))))
#+end_src
********** guix-devel :scheme:
#+begin_src elisp
(use-package! guix-devel
  :hook (scheme-mode . guix-devel-mode))
#+end_src
********** guix-popup :bindings:
#+begin_src elisp
(use-package! guix-popup
  :defer t
  :init
  (map! :leader
        "l" #'guix))  ; REVIEW temporary binding?
#+end_src
********** guix-prettify :UI:
#+begin_src elisp
(use-package! guix-prettify
  :hook (doom-first-buffer . global-guix-prettify-mode))
#+end_src
********* guix-contributing
#+begin_src elisp
;; TODO once I'm done packaging Doom figure out how to enable this
;; (use-package! guix-contributing)
#+end_src
********* guix-packaging :persistence:path:
#+begin_src elisp
(use-package! guix-packaging
  :defer t
  :init
  (setq guix-packaging--data-dir (concat doom-cache-dir "guix-packaging")))
#+end_src
******** ?
********* avy
#+begin_src elisp
;; REVIEW Trying out not having this so I can use avy dispatch commands.
;; (after! avy
;;   (setq avy-single-candidate-jump t))
#+end_src
********* paren :UI:
#+begin_src elisp
(after! paren
  (setq! show-paren-delay 0))
#+end_src
********* prog-mode :prog_mode:
#+begin_src elisp
(add-hook! 'prog-mode-hook #'biome-sp-strict-h)
#+end_src
********* rainbow-delimiters :theming:
#+begin_src elisp
(after! rainbow-delimiters
  (let ((default-max rainbow-delimiters-max-face-count))
    (defun biome-set-rainbow-delimiters-max-face-count ()
      (setq rainbow-delimiters-max-face-count
            (if (memq biome--theme custom-enabled-themes)
                8 default-max))))

  (biome-set-rainbow-delimiters-max-face-count)
  (add-hook! 'doom-load-theme-hook #'biome-set-rainbow-delimiters-max-face-count)

  (custom-theme-set-faces! biome--theme
    `(rainbow-delimiters-depth-1-face :foreground ,(doom-color 'fg))
    `(rainbow-delimiters-depth-2-face :foreground ,(doom-color 'magenta))
    `(rainbow-delimiters-depth-3-face :foreground ,(doom-color 'blue))
    `(rainbow-delimiters-depth-4-face :foreground ,(doom-color 'cyan))
    `(rainbow-delimiters-depth-5-face :foreground ,(doom-color 'green))
    `(rainbow-delimiters-depth-6-face :foreground ,(doom-color 'yellow))
    `(rainbow-delimiters-depth-7-face :foreground ,(doom-color 'orange))
    `(rainbow-delimiters-depth-8-face :foreground ,(doom-color 'red))))
#+end_src
********* recentf :persistence:
#+begin_src elisp
(after! recentf
  (setq recentf-max-saved-items 500))
#+end_src
********* smartparens :bindings:
#+begin_src elisp
(after! smartparens
  (map! :map smartparens-mode-map
        "C-s-h" #'sp-backward-sexp
        "C-s-l" #'sp-forward-sexp
        "C-s-u" #'sp-backward-up-sexp
        "C-s-o" #'sp-up-sexp
        :gn "C-s-m" #'sp-backward-down-sexp ; Bind in normal mode explicitly to override the Doom mapping in ~/.config/emacs/modules/config/default/config.el:447
        "C-s-." #'sp-down-sexp
        "C-s-c" #'sp-splice-sexp
        "C-s-s" #'sp-splice-sexp-killing-backward
        "C-s-f" #'sp-splice-sexp-killing-forward
        "C-s-x" #'sp-backward-slurp-sexp
        "C-s-v" #'sp-forward-slurp-sexp
        "C-s-w" #'sp-backward-barf-sexp
        "C-s-r" #'sp-forward-barf-sexp
        (:prefix "C-s-;"
         "(" #'sp-wrap-round
         "[" #'sp-wrap-square
         "{" #'sp-wrap-curly
         "s" #'sp-split-sexp
         "j" #'sp-join-sexp
         "r" #'sp-raise-sexp
         "c" #'sp-convolute-sexp
         "w" #'sp-rewrap-sexp)))
#+end_src
********** Hook :bindings:
#+begin_src elisp
(defun biome-sp-strict-h ()
  (add-hook! 'smartparens-enabled-hook :local
             #'turn-on-smartparens-strict-mode
             (defun biome-modify-sp-strict-mode-map-h ()
               (map! :map smartparens-strict-mode-map
                     :i "DEL" #'sp-backward-delete-char))))
#+end_src
********* transient :persistence:
- TODO Not sure where this should be categorized, it's a helper package required by at least magit, forge, git-timemachine
#+begin_src elisp
(after! transient
  (setq transient-history-limit biome--very-big))
#+end_src
********* undo-fu
#+begin_src elisp
(after! undo-fu
  (setq undo-fu-ignore-keyboard-quit t))
#+end_src
********* undo-tree :UI:
#+begin_src elisp
;; (after! undo-tree
;;   (setq undo-tree-visualizer-timestamps t))
#+end_src
********* emojify :UI:
#+begin_src elisp
(after! emojify
  (setq emojify-display-style 'unicode))
#+end_src
********* asdf :bindings:
- TODO donno where this should go, ~+default-minibuffer-maps~ is a doom thing I guess
#+begin_src elisp
(define-key! :keymaps +default-minibuffer-maps
  "s-J" #'scroll-up-command
  "s-K" #'scroll-down-command)
#+end_src
******* Theming :theming:
#+begin_src elisp
(setq doom-theme biome--theme)

(custom-theme-set-faces! biome--theme
  `(font-lock-comment-delimiter-face :foreground ,(biome--color :comment-delimiter))
  `(font-lock-doc-face :foreground ,(doom-color 'cyan)))
#+end_src
******** Font
#+begin_src elisp
(let ((font (font-spec :family "Fira Code Retina" :size 12)))
  (when (find-font font)
    (setq doom-font font)))
#+end_src
******** Nuclear Theme

#+call: gen-doom-theme() :results code :post unescape(*this*) :results_switches ":tangle (meta-in-dir \"themes/doom-nuclear-theme.el\")"

#+RESULTS:
#+begin_src elisp :tangle (meta-in-dir "themes/doom-nuclear-theme.el")
;;; nuclear-theme.el --- inspired by Atom One Dark -*- lexical-binding: t; no-byte-compile: t; -*-
;;
;;
;; Created: December 6, 2020
;; Version: 2.0.0
;; Keywords: custom themes, faces
;; Homepage: https://github.com/hlissner/emacs-doom-themes
;; Package-Requires: ((emacs "25.1") (cl-lib "0.5") (doom-themes "2.2.1"))
;;
;;; Commentary:
;;
;; Inspired by Atom's One Dark color scheme.
;;
;;; Code:

(require 'doom-themes)


;;
;;; Variables

(defgroup nuclear-theme nil
  "Options for the `nuclear' theme."
  :group 'doom-themes)

(defcustom nuclear-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'nuclear-theme
  :type 'boolean)

(defcustom nuclear-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group 'nuclear-theme
  :type 'boolean)

(defcustom nuclear-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line.
Can be an integer to determine the exact padding."
  :group 'nuclear-theme
  :type '(choice integer boolean))


;;
;;; Theme definition

(def-doom-theme doom-nuclear
  "A dark theme inspired by Atom One Dark."

  ;; name        default   256           16
  ((bg         '("#282c34" "black"       "black"  ))
   (fg         '("#dee2f8" "#bfbfbf"     "brightwhite"  ))

   ;; These are off-color variants of bg/fg, used primarily for `solaire-mode',
   ;; but can also be useful as a basis for subtle highlights (e.g. for hl-line
   ;; or region), especially when paired with the `doom-darken', `doom-lighten',
   ;; and `doom-blend' helper functions.
   (bg-alt     '("#21242b" "black"       "black"        ))
   (fg-alt     '("#5B6268" "#2d2d2d"     "white"        ))

   ;; These should represent a spectrum from bg to fg, where base0 is a starker
   ;; bg and base8 is a starker fg. For example, if bg is light grey and fg is
   ;; dark grey, base0 should be white and base8 should be black.
   (base0      '("#1B2229" "black"       "black"        ))
   (base1      '("#1c1f24" "#1e1e1e"     "brightblack"  ))
   (base2      '("#202328" "#2e2e2e"     "brightblack"  ))
   (base3      '("#23272e" "#262626"     "brightblack"  ))
   (base4      '("#3f444a" "#3f3f3f"     "brightblack"  ))
   (base5      '("#5B6268" "#525252"     "brightblack"  ))
   (base6      '("#73797e" "#6b6b6b"     "brightblack"  ))
   (base7      '("#9ca0a4" "#979797"     "brightblack"  ))
   (base8      '("#DFDFDF" "#dfdfdf"     "white"        ))

   (grey       base4)
   (red        '("#fb8578" "#ff6655" "red"          ))
   (orange     '("#fdce5f" "#dd8844" "brightred"    ))
   (green      '("#9fed9c" "#99bb66" "green"        ))
   (teal       '("#4db5bd" "#44b9b1" "brightgreen"  ))
   (yellow     '("#eddc91" "#ECBE7B" "yellow"       ))
   (blue       '("#7db9fe" "#51afef" "brightblue"   ))
   (dark-blue  '("#5f68de" "#2257A0" "blue"         ))
   (magenta    '("#e29bf7" "#c678dd" "brightmagenta"))
   (violet     '("#aeb9f3" "#a9a1e1" "magenta"      ))
   (cyan       '("#75e0f9" "#46D9FF" "brightcyan"   ))
   (dark-cyan  '("#5699AF" "#5699AF" "cyan"         ))

   ;; These are the "universal syntax classes" that doom-themes establishes.
   ;; These *must* be included in every doom themes, or your theme will throw an
   ;; error, as they are used in the base theme defined in doom-themes-base.
   (highlight      "#8496ff")
   (vertical-bar   (doom-darken base1 0.1))
   (selection      dark-blue)
   (builtin        blue)
   (comments       "#63677f")
   (doc-comments   (doom-lighten (if nuclear-brighter-comments dark-cyan base5) 0.25))
   (constants      yellow)
   (functions      blue)
   (keywords       magenta)
   (methods        violet)
   (operators      cyan)
   (type           orange)
   (strings        green)
   (variables      red)
   (numbers        violet)
   (region         `(,(doom-lighten (car bg-alt) 0.15) ,@(doom-lighten (cdr base1) 0.35)))
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    orange)
   (vc-added       green)
   (vc-deleted     red)

   ;; These are extra color variables used only in this theme; i.e. they aren't
   ;; mandatory for derived themes.
   (modeline-fg              fg)
   (modeline-fg-alt          base5)
   (modeline-bg              (if nuclear-brighter-modeline
                                 (doom-darken blue 0.45)
                               (doom-darken bg-alt 0.1)))
   (modeline-bg-alt          (if nuclear-brighter-modeline
                                 (doom-darken blue 0.475)
                               `(,(doom-darken (car bg-alt) 0.15) ,@(cdr bg))))
   (modeline-bg-inactive     `(,(car bg-alt) ,@(cdr base1)))
   (modeline-bg-inactive-alt `(,(doom-darken (car bg-alt) 0.1) ,@(cdr bg)))

   (-modeline-pad
    (when nuclear-padded-modeline
      (if (integerp nuclear-padded-modeline) nuclear-padded-modeline 4))))


  ;;;; Base theme face overrides
  (((line-number &override) :foreground base4)
   ((line-number-current-line &override) :foreground violet)
   ((font-lock-comment-face &override)
    :background (if nuclear-brighter-comments (doom-lighten bg 0.05)))
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if nuclear-brighter-modeline base8 highlight))

   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground orange)
   (css-property             :foreground green)
   (css-selector             :foreground blue)
   ;;;; doom-modeline
   (doom-modeline-bar :background (if nuclear-brighter-modeline modeline-bg highlight))
   (doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
   (doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
   (doom-modeline-buffer-project-root :foreground green :weight 'bold)
   ;;;; elscreen
   (elscreen-tab-other-screen-face :background "#353a42" :foreground "#1e2022")
   ;;;; ivy
   (ivy-current-match :background dark-blue :distant-foreground base0 :weight 'normal)
   ;;;; LaTeX-mode
   (font-latex-math-face :foreground green)
   ;;;; markdown-mode
   (markdown-markup-face :foreground base5)
   (markdown-header-face :inherit 'bold :foreground red)
   ((markdown-code-face &override) :background (doom-lighten base3 0.05))
   ;;;; rjsx-mode
   (rjsx-tag :foreground red)
   (rjsx-attr :foreground orange)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :background modeline-bg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-inactive-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-alt))))

  ;;;; Base theme variable overrides-
  ())

;;; nuclear-theme.el ends here
#+end_src
********* Generator
:PROPERTIES:
:header-args+: :tangle no
:END:
#+name: gen-doom-theme
#+begin_src elisp :var palette=palette
(defun dt--color (color)
  (let ((k (-> color symbol-name (substring 1))))
    (cadr (assoc k palette))))

(defmacro dt--buffer->string (&rest body)
  `(with-temp-buffer
     ,@body
     (buffer-string)))

(defun dt--slurp (f)
  (dt--buffer->string
   (insert-file-contents f)))

(defun dt--replace (s match replacement)
  (replace-regexp-in-string match replacement s 'fixedcase 'literal))

(defun dt--replace-sexp (s match replacement)
  (dt--buffer->string
   (insert s)
   (goto-char (point-min))
   (re-search-forward match)
   ;; Calling `forward-sexp' and `backward-sexp' here to preserve whitespace.
   (forward-sexp)
   (backward-sexp)
   (kill-sexp)
   (insert (format "%S" replacement))))

(defun dt--gen-doom-theme (f)
  (-as->
   (dt--slurp f) $
   (dt--replace-sexp $ "def-doom-theme" 'doom-nuclear)
   (dt--replace $ "doom-one" "nuclear")
   (-reduce-from
    (-lambda (s (match replacement))
      (dt--replace-sexp s match replacement))
    $
    (-partition
     2
     (let ((match-base-color (lambda (form)
                               (rx-to-string `(seq "(" ,form (+ whitespace) "'("))))
           (match-face (lambda (&rest forms)
                         (rx-to-string `(seq "(" ,@forms)))))
       (list
        (funcall match-base-color "fg") (dt--color :fg)
        (funcall match-base-color "red") (dt--color :red)
        (funcall match-base-color "orange") (dt--color :orange)
        (funcall match-base-color "green") (dt--color :green)
        (funcall match-base-color "yellow") (dt--color :yellow)
        (funcall match-base-color "blue") (dt--color :blue)
        (funcall match-base-color "dark-blue") (dt--color :dark-blue)
        (funcall match-base-color "magenta") (dt--color :magenta)
        (funcall match-base-color "violet") (dt--color :violet)
        (funcall match-base-color "cyan") (dt--color :cyan)
        (funcall match-face "highlight") (dt--color :highlight)
        (funcall match-face "builtin") 'blue
        (funcall match-face "comments") (dt--color :comments)
        (funcall match-face "constants") 'yellow
        (funcall match-face "functions") 'blue
        (funcall match-face "keywords") 'magenta
        (funcall match-face "methods") 'violet
        (funcall match-face "operators") 'cyan
        (funcall match-face "type") 'orange
        (funcall match-face "variables") 'red
        (funcall match-face "numbers") 'violet
        (funcall match-face "line-number-current-line" '(+? anything) ":foreground") 'violet))))
   (dt--replace $ (rx ";; Copyright" (*? anything) "\n") "")
   (dt--replace $ (rx ";; Author" (*? anything) "\n") "")))

;; REVIEW do this better (don't hardcode it?). Add a :path: tag to this org header if necessary. Perhaps it would be best to have the doom-themes repo be an explicit dependency in some way and manage like I do other Guix or Doom/straight dependencies.
(dt--gen-doom-theme "~/.config/emacs/.local/straight/repos/themes/themes/doom-one-theme.el")
#+end_src

#+name: unescape
#+begin_src elisp :var s=""
(-as-> s $
       (substring s 1 -1) ; Remove outer quotes.
       (replace-regexp-in-string (rx "\\n" ) "\n" $) ; Unescape newlines specifically before unescaping everything else (not how this works / why it's necessary).
       (replace-regexp-in-string (rx "\\" (group anything)) "\\1" $))
#+end_src
******* Projects
******** Phrenetic :path:
#+begin_src elisp
(load "~/projects/phrenetic/meta" 'noerror 'nomessage)

(pushnew! safe-local-variable-values
          '(eval . (with-eval-after-load 'geiser-guile
                     (let ((root-dir
                            (file-name-directory
                             (locate-dominating-file default-directory ".dir-locals.el"))))
                       (make-local-variable 'geiser-guile-load-path)
                       (add-to-list 'geiser-guile-load-path root-dir)))))
#+end_src
******** Nyxt
- TODO donno if I should keep this section in particular (it's not really impoportant), I'm just thinking I want to start trying out adding safe local variables for other codebases so I can get their advantages. Also the changes it makes persist (modify ~lisp-imenu-generic-expression~), I don't know if that's a good idae.
#+begin_src elisp
(pushnew! safe-local-variable-values
          '(eval . (cl-flet ((enhance-imenu-lisp
                              (&rest keywords)
                              (dolist (keyword keywords)
                                (add-to-list
                                 'lisp-imenu-generic-expression
                                 (list (purecopy (concat (capitalize keyword)
                                                         (if (string= (substring-no-properties keyword -1) "s")
                                                             "es"
                                                           "s")))
                                       (purecopy (concat "^\\s-*("
                                                         (regexp-opt
                                                          (list (concat "define-" keyword))
                                                          t)
                                                         "\\s-+\\(" lisp-mode-symbol-regexp "\\)"))
                                       2)))))
                     ;; This adds the argument to the list of imenu known keywords.
                     (enhance-imenu-lisp
                      "bookmarklet-command"
                      "class"
                      "command"
                      "ffi-method"
                      "function"
                      "mode"
                      "parenscript"
                      "user-class"))))
#+end_src
******** Hyperdrive :path:
#+begin_src elisp
(pushnew! safe-local-variable-values
          '(cider-preferred-build-tool . shadow-cljs)
          '(cider-default-cljs-repl . shadow)
          '(cider-shadow-default-options . ":app")
          '(cider-offer-to-open-cljs-app-in-browser . nil)
          '(cider-clojure-cli-global-options . "-A:dev")
          '(eval . (setenv "DATOMIC_APP_INFO_MAP" "{:app-name \"neutrino\"}"))
          '(eval . (setenv "DATOMIC_ENV_MAP" "{:env :dev}"))
          '(cider-clojure-cli-global-options . nil))

(prodigy-define-service
  :name "Amplify Mock"
  :command "amplify"
  :args '("mock")
  :cwd "~/projects/Krush/hyperdrive/apps/singularity"
  :kill-process-buffer-on-stop t)

(prodigy-define-service
  :name "Datomic Access (exogenesis)"
  :command "bash"
  :args '("datomic" "client" "access" "exogenesis")
  :cwd "~/projects/Krush/hyperdrive/ion/team"
  :kill-process-buffer-on-stop t)
#+end_src
******** Massrealty :path:
#+begin_src elisp
;; (pushnew! safe-local-variable-values
;;           '(ssh-deploy-root-remote . "/ssh:massrealty@35.196.144.73:/home/massrealty/deploy/homes/public_html/")
;;           '(ssh-deploy-automatically-detect-remote-changes . t))

;; (after! org-gcal
;;   (add-to-list 'org-gcal-fetch-file-alist `("krzysztof@massrealty.com" . ,(concat biome--org-gcal-dir "/krzysztof@massrealty.com.org")) 'append))
#+end_src
******* WIP
#+begin_src elisp
(after! org
  (add-to-list 'org-agenda-files (concat biome--org-dir "/spring_cleaning") 'append))

;; I don't think I'll ever need this with Sway. Is it worth keeping this and having an "I'm not on Sway / some WM" conditional around it?
;; (add-to-list 'initial-frame-alist '(fullscreen . fullboth))

(map! "s-A" #'app-launcher-run-app)

(map! "s-&" (lambda (command)
              (interactive (list (read-shell-command "$ ")))
              (call-process-shell-command command nil 0 nil)))

(map! :leader
      "s-," (lookup-key doom-leader-map (kbd "<")))

(after! company
  (map! :map company-active-map
        "s-[" #'company-show-doc-buffer ; Currently opens Help, it would be better if I made it use Helpful.
        "s-]" #'company-show-location))

(after! evil-org
  (map! :map evil-org-mode-map
        (:prefix "g"
         :nv "{" #'evil-backward-paragraph
         :nv "}" #'evil-forward-paragraph)))

;; TODO Maybe do this if popping to the side is too annoying
;; (after! geiser-repl
;;   (setq geiser-repl-use-other-window nil))

;; Doesn't work yet: you have to switch to the buffer "manually" once before it starts being treated as real
(map! "s-d m" (cmd! (doom-set-buffer-real (current-buffer) t)))

;; `forward-char' in original definition is messing things up, do this for now
;; (defun +eshell/search-history ()
;;   (interactive)
;;   (consult-history))
(after! esh-mode
  (map! :map eshell-mode-map
        "C-s" #'consult-history))

;; Remove the :mode set by the Doom module. It's unnecessary (`guix-drv-mode.el' already does this, and for /nix/store drvs specifically) and it shadows `guix-derivation-mode'.
;; TODO should this go in the Guix or Nix config section?
(use-package! nix-drv-mode
  :defer t
  :init
  (setq auto-mode-alist (delete '("\\.drv\\'" . nix-drv-mode) auto-mode-alist)))

(after! vertico
  (setq vertico-count 20  ; Trying out, maybe too big.
        vertico-scroll-margin 7))
#+end_src
******** "status bar"
Not using waybar at the moment so these are handy.
#+begin_src elisp
(use-package! battery
  :config
  (display-battery-mode 1))

(use-package! time
  :config
  (setq display-time-day-and-date t)
  ;; (setq display-time-24hr-format t)
  (display-time-mode 1))
#+end_src
******** keybinding ideas
#+begin_src elisp
;; If I keep this I can get rid of the "C-_" binding I have too. Update: maybe? Some places C-_ works and some s-h does (in vertico)? What about my key translation for C-? ? Straighten all this shit out.
(biome--trans "s-h" "C-h")

(map! "s-o" (lookup-key doom-leader-map (kbd "<")))
;; Get rid of binding for =s-r=?
(map! "s-r" nil)

;; Maybe "C-s-i" but then I'll have to change my sexp-movement command(s). Maybe keep this even if I do that, for consistency.
(biome--trans "C-S-i" "<backtab>")
;; Also messes with my sexp-movement bindings
;; (map! "C-s-j" #'evil-scroll-down
;;       "C-s-k" #'evil-scroll-up)

(after! evil
  (map! :map evil-motion-state-map
        ;; Maybe "C-s-o" but then I'll have to change my sexp-movement command(s). There are other bindings for jump-forward though, maybe I'll just use those.
        "C-S-o" #'evil-jump-forward))

;; Maybe `s-S' to save-and-tangle? If I don't get some sort of auto-tangling thing going
;; - maybe it could be "save and eval defun (C-M-x)" in lisp/programming modes?'
;; Maybe a hotkey that just jumps back and forth between my most recently focused browser window and eemacs?
;; Maybe bind `s-o' in `consult-buffer' to "close consult-buffer and open +vertico/switch-workspace-buffer"
#+end_src
******** phrenetic auto-tangle :path:
- TODO Might be easier to do this with file-local variables.
#+begin_src elisp
;; (setq biome--phrenetic-dir "~/projects/phrenetic")

;; (add-hook! 'org-mode-hook
;;   (defun biome-add-org-autotangle-after-save-hook-h ()
;;     (add-hook! 'after-save-hook :local
;;       (defun biome-autotangle-h ()
;;         (when (file-in-directory-p buffer-file-name biome--phrenetic-dir)
;;           ;; TODO ensure there aren't files in the output directory that no longer correspond to the org file. Just wipe it?
;;           (let ((org-confirm-babel-evaluate nil))
;;             (org-babel-tangle)))))))
#+end_src
******** org-tanglesync
#+begin_src elisp
;; (use-package! org-tanglesync
;;   :hook ((org-mode . org-tanglesync-mode)
;;          ((prog-mode text-mode) . org-tanglesync-watch-mode))
;;   :config
;;   (setq org-tanglesync-watch-files '("/home/pharcosyle/projects/phrenetic/phrenetic.org")))
#+end_src
******** Temporary copypasta from bloodhound
Copying this here for now, for convenience.
#+begin_src elisp
(setq my-dotfiles-git-dir (concat "--git-dir=" (expand-file-name "~/home-state.git")))
;; (setq my-dotfiles-work-tree (concat "--work-tree=" (expand-file-name "~")))
(map! "s-b" (cmd!
             (pushnew! magit-git-global-arguments my-dotfiles-git-dir)
             (magit-status "~")))
(map! "s-B" (cmd!
             ;; (delq! my-dotfiles-git-dir magit-git-global-arguments)
             ;; Why is the above not working? Doing this for now:
             ;; - Update: because `delq!' tests for equality with `eq'
             (setq magit-git-global-arguments (remove my-dotfiles-git-dir magit-git-global-arguments))))
#+end_src
******** until I get semicolon working
#+begin_src elisp
(map! (:map minibuffer-local-map
       "C-:" #'embark-act
       "C-c C-:" #'embark-export)
      (:leader
       "A" #'embark-dwim)
      ;; Trying out cycling (temp)
      "C-:" #'embark-act
      "s-q" #'embark-cycle)
#+end_src
******** ligatures
Probably move these to ~after!~ blocks
#+begin_src elisp
(set-ligatures! '(html-mode nxml-mode web-mode)
  :font-ligatures '("<!--" "-->" "</>" "</" "/>" ; Fira Code
                    "://"))
#+end_src
******* Out-of-band
Useful for making quick configuration additions if the the active Doomdir isn't writable (for example if it's symlinked to the Guix store).
#+begin_src elisp :var oob-dir=(meta-get-dir)
(let ((oob-dir (concat "~/projects/phrenetic/" oob-dir))) ; TODO currently `meta-get-dir' returns a path relative to the phrenetic dir. That might change but regardless don't hardcode the path here eventually.
  (let* ((file "out-of-band"))
    (or (load (concat oob-dir "/" file) 'noerror 'nomessage)
        (load! file 'noerror))))
#+end_src
******** File
#+begin_src elisp :tangle (meta-in-dir "out-of-band.el")
#+end_src
****** Packages :version:
#+begin_src elisp :tangle (meta-in-dir "packages.el")
;; -*- no-byte-compile: t; -*-

(package! dash :pin "da167c51e9fd167a48d06c7c0ee8e3ac7abd9718") ; TODO make this be introduced by my doom config (where I need it)?
(package! expand-region :pin "7e5bbe2763c12bae3e77fe0c49bcad05ff91dbfe")
(package! tldr :pin "d3fd2a809a266c005915026799121c78e8b358f0")
(package! trashed :pin "ddf5830730544435a068f2dc9ac75a81ea69df1d")

(package! guix :pin "c9aef52121b458297e70bb50f49f7276b4a8d759")
(package! build-farm :pin "5c268a3c235ace0d79ef1ec82c440120317e06f5") ; REVIEW trying out
(package! guix-packaging ; REVIEW trying out
  :recipe (:host github
           :repo "ryanprior/emacs-guix-packaging"
           :files (:defaults "snippets"))
  :pin "5bbd1f1a268b3dfd813a75125ca88cbf0bef6529")

(package! bluetooth :pin "a1ea361f17c6b4e5353160539cd3df6754007a9d") ; TODO just maybe make this dependent on my "bluetooth feature"

(package! symon :pin "8dd8b6df49b03cd7d31b85aedbe9dd08fb922335")

;; TODO this should probably be specific to the krush/hyperdrive/afterburner(?) project
;; (package! graphql-mode :pin "2371316a750b807de941184d49ca19d277ecadcd")

(package! org-tanglesync :pin "af83a73ae542d5cb3c9d433cbf2ce1d4f4259117")

(package! i3wm-config-mode :pin "c70bdc1367e461299e13a4797bc9d9d950184edd") ; TODO maybe make this part of a Sway / Window Manager feature or introduced by my Dotfiles project

;; REVIEW Breaks stuff after I updated to emacs 29 latest:
;; Compiling EmacSQL SQLite binary ...
;; Code Review initialization: (error "No EmacSQL SQLite binary available, aborting")
(package! code-review :disable t)

(package! app-launcher
  :recipe (:host github
           :repo "SebastienWae/app-launcher")
  :pin "80a9ed37892ee6e21fe44487ed11f66a15e3f440")

(package! 0x0 :pin "63cd5eccc85e527f28e1acc89502a53245000428")

;; TODO do hardcoded path better?
;; TODO currently donnager is part of my dotfiles but if that isn't going to be the case I might like to make my dotfiles able to work in a "self-contained" fashion by providing a fallback in case it isn't available. To a github repo, or somehing. Actually can/should I do something like `out-of-band.el' and have donnager compiled and used like a regular package BUT prefer using the source in ~/projects if available. Does straight support doing things like this? Implement it myself if not?
(package! donnager
  :recipe (:local-repo "~/projects/phrenetic/donnager"
           ;; Avoid having to run `doom sync' every time the package is changed. REVIEW after packaging Doom revisit this and see if it still makes sense to disable compilation. Byte-compiled code is faster, after all. Natively-compiled even more so.
           :build (:not compile)))
#+end_src
** Dev
- REVIEW I might want to have the res files (e.g. =alucard_bg.png=) placed closer to the dotfiles config that uses them. Don't worry about this right now, gitignores are a pain and they've been changing frequently as I rewrite stuff.
*** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
/*
!res/
#+end_src
* Dev
- TODO maybe make this a =*= with excludes later. I could then get rid of any subproject dirs' gitignores that consist solely of a =*= but I might not want to, for project isolation
** Git ignore
#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
/.gitignore
#+end_src
** Github
*** Git config
#+begin_src gitconfig :tangle (meta-in-dir ".git/config")
[remote "origin"]
	url = https://github.com/pharcosyle/phrenetic.git
	fetch = +refs/heads/*:refs/remotes/origin/*

[branch "master"]
	remote = origin
	merge = refs/heads/master
#+end_src
* Dev local
** Git config
- REVIEW I may want to pull this out for reuse across all my projects since this bit of git config will always be the same (on a Guix system that is, so ideally have multiple default git configs per-OS and select the right one dynamically when tangling)
#+begin_src gitconfig :tangle (meta-in-dir ".git/config")
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
#+end_src
** Emacs directory-local variables
- TODO Causes gesier to fail to load outside of this directory
  *don't do this until I figure out how I'm doing per-project Emcas config* I might not end up doing Geiser setup this way at all
  Since the ~with-eval-after-load~ body will get called wherever geiser-guile is first loaded, if the geiser library isn't loaded yet and I e.g. visit a file in this directory, then leave, then try to =M-x guix p e= while I'm viewing a file elsewhere it'll fail to run since it loads geiser internally and can't find a dominating .dir-locals.
  - an alternative approach to setting up geiser for a project: [[https://github.com/guix-mirror/guix/blob/master/.dir-locals.el#L21][guix/.dir-locals.el at master · guix-mirror/guix · GitHub]]
    Maybe try that or something like it.
    - here's where I got the original approach, for reference: [[https://github.com/flatwhatson/flycheck-guile#troubleshooting][GitHub - flatwhatson/flycheck-guile: A Flycheck checker for GNU Guile]]
  - update [2022-03-26 Sat]: this won't work as-is any more
    I have multiple directories to load (ebullient, exhuberant...)
#+begin_src elisp :tangle (meta-in-dir ".dir-locals.el")
((nil
  (eval . (with-eval-after-load 'geiser-guile
            (let ((root-dir
                   (file-name-directory
                    (locate-dominating-file default-directory ".dir-locals.el"))))
              (make-local-variable 'geiser-guile-load-path)
              (add-to-list 'geiser-guile-load-path root-dir))))))
#+end_src

#+begin_src gitignore :tangle (meta-in-dir ".gitignore")
/.dir-locals.el
#+end_src
